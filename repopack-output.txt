This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-25T10:51:56.460Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.bolt/config.json
.bolt/prompt
.gitignore
eslint.config.js
firestore.rules
index.html
package.json
postcss.config.js
src/App.tsx
src/components/Auth.tsx
src/components/Contacts.tsx
src/components/contacts/ContactsList.tsx
src/components/contacts/Customers.tsx
src/components/contacts/Distributors.tsx
src/components/contacts/Employees.tsx
src/components/contacts/Suppliers.tsx
src/components/contacts/WholesaleBuyers.tsx
src/components/Dashboard.tsx
src/components/dashboard/ChartWidget.tsx
src/components/dashboard/dataFetchers.ts
src/components/dashboard/types.ts
src/components/dashboard/WidgetGrid.tsx
src/components/FeatureManagement.tsx
src/components/Features.tsx
src/components/features/Accounting.tsx
src/components/features/Appointments.tsx
src/components/features/Apps.tsx
src/components/features/Barcode.tsx
src/components/features/Calendar.tsx
src/components/features/CRM.tsx
src/components/features/CRM/CustomerDatabase.tsx
src/components/features/CRM/CustomerService.tsx
src/components/features/CRM/LeadManagement.tsx
src/components/features/CRM/MarketingAutomation.tsx
src/components/features/CRM/QuotationsContracts.tsx
src/components/features/CRM/SalesOrderManagement.tsx
src/components/features/CRM/SalesOrderManagement/OrderFulfillment.tsx
src/components/features/CRM/SalesOrderManagement/PricingManagement.tsx
src/components/features/CRM/SalesOrderManagement/ReturnsRefunds.tsx
src/components/features/CRM/SalesOrderManagement/SalesAnalytics.tsx
src/components/features/CRM/SalesOrderManagement/SalesOrderCreation.tsx
src/components/features/CRM/SalesPipeline.tsx
src/components/features/Discuss.tsx
src/components/features/Employees.tsx
src/components/features/Expenses.tsx
src/components/features/FinanceAndAccounting.tsx
src/components/features/FinanceAndAccounting/AccountsPayable.tsx
src/components/features/FinanceAndAccounting/AccountsReceivable.tsx
src/components/features/FinanceAndAccounting/AssetManagement.tsx
src/components/features/FinanceAndAccounting/BankReconciliation.tsx
src/components/features/FinanceAndAccounting/ExpenseManagement.tsx
src/components/features/FinanceAndAccounting/FinancialReporting.tsx
src/components/features/FinanceAndAccounting/GeneralLedger.tsx
src/components/features/FinanceAndAccounting/TaxManagement.tsx
src/components/features/HRManagement.tsx
src/components/features/HRManagement/AttendanceLeaveManagement.tsx
src/components/features/HRManagement/EmployeeDatabase.tsx
src/components/features/HRManagement/EmployeeSelfService.tsx
src/components/features/HRManagement/PayrollManagement.tsx
src/components/features/HRManagement/PerformanceEvaluation.tsx
src/components/features/HRManagement/RecruitmentOnboarding.tsx
src/components/features/Inventory.tsx
src/components/features/InventorySupplyChain.tsx
src/components/features/InventorySupplyChain/BarcodeRFID.tsx
src/components/features/InventorySupplyChain/DemandForecasting.tsx
src/components/features/InventorySupplyChain/InventoryControl.tsx
src/components/features/InventorySupplyChain/OrderManagement.tsx
src/components/features/InventorySupplyChain/ProcurementVendorManagement.tsx
src/components/features/InventorySupplyChain/ShippingLogistics.tsx
src/components/features/InventorySupplyChain/WarehouseManagement.tsx
src/components/features/Knowledge.tsx
src/components/features/Manufacturing.tsx
src/components/features/Manufacturing/BillOfMaterials.tsx
src/components/features/Manufacturing/MaterialsRequirementPlanning.tsx
src/components/features/Manufacturing/ProductionPlanning.tsx
src/components/features/Manufacturing/QualityControl.tsx
src/components/features/Manufacturing/ShopFloorControl.tsx
src/components/features/Manufacturing/WorkOrderManagement.tsx
src/components/features/Planning.tsx
src/components/features/PointOfSale.tsx
src/components/features/PointOfSale/AccountingIntegration.tsx
src/components/features/PointOfSale/Cart.tsx
src/components/features/PointOfSale/CustomerManagement.tsx
src/components/features/PointOfSale/EmployeeManagement.tsx
src/components/features/PointOfSale/HirePurchaseForm.tsx
src/components/features/PointOfSale/HirePurchasePaymentValidation.tsx
src/components/features/PointOfSale/HirePurchaseSummary.tsx
src/components/features/PointOfSale/HirePurchasing.tsx
src/components/features/PointOfSale/ImageUpload.tsx
src/components/features/PointOfSale/InventoryManagement.tsx
src/components/features/PointOfSale/Numpad.tsx
src/components/features/PointOfSale/PaymentValidation.tsx
src/components/features/PointOfSale/ProductForm.tsx
src/components/features/PointOfSale/ProductList.tsx
src/components/features/PointOfSale/ReportingAnalytics.tsx
src/components/features/PointOfSale/SalesContext.tsx
src/components/features/PointOfSale/SalesTransactionManagement.tsx
src/components/features/PointOfSale/types.ts
src/components/features/Project.tsx
src/components/features/Purchase.tsx
src/components/features/SalesOrderManagement.tsx
src/components/features/SalesOrderManagement/OrderFulfillment.tsx
src/components/features/SalesOrderManagement/PricingManagement.tsx
src/components/features/SalesOrderManagement/ReturnsRefunds.tsx
src/components/features/SalesOrderManagement/SalesAnalytics.tsx
src/components/features/SalesOrderManagement/SalesOrderCreation.tsx
src/components/features/ShopFloor.tsx
src/components/features/Sign.tsx
src/components/features/Surveys.tsx
src/components/features/Timesheets.tsx
src/components/features/Todo.tsx
src/components/FeatureSelection.tsx
src/components/ForgotPassword.tsx
src/components/HirePurchaseAgreements.tsx
src/components/hooks/use-toast.ts
src/components/Layout.tsx
src/components/ProtectedRoute.tsx
src/components/Reports.tsx
src/components/Sales.tsx
src/components/services/hirePurchaseService.ts
src/components/SubscriptionPlans.tsx
src/components/ui/badge.tsx
src/components/ui/button.tsx
src/components/ui/card.tsx
src/components/ui/checkbox.tsx
src/components/ui/input.tsx
src/components/ui/select.tsx
src/components/ui/table.tsx
src/components/ui/tabs.tsx
src/components/ui/tooltip.tsx
src/components/UserManagement.tsx
src/components/UserProfile.tsx
src/components/UserSettings.tsx
src/contexts/AuthContext.tsx
src/contexts/CustomerContext.tsx
src/contexts/TenantContext.tsx
src/firebase.ts
src/index.css
src/lib/utils.ts
src/main.tsx
src/styles/animations.css
src/styles/custom-scrollbar.css
src/styles/customStyles.css
src/types/hirePurchase.ts
src/vite-env.d.ts
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Repository Files
================================================================

================
File: .bolt/config.json
================
{
  "template": "bolt-vite-react-ts"
}

================
File: .bolt/prompt
================
For all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.

By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.

Use icons from lucide-react for logos.

Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [
      js.configs.recommended,
      ...tseslint.configs.recommended,
      ...tseslint.configs.recommendedTypeChecked,
    ],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2022,
      globals: {
        ...globals.browser,
        ...globals.es2021,
        React: 'readonly',
      },
      parser: tseslint.parser,
      parserOptions: {
        project: './tsconfig.json',
      },
    },
    plugins: {
      '@typescript-eslint': tseslint.plugin,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
      '@typescript-eslint/explicit-function-return-type': 'off',
      '@typescript-eslint/explicit-module-boundary-types': 'off',
      '@typescript-eslint/no-explicit-any': 'warn',
      '@typescript-eslint/no-unused-vars': ['warn', { argsIgnorePattern: '^_' }],
    },
    settings: {
      react: {
        version: 'detect',
      },
    },
  },
)

================
File: firestore.rules
================
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if request.auth != null;
    }
    
    match /transactions/{transactionId} {
      allow read, write: if request.auth != null;
    }
    
    match /invoices/{invoiceId} {
      allow read, write: if request.auth != null;
    }
    
    match /expenses/{expenseId} {
      allow read, write: if request.auth != null;
    }
    
    match /assets/{assetId} {
      allow read, write: if request.auth != null;
    }
    
    match /liabilities/{liabilityId} {
      allow read, write: if request.auth != null;
    }
    
    match /bankAccounts/{accountId} {
      allow read, write: if request.auth != null;
    }
    
    match /taxRecords/{taxId} {
      allow read, write: if request.auth != null;
    }
  }
}

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "erp-system",
  "private": true,
  "version": "0.1.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "lint": "eslint src --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "@radix-ui/react-checkbox": "^1.1.2",
    "@radix-ui/react-select": "^2.1.2",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.1",
    "@radix-ui/react-tooltip": "^1.1.3",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "firebase": "^10.7.1",
    "framer-motion": "^11.11.9",
    "lucide": "^0.453.0",
    "lucide-react": "^0.303.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.26.2",
    "react-select": "^5.8.1",
    "react-zxing": "^2.0.2",
    "recharts": "^2.13.0",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.5.4"
  },
  "devDependencies": {
    "@types/react": "^18.2.46",
    "@types/react-dom": "^18.2.18",
    "@typescript-eslint/eslint-plugin": "^6.17.0",
    "@typescript-eslint/parser": "^6.17.0",
    "@vitejs/plugin-react": "^4.2.1",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.56.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.5",
    "postcss": "^8.4.32",
    "tailwindcss": "^3.4.0",
    "typescript": "^5.3.3",
    "vite": "^5.0.10"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: src/App.tsx
================
import React from 'react'
import { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom'
import Dashboard from './components/Dashboard'
import Contacts from './components/Contacts'
import Sales from './components/Sales'
import Reports from './components/Reports'
import Auth from './components/Auth'
import Layout from './components/Layout'
import UserProfile from './components/UserProfile'
import Features from './components/Features'
import FeatureManagement from './components/FeatureManagement'
import TenantProvider from './contexts/TenantContext'
import AuthProvider from './contexts/AuthContext'
import ProtectedRoute from './components/ProtectedRoute'
import UserManagement from './components/UserManagement'
import ForgotPassword from './components/ForgotPassword'

// Import feature components
import Calendar from './components/features/Calendar'
import CRM from './components/features/CRM'
import PointOfSale from './components/features/PointOfSale'
import Project from './components/features/Project'
import Timesheets from './components/features/Timesheets'
import Planning from './components/features/Planning'
import Surveys from './components/features/Surveys'
import Purchase from './components/features/Purchase'
import Manufacturing from './components/features/Manufacturing'
import ShopFloor from './components/features/ShopFloor'
import Barcode from './components/features/Barcode'
import Expenses from './components/features/Expenses'
import FinanceAndAccounting from './components/features/FinanceAndAccounting'
import HRManagement from './components/features/HRManagement'
import InventorySupplyChain from './components/features/InventorySupplyChain'
import SalesOrderManagement from './components/features/SalesOrderManagement'
import Inventory from './components/features/Inventory'
import { SalesProvider } from './components/features/PointOfSale/SalesContext'
import HirePurchasing from './components/features/PointOfSale/HirePurchasing'
import HirePurchaseAgreements from './components/HirePurchaseAgreements';

const App: React.FC = () => {
  return (
    <AuthProvider>
      <TenantProvider>
        <Router>
          <Routes>
            <Route path="/login" element={<Auth />} />
            <Route path="/forgot-password" element={<ForgotPassword />} />
            <Route path="/features" element={
              <ProtectedRoute>
                <Features />
              </ProtectedRoute>
            } />
            <Route path="/dashboard" element={
              <ProtectedRoute>
                <Layout>
                  <Dashboard />
                </Layout>
              </ProtectedRoute>
            } />
            <Route path="/contacts" element={
              <ProtectedRoute>
                <Layout>
                  <Contacts />
                </Layout>
              </ProtectedRoute>
            } />
            <Route path="/inventory-supply-chain" element={
              <ProtectedRoute>
                <Layout>
                  <InventorySupplyChain />
                </Layout>
              </ProtectedRoute>
            } />
            <Route path="/sales" element={
              <ProtectedRoute>
                <Layout>
                  <SalesOrderManagement />
                </Layout>
              </ProtectedRoute>
            } />
            <Route path="/reports" element={
              <ProtectedRoute>
                <Layout>
                  <Reports />
                </Layout>
              </ProtectedRoute>
            } />
            <Route path="/profile" element={
              <ProtectedRoute>
                <Layout>
                  <UserProfile />
                </Layout>
              </ProtectedRoute>
            } />
            <Route path="/manage-features" element={
              <ProtectedRoute>
                <Layout>
                  <FeatureManagement />
                </Layout>
              </ProtectedRoute>
            } />
            <Route path="/user-management" element={
              <ProtectedRoute requiredRole="admin">
                <Layout>
                  <UserManagement />
                </Layout>
              </ProtectedRoute>
            } />
            
            {/* Feature routes */}
            <Route path="/calendar" element={
              <ProtectedRoute>
                <Layout>
                  <Calendar />
                </Layout>
              </ProtectedRoute>
            } />
            <Route path="/crm" element={
              <ProtectedRoute>
                <Layout>
                  <CRM />
                </Layout>
              </ProtectedRoute>
            } />
            <Route path="/point-of-sale" element={
              <ProtectedRoute>
                <Layout>
                  <SalesProvider>
                    <PointOfSale />
                  </SalesProvider>
                </Layout>
              </ProtectedRoute>
            } />
            <Route path="/point-of-sale/hire-purchasing" element={
              <ProtectedRoute>
                <Layout>
                  <SalesProvider>
                    <HirePurchasing />
                  </SalesProvider>
                </Layout>
              </ProtectedRoute>
            } />

            <Route path="/finance-and-accounting" element={
              <ProtectedRoute>
                <Layout>
                  <FinanceAndAccounting />
                </Layout>
              </ProtectedRoute>
            } />
            <Route path="/project" element={
              <ProtectedRoute>
                <Layout>
                  <Project />
                </Layout>
              </ProtectedRoute>
            } />
            <Route path="/timesheets" element={
              <ProtectedRoute>
                <Layout>
                  <Timesheets />
                </Layout>
              </ProtectedRoute>
            } />
            <Route path="/planning" element={
              <ProtectedRoute>
                <Layout>
                  <Planning />
                </Layout>
              </ProtectedRoute>
            } />
            <Route path="/surveys" element={
              <ProtectedRoute>
                <Layout>
                  <Surveys />
                </Layout>
              </ProtectedRoute>
            } />
            <Route path="/purchase" element={
              <ProtectedRoute>
                <Layout>
                  <Purchase />
                </Layout>
              </ProtectedRoute>
            } />
            <Route path="/manufacturing" element={
              <ProtectedRoute>
                <Layout>
                  <Manufacturing />
                </Layout>
              </ProtectedRoute>
            } />
            <Route path="/shop-floor" element={
              <ProtectedRoute>
                <Layout>
                  <ShopFloor />
                </Layout>
              </ProtectedRoute>
            } />
            <Route path="/barcode" element={
              <ProtectedRoute>
                <Layout>
                  <Barcode />
                </Layout>
              </ProtectedRoute>
            } />
            <Route path="/hire-purchase" element={
              <ProtectedRoute>
                <Layout>
                  <HirePurchaseAgreements />
                </Layout>
              </ProtectedRoute>
            } />

            <Route path="/hr-management" element={
              <ProtectedRoute>
                <Layout>
                  <HRManagement />
                </Layout>
              </ProtectedRoute>
            } />
            <Route path="/expenses" element={
              <ProtectedRoute>
                <Layout>
                  <Expenses />
                </Layout>
              </ProtectedRoute>
            } />

            <Route path="/inventory" element={
              <ProtectedRoute>
                <Layout>
                  <Inventory />
                </Layout>
              </ProtectedRoute>
            } />
            
            <Route path="/" element={<Navigate to="/login" />} />
          </Routes>
        </Router>
      </TenantProvider>
    </AuthProvider>
  )
}

export default App

================
File: src/components/Auth.tsx
================
import React, { useState } from 'react';
import { signInWithEmailAndPassword, createUserWithEmailAndPassword, sendPasswordResetEmail } from 'firebase/auth';
import { doc, setDoc, getDoc } from 'firebase/firestore';
import { auth, db } from '../firebase';
import { User, Mail, Lock, LogIn } from 'lucide-react';
import { useNavigate } from 'react-router-dom';

const Auth: React.FC = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [resetSent, setResetSent] = useState(false);
  const navigate = useNavigate();

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    try {
      const userCredential = await signInWithEmailAndPassword(auth, email, password);
      const user = userCredential.user;
      
      // Check user role and permissions
      const userDoc = await getDoc(doc(db, 'users', user.uid));
      if (userDoc.exists()) {
        const userData = userDoc.data();
        if (userData.role) {
          // User has a valid role, proceed to features page
          navigate('/features');
        } else {
          setError('You do not have permission to access this system.');
          await auth.signOut();
        }
      } else {
        // If user document doesn't exist, create it
        await setDoc(doc(db, 'users', user.uid), {
          email: user.email,
          role: 'user', // Set a default role
          createdAt: new Date()
        });
        navigate('/features');
      }
    } catch (error: any) {
      console.error("Login error:", error);
      if (error.code === 'auth/user-not-found') {
        // If user doesn't exist, create a new account
        try {
          const userCredential = await createUserWithEmailAndPassword(auth, email, password);
          const user = userCredential.user;
          await setDoc(doc(db, 'users', user.uid), {
            email: user.email,
            role: 'user',
            createdAt: new Date()
          });
          navigate('/features');
        } catch (createError: any) {
          console.error("Account creation error:", createError);
          setError('Failed to create account. Please try again.');
        }
      } else if (error.code === 'auth/wrong-password') {
        setError('Invalid email or password.');
      } else if (error.code === 'auth/too-many-requests') {
        setError('Too many failed login attempts. Please try again later.');
      } else {
        setError('Failed to log in. Please try again.');
      }
    }
  };

  const handleForgotPassword = async () => {
    if (!email) {
      setError('Please enter your email address.');
      return;
    }
    try {
      await sendPasswordResetEmail(auth, email);
      setResetSent(true);
      setError('');
    } catch (error) {
      console.error("Password reset error:", error);
      setError('Failed to send password reset email. Please try again.');
    }
  };

  return (
    <div className="flex justify-center items-center h-full">
      <div className="bg-white p-8 rounded shadow-md w-full max-w-md">
        <h2 className="text-2xl font-bold mb-4 flex items-center">
          <User className="mr-2" />
          Login or Sign Up
        </h2>
        {resetSent ? (
          <p className="text-green-500 mb-4">Password reset email sent. Please check your inbox.</p>
        ) : (
          <form onSubmit={handleLogin}>
            <div className="mb-4">
              <label htmlFor="email" className="block text-sm font-medium text-gray-600 mb-1">Email</label>
              <div className="relative">
                <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
                <input
                  type="email"
                  id="email"
                  className="w-full pl-10 pr-3 py-2 rounded-md border border-gray-300 focus:outline-none focus:ring-1 focus:ring-blue-500"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  required
                />
              </div>
            </div>
            <div className="mb-4">
              <label htmlFor="password" className="block text-sm font-medium text-gray-600 mb-1">Password</label>
              <div className="relative">
                <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
                <input
                  type="password"
                  id="password"
                  className="w-full pl-10 pr-3 py-2 rounded-md border border-gray-300 focus:outline-none focus:ring-1 focus:ring-blue-500"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  required
                />
              </div>
            </div>
            {error && <p className="text-red-500 mb-4">{error}</p>}
            <button
              type="submit"
              className="w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 flex items-center justify-center"
            >
              <LogIn className="mr-2" size={18} />
              Login
            </button>
          </form>
        )}
        <div className="mt-4 text-center">
          <button onClick={handleForgotPassword} className="text-blue-500 hover:text-blue-600">
            Forgot Password?
          </button>
        </div>
      </div>
    </div>
  );
};

export default Auth;

================
File: src/components/Contacts.tsx
================
import React from 'react'
import { Tabs, TabsContent, TabsList, TabsTrigger } from "./ui/tabs"
import { Button } from "./ui/button"
import { Users, Truck, Building2, Store, UserCircle, User } from 'lucide-react'
import ContactsList from './contacts/ContactsList'
import Suppliers from './contacts/Suppliers'
import Distributors from './contacts/Distributors'
import WholesaleBuyers from './contacts/WholesaleBuyers'
import Employees from './contacts/Employees'
import Customers from './contacts/Customers'

const Contacts: React.FC = () => {
  return (
    <div className="custom-card p-6">
      <Tabs defaultValue="contacts" className="w-full">
        <TabsList className="grid w-full grid-cols-6 gap-4">
          <TabsTrigger value="contacts" asChild>
            <Button variant="outline" className="custom-button w-full">
              <Users className="mr-2 h-4 w-4" />
              Contacts
            </Button>
          </TabsTrigger>
          <TabsTrigger value="suppliers" asChild>
            <Button variant="outline" className="custom-button w-full">
              <Truck className="mr-2 h-4 w-4" />
              Suppliers
            </Button>
          </TabsTrigger>
          <TabsTrigger value="distributors" asChild>
            <Button variant="outline" className="custom-button w-full">
              <Building2 className="mr-2 h-4 w-4" />
              Distributors
            </Button>
          </TabsTrigger>
          <TabsTrigger value="wholesaleBuyers" asChild>
            <Button variant="outline" className="custom-button w-full">
              <Store className="mr-2 h-4 w-4" />
              Wholesale Buyers
            </Button>
          </TabsTrigger>
          <TabsTrigger value="employees" asChild>
            <Button variant="outline" className="custom-button w-full">
              <UserCircle className="mr-2 h-4 w-4" />
              Employees
            </Button>
          </TabsTrigger>
          <TabsTrigger value="customers" asChild>
            <Button variant="outline" className="custom-button w-full">
              <User className="mr-2 h-4 w-4" />
              Customers
            </Button>
          </TabsTrigger>
        </TabsList>
        <TabsContent value="contacts">
          <ContactsList />
        </TabsContent>
        <TabsContent value="suppliers">
          <Suppliers />
        </TabsContent>
        <TabsContent value="distributors">
          <Distributors />
        </TabsContent>
        <TabsContent value="wholesaleBuyers">
          <WholesaleBuyers />
        </TabsContent>
        <TabsContent value="employees">
          <Employees />
        </TabsContent>
        <TabsContent value="customers">
          <Customers />
        </TabsContent>
      </Tabs>
    </div>
  )
}

export default Contacts

================
File: src/components/contacts/ContactsList.tsx
================
import React, { useState, useEffect } from 'react'
import { Plus, Edit, Trash2 } from 'lucide-react'
import { collection, addDoc, onSnapshot, query, doc, updateDoc, deleteDoc } from 'firebase/firestore'
import { db } from '../../firebase'
import { Button } from "../ui/button"
import { Input } from "../ui/input"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "../ui/table"
import { useToast } from "../hooks/use-toast"

interface Contact {
  id: string;
  name: string;
  email: string;
  phone: string;
}

const ContactsList: React.FC = () => {
  const [contacts, setContacts] = useState<Contact[]>([])
  const [newContact, setNewContact] = useState<Omit<Contact, 'id'>>({ name: '', email: '', phone: '' })
  const [editingContact, setEditingContact] = useState<Contact | null>(null)
  const { toast } = useToast()

  useEffect(() => {
    const q = query(collection(db, 'contacts'))
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const contactsData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        name: doc.data().name,
        email: doc.data().email,
        phone: doc.data().phone
      } as Contact))
      setContacts(contactsData)
    }, (error) => {
      console.error("Error fetching contacts: ", error)
      toast("Failed to fetch contacts. Please try again.")
    })
    return () => unsubscribe()
  }, [toast])

  const handleAddContact = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!newContact.name || !newContact.email) {
      toast("Name and email are required.")
      return
    }
    try {
      await addDoc(collection(db, 'contacts'), newContact)
      setNewContact({ name: '', email: '', phone: '' })
      toast("Contact added successfully.")
    } catch (error) {
      console.error("Error adding contact: ", error)
      toast("Failed to add contact. Please try again.")
    }
  }

  const handleEditContact = async (contact: Contact) => {
    setEditingContact(contact)
    setNewContact({ name: contact.name, email: contact.email, phone: contact.phone })
  }

  const handleUpdateContact = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!editingContact || !newContact.name || !newContact.email) {
      toast("Name and email are required.")
      return
    }
    try {
      const contactRef = doc(db, 'contacts', editingContact.id)
      await updateDoc(contactRef, newContact)
      setEditingContact(null)
      setNewContact({ name: '', email: '', phone: '' })
      toast("Contact updated successfully.")
    } catch (error) {
      console.error("Error updating contact: ", error)
      toast("Failed to update contact. Please try again.")
    }
  }

  const handleDeleteContact = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'contacts', id))
      toast("Contact deleted successfully.")
    } catch (error) {
      console.error("Error deleting contact: ", error)
      toast("Failed to delete contact. Please try again.")
    }
  }

  return (
    <div className="custom-card w-full p-6">
      <h2 className="custom-card-title text-2xl font-bold mb-6">Contact Management</h2>
      <form onSubmit={editingContact ? handleUpdateContact : handleAddContact} className="mb-6">
        <div className="grid grid-cols-3 gap-4">
          <Input
            type="text"
            placeholder="Name"
            value={newContact.name}
            onChange={(e) => setNewContact({ ...newContact, name: e.target.value })}
            className="border-gray-300 focus:ring-blue-500 focus:border-blue-500"
          />
          <Input
            type="email"
            placeholder="Email"
            value={newContact.email}
            onChange={(e) => setNewContact({ ...newContact, email: e.target.value })}
            className="border-gray-300 focus:ring-blue-500 focus:border-blue-500"
          />
          <Input
            type="tel"
            placeholder="Phone"
            value={newContact.phone}
            onChange={(e) => setNewContact({ ...newContact, phone: e.target.value })}
            className="border-gray-300 focus:ring-blue-500 focus:border-blue-500"
          />
        </div>
        <Button type="submit" className="custom-button mt-4">
          {editingContact ? (
            <>
              <Edit className="mr-2 h-4 w-4" /> Update Contact
            </>
          ) : (
            <>
              <Plus className="mr-2 h-4 w-4" /> Add Contact
            </>
          )}
        </Button>
      </form>
      <div className="overflow-x-auto">
        <Table className="custom-table">
          <TableHeader>
            <TableRow>
              <TableHead className="font-semibold text-gray-700">Name</TableHead>
              <TableHead className="font-semibold text-gray-700">Email</TableHead>
              <TableHead className="font-semibold text-gray-700">Phone</TableHead>
              <TableHead className="font-semibold text-gray-700">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {contacts.map((contact) => (
              <TableRow key={contact.id} className="hover:bg-gray-50 transition-colors duration-200">
                <TableCell>{contact.name}</TableCell>
                <TableCell>{contact.email}</TableCell>
                <TableCell>{contact.phone}</TableCell>
                <TableCell>
                  <Button variant="outline" size="sm" onClick={() => handleEditContact(contact)} className="mr-2 text-blue-600 hover:text-blue-800 hover:bg-blue-100">
                    <Edit className="h-4 w-4" />
                  </Button>
                  <Button variant="outline" size="sm" onClick={() => handleDeleteContact(contact.id)} className="text-red-600 hover:text-red-800 hover:bg-red-100">
                    <Trash2 className="h-4 w-4" />
                  </Button>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
    </div>
  )
}

export default ContactsList

================
File: src/components/contacts/Customers.tsx
================
import React, { useState, useEffect } from 'react'
import { Plus, Edit, Trash2 } from 'lucide-react'
import { collection, addDoc, onSnapshot, query, doc, updateDoc, deleteDoc } from 'firebase/firestore'
import { db } from '../../firebase'
import { Button } from "../../components/ui/button"
import { Input } from "../../components/ui/input"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "../../components/ui/table"
import { useToast } from "../hooks/use-toast"

interface Customer {
    id: string;
    name: string;
    email: string;
    phone: string;
    company: string;
    loyaltyPoints: number;
    status: string;
  }
  
  const Customers: React.FC = () => {
    const [customers, setCustomers] = useState<Customer[]>([])
    const [newCustomer, setNewCustomer] = useState<Omit<Customer, 'id'>>({ name: '', email: '', phone: '', company: '', loyaltyPoints: 0, status: 'New' })
    const [editingCustomer, setEditingCustomer] = useState<Customer | null>(null)
    const { toast } = useToast()
  
    useEffect(() => {
      const q = query(collection(db, 'customers'))
      const unsubscribe = onSnapshot(q, (querySnapshot) => {
        const customersData = querySnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        } as Customer))
        setCustomers(customersData)
      }, (error) => {
        console.error("Error fetching customers: ", error)
        toast("Failed to fetch customers. Please try again.")
      })
      return () => unsubscribe()
    }, [toast])
  
    const handleAddCustomer = async (e: React.FormEvent) => {
      e.preventDefault()
      if (!newCustomer.name || !newCustomer.email) {
        toast("Name and email are required.")
        return
      }
      try {
        await addDoc(collection(db, 'customers'), newCustomer)
        setNewCustomer({ name: '', email: '', phone: '', company: '', loyaltyPoints: 0, status: 'New' })
        toast("Customer added successfully.")
      } catch (error) {
        console.error("Error adding customer: ", error)
        toast("Failed to add customer. Please try again.")
      }
    }
  
    const handleEditCustomer = (customer: Customer) => {
      setEditingCustomer(customer)
      setNewCustomer({ name: customer.name, email: customer.email, phone: customer.phone, company: customer.company, loyaltyPoints: customer.loyaltyPoints, status: customer.status })
    }
  
    const handleUpdateCustomer = async (e: React.FormEvent) => {
      e.preventDefault()
      if (!editingCustomer || !newCustomer.name || !newCustomer.email) {
        toast("Name and email are required.")
        return
      }
      try {
        const customerRef = doc(db, 'customers', editingCustomer.id)
        await updateDoc(customerRef, newCustomer)
        setEditingCustomer(null)
        setNewCustomer({ name: '', email: '', phone: '', company: '', loyaltyPoints: 0, status: 'New' })
        toast("Customer updated successfully.")
      } catch (error) {
        console.error("Error updating customer: ", error)
        toast("Failed to update customer. Please try again.")
      }
    }
  
    const handleDeleteCustomer = async (id: string) => {
      try {
        await deleteDoc(doc(db, 'customers', id))
        toast("Customer deleted successfully.")
      } catch (error) {
        console.error("Error deleting customer: ", error)
        toast("Failed to delete customer. Please try again.")
      }
    }
  
    
    return (
      <div className="custom-card w-full p-6">
        <h2 className="custom-card-title text-2xl font-bold mb-6">Customer Management</h2>
        <form onSubmit={editingCustomer ? handleUpdateCustomer : handleAddCustomer} className="mb-6">
          <div className="grid grid-cols-2 gap-4">
            <Input
              type="text"
              placeholder="Name"
              value={newCustomer.name}
              onChange={(e) => setNewCustomer({ ...newCustomer, name: e.target.value })}
              className="border-gray-300 focus:ring-blue-500 focus:border-blue-500"
            />
            <Input
              type="email"
              placeholder="Email"
              value={newCustomer.email}
              onChange={(e) => setNewCustomer({ ...newCustomer, email: e.target.value })}
              className="border-gray-300 focus:ring-blue-500 focus:border-blue-500"
            />
            <Input
              type="tel"
              placeholder="Phone"
              value={newCustomer.phone}
              onChange={(e) => setNewCustomer({ ...newCustomer, phone: e.target.value })}
              className="border-gray-300 focus:ring-blue-500 focus:border-blue-500"
            />
            <Input
              type="text"
              placeholder="Company"
              value={newCustomer.company}
              onChange={(e) => setNewCustomer({ ...newCustomer, company: e.target.value })}
              className="border-gray-300 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          <div className="flex justify-between mt-4">
            <Button type="submit" className="custom-button">
              {editingCustomer ? (
                <>
                  <Edit className="mr-2 h-4 w-4" /> Update Customer
                </>
              ) : (
                <>
                  <Plus className="mr-2 h-4 w-4" /> Add Customer
                </>
              )}
            </Button>
            
          </div>
        </form>
        <div className="overflow-x-auto">
          <Table className="custom-table">
            <TableHeader>
              <TableRow>
                <TableHead className="font-semibold text-gray-700">Name</TableHead>
                <TableHead className="font-semibold text-gray-700">Email</TableHead>
                <TableHead className="font-semibold text-gray-700">Phone</TableHead>
                <TableHead className="font-semibold text-gray-700">Company</TableHead>
                <TableHead className="font-semibold text-gray-700">Status</TableHead>
                <TableHead className="font-semibold text-gray-700">Loyalty Points</TableHead>
                <TableHead className="font-semibold text-gray-700">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {customers.map((customer) => (
                <TableRow key={customer.id} className="hover:bg-gray-50 transition-colors duration-200">
                  <TableCell>{customer.name}</TableCell>
                  <TableCell>{customer.email}</TableCell>
                  <TableCell>{customer.phone}</TableCell>
                  <TableCell>{customer.company}</TableCell>
                  <TableCell>
                    <span className={`px-2 py-1 rounded-full text-xs font-semibold ${
                      customer.status === 'New' ? 'bg-green-200 text-green-800' :
                      customer.status === 'Returning' ? 'bg-blue-200 text-blue-800' :
                      'bg-gray-200 text-gray-800'
                    }`}>
                      {customer.status}
                    </span>
                  </TableCell>
                  <TableCell>{customer.loyaltyPoints}</TableCell>
                  <TableCell>
                    <Button variant="outline" size="sm" onClick={() => handleEditCustomer(customer)} className="mr-2 text-blue-600 hover:text-blue-800 hover:bg-blue-100">
                      <Edit className="h-4 w-4" />
                    </Button>
                    <Button variant="outline" size="sm" onClick={() => handleDeleteCustomer(customer.id)} className="text-red-600 hover:text-red-800 hover:bg-red-100">
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      </div>
    )
  }
  
  export default Customers

================
File: src/components/contacts/Distributors.tsx
================
import React, { useState, useEffect } from 'react'
import { Plus, Edit, Trash2 } from 'lucide-react'
import { collection, addDoc, onSnapshot, query, doc, updateDoc, deleteDoc } from 'firebase/firestore'
import { db } from '../../firebase'
import { Button } from "../../components/ui/button"
import { Input } from "../../components/ui/input"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "../../components/ui/table"
import { useToast } from "../hooks/use-toast"

interface Distributor {
    id: string;
    name: string;
    email: string;
    phone: string;
    region: string;
  }
  
  const Distributors: React.FC = () => {
    const [distributors, setDistributors] = useState<Distributor[]>([])
    const [newDistributor, setNewDistributor] = useState<Omit<Distributor, 'id'>>({ name: '', email: '', phone: '', region: '' })
    const [editingDistributor, setEditingDistributor] = useState<Distributor | null>(null)
    const { toast } = useToast()
  
    useEffect(() => {
      const q = query(collection(db, 'distributors'))
      const unsubscribe = onSnapshot(q, (querySnapshot) => {
        const distributorsData = querySnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        } as Distributor))
        setDistributors(distributorsData)
      }, (error) => {
        console.error("Error fetching distributors: ", error)
        toast("Failed to fetch distributors. Please try again.")
      })
      return () => unsubscribe()
    }, [toast])
  
    const handleAddDistributor = async (e: React.FormEvent) => {
      e.preventDefault()
      if (!newDistributor.name || !newDistributor.email) {
        toast("Name and email are required.")
        return
      }
      try {
        await addDoc(collection(db, 'distributors'), newDistributor)
        setNewDistributor({ name: '', email: '', phone: '', region: '' })
        toast("Distributor added successfully.")
      } catch (error) {
        console.error("Error adding distributor: ", error)
        toast("Failed to add distributor. Please try again.")
      }
    }
  
    const handleEditDistributor = (distributor: Distributor) => {
      setEditingDistributor(distributor)
      setNewDistributor({ name: distributor.name, email: distributor.email, phone: distributor.phone, region: distributor.region })
    }
  
    const handleUpdateDistributor = async (e: React.FormEvent) => {
      e.preventDefault()
      if (!editingDistributor || !newDistributor.name || !newDistributor.email) {
        toast("Name and email are required.")
        return
      }
      try {
        const distributorRef = doc(db, 'distributors', editingDistributor.id)
        await updateDoc(distributorRef, newDistributor)
        setEditingDistributor(null)
        setNewDistributor({ name: '', email: '', phone: '', region: '' })
        toast("Distributor updated successfully.")
      } catch (error) {
        console.error("Error updating distributor: ", error)
        toast("Failed to update distributor. Please try again.")
      }
    }
  
    const handleDeleteDistributor = async (id: string) => {
      try {
        await deleteDoc(doc(db, 'distributors', id))
        toast("Distributor deleted successfully.")
      } catch (error) {
        console.error("Error deleting distributor: ", error)
        toast("Failed to delete distributor. Please try again.")
      }
    }
  
    return (
      <div className="custom-card w-full p-6">
        <h2 className="custom-card-title text-2xl font-bold mb-6">Distributor Management</h2>
        <form onSubmit={editingDistributor ? handleUpdateDistributor : handleAddDistributor} className="mb-6">
          <div className="grid grid-cols-2 gap-4">
            <Input
              type="text"
              placeholder="Name"
              value={newDistributor.name}
              onChange={(e) => setNewDistributor({ ...newDistributor, name: e.target.value })}
              className="border-gray-300 focus:ring-blue-500 focus:border-blue-500"
            />
            <Input
              type="email"
              placeholder="Email"
              value={newDistributor.email}
              onChange={(e) => setNewDistributor({ ...newDistributor, email: e.target.value })}
              className="border-gray-300 focus:ring-blue-500 focus:border-blue-500"
            />
            <Input
              type="tel"
              placeholder="Phone"
              value={newDistributor.phone}
              onChange={(e) => setNewDistributor({ ...newDistributor, phone: e.target.value })}
              className="border-gray-300 focus:ring-blue-500 focus:border-blue-500"
            />
            <Input
              type="text"
              placeholder="Region"
              value={newDistributor.region}
              onChange={(e) => setNewDistributor({ ...newDistributor, region: e.target.value })}
              className="border-gray-300 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          <Button type="submit" className="custom-button mt-4">
            {editingDistributor ? (
              <>
                <Edit className="mr-2 h-4 w-4" /> Update Distributor
              </>
            ) : (
              <>
                <Plus className="mr-2 h-4 w-4" /> Add Distributor
              </>
            )}
          </Button>
        </form>
        <div className="overflow-x-auto">
          <Table className="custom-table">
            <TableHeader>
              <TableRow>
                <TableHead className="font-semibold text-gray-700">Name</TableHead>
                <TableHead className="font-semibold text-gray-700">Email</TableHead>
                <TableHead className="font-semibold text-gray-700">Phone</TableHead>
                <TableHead className="font-semibold text-gray-700">Region</TableHead>
                <TableHead className="font-semibold text-gray-700">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {distributors.map((distributor) => (
                <TableRow key={distributor.id} className="hover:bg-gray-50 transition-colors duration-200">
                  <TableCell>{distributor.name}</TableCell>
                  <TableCell>{distributor.email}</TableCell>
                  <TableCell>{distributor.phone}</TableCell>
                  <TableCell>{distributor.region}</TableCell>
                  <TableCell>
                    <Button variant="outline" size="sm" onClick={() => handleEditDistributor(distributor)} className="mr-2 text-blue-600 hover:text-blue-800 hover:bg-blue-100">
                      <Edit className="h-4 w-4" />
                    </Button>
                    <Button variant="outline" size="sm" onClick={() => handleDeleteDistributor(distributor.id)} className="text-red-600 hover:text-red-800 hover:bg-red-100">
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      </div>
    )
  }
  
  export default Distributors

================
File: src/components/contacts/Employees.tsx
================
import React, { useState, useEffect } from 'react'
import { Plus, Edit, Trash2 } from 'lucide-react'
import { collection, addDoc, onSnapshot, query, doc, updateDoc, deleteDoc } from 'firebase/firestore'
import { db } from '../../firebase'
import { Button } from "../ui/button"
import { Input } from "../ui/input"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "../ui/table"
import { useToast } from "../hooks/use-toast"

interface Employee {
    id: string;
    name: string;
    email: string;
    phone: string;
    position: string;
  }
  
  const Employees: React.FC = () => {
    const [employees, setEmployees] = useState<Employee[]>([])
    const [newEmployee, setNewEmployee] = useState<Omit<Employee, 'id'>>({ name: '', email: '', phone: '', position: '' })
    const [editingEmployee, setEditingEmployee] = useState<Employee | null>(null)
    const { toast } = useToast()
  
    useEffect(() => {
      const q = query(collection(db, 'employees'))
      const unsubscribe = onSnapshot(q, (querySnapshot) => {
        const employeesData = querySnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        } as Employee))
        setEmployees(employeesData)
      }, (error) => {
        console.error("Error fetching employees: ", error)
        toast("Failed to fetch employees. Please try again.")
      })
      return () => unsubscribe()
    }, [toast])
  
    const handleAddEmployee = async (e: React.FormEvent) => {
      e.preventDefault()
      if (!newEmployee.name || !newEmployee.email) {
        toast("Name and email are required.")
        return
      }
      try {
        await addDoc(collection(db, 'employees'), newEmployee)
        setNewEmployee({ name: '', email: '', phone: '', position: '' })
        toast("Employee added successfully.")
      } catch (error) {
        console.error("Error adding employee: ", error)
        toast("Failed to add employee. Please try again.")
      }
    }
  
    const handleEditEmployee = (employee: Employee) => {
      setEditingEmployee(employee)
      setNewEmployee({ name: employee.name, email: employee.email, phone: employee.phone, position: employee.position })
    }
  
    const handleUpdateEmployee = async (e: React.FormEvent) => {
      e.preventDefault()
      if (!editingEmployee || !newEmployee.name || !newEmployee.email) {
        toast("Name and email are required.")
        return
      }
      try {
        const employeeRef = doc(db, 'employees', editingEmployee.id)
        await updateDoc(employeeRef, newEmployee)
        setEditingEmployee(null)
        setNewEmployee({ name: '', email: '', phone: '', position: '' })
        toast("Employee updated successfully.")
      } catch (error) {
        console.error("Error updating employee: ", error)
        toast("Failed to update employee. Please try again.")
      }
    }
  
    const handleDeleteEmployee = async (id: string) => {
      try {
        await deleteDoc(doc(db, 'employees', id))
        toast("Employee deleted successfully.")
      } catch (error) {
        console.error("Error deleting employee: ", error)
        toast("Failed to delete employee. Please try again.")
      }
    }
  
    return (
      <div className="custom-card w-full p-6">
        <h2 className="custom-card-title text-2xl font-bold mb-6">Employee Management</h2>
        <form onSubmit={editingEmployee ? handleUpdateEmployee : handleAddEmployee} className="mb-6">
          <div className="grid grid-cols-2 gap-4">
            <Input
              type="text"
              placeholder="Name"
              value={newEmployee.name}
              onChange={(e) => setNewEmployee({ ...newEmployee, name: e.target.value })}
              className="border-gray-300 focus:ring-blue-500 focus:border-blue-500"
            />
            <Input
              type="email"
              placeholder="Email"
              value={newEmployee.email}
              onChange={(e) => setNewEmployee({ ...newEmployee, email: e.target.value })}
              className="border-gray-300 focus:ring-blue-500 focus:border-blue-500"
            />
            <Input
              type="tel"
              placeholder="Phone"
              value={newEmployee.phone}
              onChange={(e) => setNewEmployee({ ...newEmployee, phone: e.target.value })}
              className="border-gray-300 focus:ring-blue-500 focus:border-blue-500"
            />
            <Input
              type="text"
              placeholder="Position"
              value={newEmployee.position}
              onChange={(e) => setNewEmployee({ ...newEmployee, position: e.target.value })}
              className="border-gray-300 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          <Button type="submit" className="custom-button mt-4">
            {editingEmployee ? (
              <>
                <Edit className="mr-2 h-4 w-4" /> Update Employee
              </>
            ) : (
              <>
                <Plus className="mr-2 h-4 w-4" /> Add Employee
              </>
            )}
          </Button>
        </form>
        <div className="overflow-x-auto">
          <Table className="custom-table">
            <TableHeader>
              <TableRow>
                <TableHead className="font-semibold text-gray-700">Name</TableHead>
                <TableHead className="font-semibold text-gray-700">Email</TableHead>
                <TableHead className="font-semibold text-gray-700">Phone</TableHead>
                <TableHead className="font-semibold text-gray-700">Position</TableHead>
                <TableHead className="font-semibold text-gray-700">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {employees.map((employee) => (
                <TableRow key={employee.id} className="hover:bg-gray-50 transition-colors duration-200">
                  <TableCell>{employee.name}</TableCell>
                  <TableCell>{employee.email}</TableCell>
                  <TableCell>{employee.phone}</TableCell>
                  <TableCell>{employee.position}</TableCell>
                  <TableCell>
                    <Button variant="outline" size="sm" onClick={() => handleEditEmployee(employee)} className="mr-2 text-blue-600 hover:text-blue-800 hover:bg-blue-100">
                      <Edit className="h-4 w-4" />
                    </Button>
                    <Button variant="outline" size="sm" onClick={() => handleDeleteEmployee(employee.id)} className="text-red-600 hover:text-red-800 hover:bg-red-100">
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      </div>
    )
  }
  
  export default Employees

================
File: src/components/contacts/Suppliers.tsx
================
import React, { useState, useEffect } from 'react'
import { Plus, Edit, Trash2 } from 'lucide-react'
import { collection, addDoc, onSnapshot, query, doc, updateDoc, deleteDoc } from 'firebase/firestore'
import { db } from '../../firebase'
import { Button } from "../ui/button"
import { Input } from "../ui/input"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "../ui/table"
import { useToast } from "../hooks/use-toast"


interface Supplier {
    id: string;
    name: string;
    email: string;
    phone: string;
    product: string;
  }
  
  const Suppliers: React.FC = () => {
    const [suppliers, setSuppliers] = useState<Supplier[]>([])
    const [newSupplier, setNewSupplier] = useState<Omit<Supplier, 'id'>>({ name: '', email: '', phone: '', product: '' })
    const [editingSupplier, setEditingSupplier] = useState<Supplier | null>(null)
    const { toast } = useToast()
  
    useEffect(() => {
      const q = query(collection(db, 'suppliers'))
      const unsubscribe = onSnapshot(q, (querySnapshot) => {
        const suppliersData = querySnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        } as Supplier))
        setSuppliers(suppliersData)
      }, (error) => {
        console.error("Error fetching suppliers: ", error)
        toast("Failed to fetch suppliers. Please try again.")
      })
      return () => unsubscribe()
    }, [toast])
  
    const handleAddSupplier = async (e: React.FormEvent) => {
      e.preventDefault()
      if (!newSupplier.name || !newSupplier.email) {
        toast("Name and email are required.")
        return
      }
      try {
        await addDoc(collection(db, 'suppliers'), newSupplier)
        setNewSupplier({ name: '', email: '', phone: '', product: '' })
        toast("Supplier added successfully.")
      } catch (error) {
        console.error("Error adding supplier: ", error)
        toast("Failed to add supplier. Please try again.")
      }
    }
  
    const handleEditSupplier = (supplier: Supplier) => {
      setEditingSupplier(supplier)
      setNewSupplier({ name: supplier.name, email: supplier.email, phone: supplier.phone, product: supplier.product })
    }
  
    const handleUpdateSupplier = async (e: React.FormEvent) => {
      e.preventDefault()
      if (!editingSupplier || !newSupplier.name || !newSupplier.email) {
        toast("Name and email are required.")
        return
      }
      try {
        const supplierRef = doc(db, 'suppliers', editingSupplier.id)
        await updateDoc(supplierRef, newSupplier)
        setEditingSupplier(null)
        setNewSupplier({ name: '', email: '', phone: '', product: '' })
        toast("Supplier updated successfully.")
      } catch (error) {
        console.error("Error updating supplier: ", error)
        toast("Failed to update supplier. Please try again.")
      }
    }
  
    const handleDeleteSupplier = async (id: string) => {
      try {
        await deleteDoc(doc(db, 'suppliers', id))
        toast("Supplier deleted successfully.")
      } catch (error) {
        console.error("Error deleting supplier: ", error)
        toast("Failed to delete supplier. Please try again.")
      }
    }
  
    return (
      <div className="custom-card w-full p-6">
        <h2 className="custom-card-title text-2xl font-bold mb-6">Supplier Management</h2>
        <form onSubmit={editingSupplier ? handleUpdateSupplier : handleAddSupplier} className="mb-6">
          <div className="grid grid-cols-2 gap-4">
            <Input
              type="text"
              placeholder="Name"
              value={newSupplier.name}
              onChange={(e) => setNewSupplier({ ...newSupplier, name: e.target.value })}
              className="border-gray-300 focus:ring-blue-500 focus:border-blue-500"
            />
            <Input
              type="email"
              placeholder="Email"
              value={newSupplier.email}
              onChange={(e) => setNewSupplier({ ...newSupplier, email: e.target.value })}
              className="border-gray-300 focus:ring-blue-500 focus:border-blue-500"
            />
            <Input
              type="tel"
              placeholder="Phone"
              value={newSupplier.phone}
              onChange={(e) => setNewSupplier({ ...newSupplier, phone: e.target.value })}
              className="border-gray-300 focus:ring-blue-500 focus:border-blue-500"
            />
            <Input
              type="text"
              placeholder="Product"
              value={newSupplier.product}
              onChange={(e) => setNewSupplier({ ...newSupplier, product: e.target.value })}
              className="border-gray-300 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          <Button type="submit" className="custom-button mt-4">
            {editingSupplier ? (
              <>
                <Edit className="mr-2 h-4 w-4" /> Update Supplier
              </>
            ) : (
              <>
                <Plus className="mr-2 h-4 w-4" /> Add Supplier
              </>
            )}
          </Button>
        </form>
        <div className="overflow-x-auto">
          <Table className="custom-table">
            <TableHeader>
              <TableRow>
                <TableHead className="font-semibold text-gray-700">Name</TableHead>
                <TableHead className="font-semibold text-gray-700">Email</TableHead>
                <TableHead className="font-semibold text-gray-700">Phone</TableHead>
                <TableHead className="font-semibold text-gray-700">Product</TableHead>
                <TableHead className="font-semibold text-gray-700">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {suppliers.map((supplier) => (
                <TableRow key={supplier.id} className="hover:bg-gray-50 transition-colors duration-200">
                  <TableCell>{supplier.name}</TableCell>
                  <TableCell>{supplier.email}</TableCell>
                  <TableCell>{supplier.phone}</TableCell>
                  <TableCell>{supplier.product}</TableCell>
                  <TableCell>
                    <Button variant="outline" size="sm" onClick={() => handleEditSupplier(supplier)} className="mr-2 text-blue-600 hover:text-blue-800 hover:bg-blue-100">
                      <Edit className="h-4 w-4" />
                    </Button>
                    <Button variant="outline" size="sm" onClick={() => handleDeleteSupplier(supplier.id)} className="text-red-600 hover:text-red-800 hover:bg-red-100">
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      </div>
    )
  }
  
  export default Suppliers

================
File: src/components/contacts/WholesaleBuyers.tsx
================
import React, { useState, useEffect } from 'react'
import { Plus, Edit, Trash2 } from 'lucide-react'
import { collection, addDoc, onSnapshot, query, doc, updateDoc, deleteDoc } from 'firebase/firestore'
import { db } from '../../firebase'
import { Button } from "../ui/button"
import { Input } from "../ui/input"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "../ui/table"
import { useToast } from "../hooks/use-toast"

interface WholesaleBuyer {
    id: string;
    name: string;
    email: string;
    phone: string;
    company: string;
  }
  
  const WholesaleBuyers: React.FC = () => {
    const [wholesaleBuyers, setWholesaleBuyers] = useState<WholesaleBuyer[]>([])
    const [newBuyer, setNewBuyer] = useState<Omit<WholesaleBuyer, 'id'>>({ name: '', email: '', phone: '', company: '' })
    const [editingBuyer, setEditingBuyer] = useState<WholesaleBuyer | null>(null)
    const { toast } = useToast()
  
    useEffect(() => {
      const q = query(collection(db, 'wholesaleBuyers'))
      const unsubscribe = onSnapshot(q, (querySnapshot) => {
        const buyersData = querySnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        } as WholesaleBuyer))
        setWholesaleBuyers(buyersData)
      }, (error) => {
        console.error("Error fetching wholesale buyers: ", error)
        toast("Failed to fetch wholesale buyers. Please try again.")
      })
      return () => unsubscribe()
    }, [toast])
  
    const handleAddBuyer = async (e: React.FormEvent) => {
      e.preventDefault()
      if (!newBuyer.name || !newBuyer.email) {
        toast("Name and email are required.")
        return
      }
      try {
        await addDoc(collection(db, 'wholesaleBuyers'), newBuyer)
        setNewBuyer({ name: '', email: '', phone: '', company: '' })
        toast("Wholesale buyer added successfully.")
      } catch (error) {
        console.error("Error adding wholesale buyer: ", error)
        toast("Failed to add wholesale buyer. Please try again.")
      }
    }
  
    const handleEditBuyer = (buyer: WholesaleBuyer) => {
      setEditingBuyer(buyer)
      setNewBuyer({ name: buyer.name, email: buyer.email, phone: buyer.phone, company: buyer.company })
    }
  
    const handleUpdateBuyer = async (e: React.FormEvent) => {
      e.preventDefault()
      if (!editingBuyer || !newBuyer.name || !newBuyer.email) {
        toast("Name and email are required.")
        return
      }
      try {
        const buyerRef = doc(db, 'wholesaleBuyers', editingBuyer.id)
        await updateDoc(buyerRef, newBuyer)
        setEditingBuyer(null)
        setNewBuyer({ name: '', email: '', phone: '', company: '' })
        toast("Wholesale buyer updated successfully.")
      } catch (error) {
        console.error("Error updating wholesale buyer: ", error)
        toast("Failed to update wholesale buyer. Please try again.")
      }
    }
  
    const handleDeleteBuyer = async (id: string) => {
      try {
        await deleteDoc(doc(db, 'wholesaleBuyers', id))
        toast("Wholesale buyer deleted successfully.")
      } catch (error) {
        console.error("Error deleting wholesale buyer: ", error)
        toast("Failed to delete wholesale buyer. Please try again.")
      }
    }
  
    return (
      <div className="custom-card w-full p-6">
        <h2 className="custom-card-title text-2xl font-bold mb-6">Wholesale Buyer Management</h2>
        <form onSubmit={editingBuyer ? handleUpdateBuyer : handleAddBuyer} className="mb-6">
          <div className="grid grid-cols-2 gap-4">
            <Input
              type="text"
              placeholder="Name"
              value={newBuyer.name}
              onChange={(e) => setNewBuyer({ ...newBuyer, name: e.target.value })}
              className="border-gray-300 focus:ring-blue-500 focus:border-blue-500"
            />
            <Input
              type="email"
              placeholder="Email"
              value={newBuyer.email}
              onChange={(e) => setNewBuyer({ ...newBuyer, email: e.target.value })}
              className="border-gray-300 focus:ring-blue-500 focus:border-blue-500"
            />
            <Input
              type="tel"
              placeholder="Phone"
              value={newBuyer.phone}
              onChange={(e) => setNewBuyer({ ...newBuyer, phone: e.target.value })}
              className="border-gray-300 focus:ring-blue-500 focus:border-blue-500"
            />
            <Input
              type="text"
              placeholder="Company"
              value={newBuyer.company}
              onChange={(e) => setNewBuyer({ ...newBuyer, company: e.target.value })}
              className="border-gray-300 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          <Button type="submit" className="custom-button mt-4">
            {editingBuyer ? (
              <>
                <Edit className="mr-2 h-4 w-4" /> Update Wholesale Buyer
              </>
            ) : (
              <>
                <Plus className="mr-2 h-4 w-4" /> Add Wholesale Buyer
              </>
            )}
          </Button>
        </form>
        <div className="overflow-x-auto">
          <Table className="custom-table">
            <TableHeader>
              <TableRow>
                <TableHead className="font-semibold text-gray-700">Name</TableHead>
                <TableHead className="font-semibold text-gray-700">Email</TableHead>
                <TableHead className="font-semibold text-gray-700">Phone</TableHead>
                <TableHead className="font-semibold text-gray-700">Company</TableHead>
                <TableHead className="font-semibold text-gray-700">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {wholesaleBuyers.map((buyer) => (
                <TableRow key={buyer.id} className="hover:bg-gray-50 transition-colors duration-200">
                  <TableCell>{buyer.name}</TableCell>
                  <TableCell>{buyer.email}</TableCell>
                  <TableCell>{buyer.phone}</TableCell>
                  <TableCell>{buyer.company}</TableCell>
                  <TableCell>
                    <Button variant="outline" size="sm" onClick={() => handleEditBuyer(buyer)} className="mr-2 text-blue-600 hover:text-blue-800 hover:bg-blue-100">
                      <Edit className="h-4 w-4" />
                    </Button>
                    <Button variant="outline" size="sm" onClick={() => handleDeleteBuyer(buyer.id)} className="text-red-600 hover:text-red-800 hover:bg-red-100">
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      </div>
    )
  }
  
  export default WholesaleBuyers

================
File: src/components/Dashboard.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, query, getDocs, doc, getDoc, updateDoc, orderBy, limit } from 'firebase/firestore';
import { db } from '../firebase';
import { useAuth } from '../contexts/AuthContext';
import { DollarSign, Package, ShoppingCart, Users, Settings } from 'lucide-react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell } from 'recharts';
import WidgetGrid from './dashboard/WidgetGrid.tsx';
import ChartWidget from './dashboard/ChartWidget';
import { WidgetData, AvailableWidget, SalesData, ProductData, InventoryData } from './dashboard/types';
import { loadWidgetData, fetchSalesData, fetchTopProducts, fetchInventoryData } from './dashboard/dataFetchers';

const Dashboard: React.FC = () => {
  const { user } = useAuth();
  const [widgets, setWidgets] = useState<WidgetData[]>([]);
  const [isCustomizing, setIsCustomizing] = useState(false);
  const [selectedWidgets, setSelectedWidgets] = useState<string[]>([]);
  const [salesData, setSalesData] = useState<SalesData[]>([]);
  const [topProducts, setTopProducts] = useState<ProductData[]>([]);
  const [inventoryData, setInventoryData] = useState<InventoryData[]>([]);
  const [error, setError] = useState<string | null>(null);

  const availableWidgets: AvailableWidget[] = [
    { id: 'totalSales', title: 'Total Sales', description: 'Shows the total sales amount' },
    { id: 'inventoryCount', title: 'Inventory Count', description: 'Displays the total number of inventory items' },
    { id: 'topProducts', title: 'Top Products', description: 'Lists the top-selling products' },
    { id: 'recentOrders', title: 'Recent Orders', description: 'Shows the most recent orders' },
    { id: 'customerCount', title: 'Customer Count', description: 'Displays the total number of customers' },
    { id: 'salesTrend', title: 'Sales Trend', description: 'Shows the sales trend over time' },
    { id: 'inventoryDistribution', title: 'Inventory Distribution', description: 'Displays the distribution of inventory across categories' },
  ];

  useEffect(() => {
    const fetchDashboardData = async () => {
      if (user) {
        try {
          const storedWidgets = localStorage.getItem(`selectedWidgets_${user.uid}`);
          const initialSelectedWidgets = storedWidgets ? JSON.parse(storedWidgets) : [];
          setSelectedWidgets(initialSelectedWidgets);

          const widgetData = await loadWidgetData(initialSelectedWidgets);
          setWidgets(widgetData);

          const sales = await fetchSalesData();
          setSalesData(sales);

          const products = await fetchTopProducts();
          setTopProducts(products);

          const inventory = await fetchInventoryData();
          setInventoryData(inventory);
        } catch (err) {
          console.error("Error fetching dashboard data:", err);
          setError("Failed to load dashboard data. Please try again later.");
        }
      }
    };

    fetchDashboardData();
  }, [user]);

  const handleWidgetToggle = (widgetId: string) => {
    setSelectedWidgets(prev => {
      const updatedWidgets = prev.includes(widgetId)
        ? prev.filter(id => id !== widgetId)
        : [...prev, widgetId];
      
      if (user) {
        localStorage.setItem(`selectedWidgets_${user.uid}`, JSON.stringify(updatedWidgets));
      }
      
      return updatedWidgets;
    });
  };

  const handleSaveCustomization = async () => {
    if (user) {
      try {
        await updateDoc(doc(db, 'users', user.uid), {
          selectedWidgets: selectedWidgets,
        });
        setIsCustomizing(false);
        const widgetData = await loadWidgetData(selectedWidgets);
        setWidgets(widgetData);
      } catch (error) {
        console.error("Error saving widget customization: ", error);
        setError("Failed to save customization. Please try again.");
      }
    }
  };

  const COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6'];

  if (error) {
    return <div className="text-red-500 p-4 bg-red-100 border border-red-400 rounded">{error}</div>;
  }

  return (
    <div className="p-6 bg-gray-50">
      <div className="flex justify-between items-center mb-8">
        <h2 className="text-3xl font-bold text-gray-800">Dashboard</h2>
        <button
          onClick={() => setIsCustomizing(!isCustomizing)}
          className="flex items-center bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-all duration-300 ease-in-out transform hover:scale-105 shadow-md"
        >
          <Settings className="mr-2" size={18} />
          {isCustomizing ? 'Save Layout' : 'Customize Dashboard'}
        </button>
      </div>

      {isCustomizing ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-6">
          {availableWidgets.map(widget => (
            <div key={widget.id} className="bg-white p-6 rounded-lg shadow-md hover:shadow-lg transition-all duration-300 ease-in-out">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-xl font-semibold text-gray-700">{widget.title}</h3>
                <input
                  type="checkbox"
                  checked={selectedWidgets.includes(widget.id)}
                  onChange={() => handleWidgetToggle(widget.id)}
                  className="form-checkbox h-5 w-5 text-blue-600 transition duration-150 ease-in-out"
                />
              </div>
              <p className="text-gray-600">{widget.description}</p>
            </div>
          ))}
        </div>
      ) : (
        <>
          <WidgetGrid widgets={widgets} />

          <ChartWidget
            title="Sales Trend"
            isVisible={selectedWidgets.includes('salesTrend')}
            chart={
              <LineChart data={salesData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="date" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Line type="monotone" dataKey="amount" stroke="#3B82F6" strokeWidth={2} dot={{ r: 4 }} activeDot={{ r: 8 }} />
              </LineChart>
            }
          />

          <ChartWidget
            title="Top Products"
            isVisible={selectedWidgets.includes('topProducts')}
            chart={
              <BarChart data={topProducts}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Bar dataKey="sales" fill="#10B981" />
              </BarChart>
            }
          />

          <ChartWidget
            title="Inventory Distribution"
            isVisible={selectedWidgets.includes('inventoryDistribution')}
            chart={
              <PieChart>
                <Pie
                  data={inventoryData}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="count"
                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                >
                  {inventoryData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip />
                <Legend />
              </PieChart>
            }
          />
        </>
      )}

      {isCustomizing && (
        <button
          onClick={handleSaveCustomization}
          className="mt-6 bg-green-500 text-white px-6 py-2 rounded-lg hover:bg-green-600 transition-all duration-300 ease-in-out transform hover:scale-105 shadow-md"
        >
          Save Changes
        </button>
      )}
    </div>
  );
};

export default Dashboard;

================
File: src/components/dashboard/ChartWidget.tsx
================
import React from 'react';
import { ResponsiveContainer } from 'recharts';

interface ChartWidgetProps {
  title: string;
  isVisible: boolean;
  chart: React.ReactElement; // Change this from ReactNode to ReactElement
}

const ChartWidget: React.FC<ChartWidgetProps> = ({ title, isVisible, chart }) => {
  if (!isVisible) return null;

  return (
    <div className="bg-white p-6 rounded-lg shadow-md mb-8 hover:shadow-lg transition-all duration-300 ease-in-out">
      <h3 className="text-xl font-semibold text-gray-700 mb-4">{title}</h3>
      <ResponsiveContainer width="100%" height={300}>
        {chart}
      </ResponsiveContainer>
    </div>
  );
};

export default ChartWidget;

================
File: src/components/dashboard/dataFetchers.ts
================
import { collection, query, getDocs, orderBy, limit } from 'firebase/firestore';
import { db } from '../../firebase';
import { DollarSign, Package, ShoppingCart, Users, Eye, TrendingUp } from 'lucide-react';
import { WidgetData, SalesData, ProductData, InventoryData } from './types';

export const loadWidgetData = async (selectedWidgets: string[]): Promise<WidgetData[]> => {
  const widgetData: WidgetData[] = [];

  if (selectedWidgets.includes('totalSales')) {
    const salesQuery = query(collection(db, 'salesOrders'));
    const salesSnapshot = await getDocs(salesQuery);
    const totalSales = salesSnapshot.docs.reduce((sum, doc) => sum + (doc.data().totalAmount || 0), 0);
    widgetData.push({
      id: 'totalSales',
      title: 'Total Sales',
      value: `$${totalSales.toFixed(2)}`,
      icon: DollarSign,
      subTitle: 'Today',
      subValue: `$${(totalSales / 30).toFixed(2)}`,
      accumulated: `$${(totalSales * 12).toFixed(2)}`,
      yearToDate: `$${(totalSales * 365).toFixed(2)}`,
    });
  }

  if (selectedWidgets.includes('inventoryCount')) {
    const inventoryQuery = query(collection(db, 'inventory'));
    const inventorySnapshot = await getDocs(inventoryQuery);
    widgetData.push({
      id: 'inventoryCount',
      title: 'Inventory',
      value: inventorySnapshot.size,
      icon: Package,
      subTitle: 'Total Products',
      subValue: inventorySnapshot.size,
      accumulated: '-',
      yearToDate: '-',
    });
  }

  if (selectedWidgets.includes('recentOrders')) {
    const ordersQuery = query(collection(db, 'salesOrders'), orderBy('orderDate', 'desc'), limit(30));
    const ordersSnapshot = await getDocs(ordersQuery);
    widgetData.push({
      id: 'recentOrders',
      title: 'Orders',
      value: ordersSnapshot.size.toString(),
      icon: ShoppingCart,
      subTitle: 'Today',
      subValue: (ordersSnapshot.size / 30).toFixed(0),
      accumulated: (ordersSnapshot.size * 12).toString(),
      yearToDate: (ordersSnapshot.size * 365).toString(),
    });
  }

  if (selectedWidgets.includes('customerCount')) {
    const customersQuery = query(collection(db, 'customers'));
    const customersSnapshot = await getDocs(customersQuery);
    widgetData.push({
      id: 'customerCount',
      title: 'Customers',
      value: customersSnapshot.size,
      icon: Users,
      subTitle: 'Total Customers',
      subValue: customersSnapshot.size,
      accumulated: '-',
      yearToDate: '-',
    });
  }




  return widgetData;
};

export const fetchSalesData = async (): Promise<SalesData[]> => {
  const salesQuery = query(
    collection(db, 'salesOrders'),
    orderBy('orderDate', 'desc'),
    limit(30)
  );
  const salesSnapshot = await getDocs(salesQuery);
  const salesData = salesSnapshot.docs.map(doc => ({
    date: doc.data().orderDate.toDate().toLocaleDateString(),
    amount: doc.data().totalAmount || 0,
  }));
  return salesData.reverse();
};

export const fetchTopProducts = async (): Promise<ProductData[]> => {
  const productsQuery = query(collection(db, 'inventory'), orderBy('quantity', 'desc'), limit(5));
  const productsSnapshot = await getDocs(productsQuery);
  return productsSnapshot.docs.map(doc => ({
    name: doc.data().name,
    sales: doc.data().quantity,
  }));
};

export const fetchInventoryData = async (): Promise<InventoryData[]> => {
  const inventoryQuery = query(collection(db, 'inventory'));
  const inventorySnapshot = await getDocs(inventoryQuery);
  const inventoryCategories = inventorySnapshot.docs.reduce((acc, doc) => {
    const category = doc.data().category || 'Uncategorized';
    acc[category] = (acc[category] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);
  return Object.entries(inventoryCategories).map(([category, count]) => ({
    category,
    count,
  }));
};

================
File: src/components/dashboard/types.ts
================
import { ReactNode } from 'react';
import { LucideIcon } from 'lucide-react';

export interface WidgetData {
  id: string;
  title: string;
  value: string | number;
  icon: LucideIcon;

}

export interface SalesData {
  date: string;
  amount: number;
}

export interface ProductData {
  name: string;
  sales: number;
}

export interface InventoryData {
  category: string;
  count: number;
}

export interface AvailableWidget {
  id: string;
  title: string;
  description: string;
}

================
File: src/components/dashboard/WidgetGrid.tsx
================
import React from 'react';
import { WidgetData } from './types';
import { LucideIcon } from 'lucide-react';

interface WidgetGridProps {
  widgets: WidgetData[];
}

const WidgetGrid: React.FC<WidgetGridProps> = ({ widgets }) => {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
      {widgets.map(widget => (
        <div key={widget.id} className="bg-white p-6 rounded-lg shadow-md hover:shadow-lg transition-all duration-300 ease-in-out transform hover:scale-105">
          <div className="flex items-center justify-between mb-4">
            <div className="p-3 rounded-full bg-blue-100 text-blue-500">
              {React.createElement(widget.icon as LucideIcon)}
            </div>
            <h3 className="text-lg font-semibold text-gray-700">{widget.title}</h3>
          </div>
          <p className="text-3xl font-bold text-gray-800">{widget.value}</p>
        </div>
      ))}
    </div>
  );
};

export default WidgetGrid;

================
File: src/components/FeatureManagement.tsx
================
import React, { useState, useEffect } from 'react';
import { doc, getDoc, updateDoc } from 'firebase/firestore';
import { db } from '../firebase';
import { useAuth } from '../contexts/AuthContext';
import { useTenant } from '../contexts/TenantContext';
import { 
  MessageSquare, Calendar, Clock, CheckSquare, BookOpen, Users,
  Briefcase, BarChart2, PieChart, ShoppingCart, Percent, CheckCircle,
  Clock as ClockIcon, Trello, FileText, ShoppingBag, Box, Factory,
  Truck, Barcode, Edit3, UserPlus, DollarSign, Grid
} from 'lucide-react';

interface Feature {
  id: string;
  name: string;
  icon: React.ReactNode;
}

const features: Feature[] = [
  { id: 'discuss', name: 'Discuss', icon: <MessageSquare /> },
  { id: 'calendar', name: 'Calendar', icon: <Calendar /> },
  { id: 'appointments', name: 'Appointments', icon: <Clock /> },
  { id: 'todo', name: 'To-do', icon: <CheckSquare /> },
  { id: 'knowledge', name: 'Knowledge', icon: <BookOpen /> },
  { id: 'contacts', name: 'Contacts', icon: <Users /> },
  { id: 'crm', name: 'CRM', icon: <Briefcase /> },
  { id: 'sales', name: 'Sales', icon: <BarChart2 /> },
  { id: 'dashboards', name: 'Dashboards', icon: <PieChart /> },
  { id: 'pos', name: 'Point of Sale', icon: <ShoppingCart /> },
  { id: 'accounting', name: 'Accounting', icon: <Percent /> },
  { id: 'project', name: 'Project', icon: <CheckCircle /> },
  { id: 'timesheets', name: 'Timesheets', icon: <ClockIcon /> },
  { id: 'planning', name: 'Planning', icon: <Trello /> },
  { id: 'surveys', name: 'Surveys', icon: <FileText /> },
  { id: 'purchase', name: 'Purchase', icon: <ShoppingBag /> },
  { id: 'inventory', name: 'Inventory', icon: <Box /> },
  { id: 'manufacturing', name: 'Manufacturing', icon: <Factory /> },
  { id: 'shopfloor', name: 'Shop Floor', icon: <Truck /> },
  { id: 'barcode', name: 'Barcode', icon: <Barcode /> },
  { id: 'sign', name: 'Sign', icon: <Edit3 /> },
  { id: 'employees', name: 'Employees', icon: <UserPlus /> },
  { id: 'expenses', name: 'Expenses', icon: <DollarSign /> },
  { id: 'apps', name: 'Apps', icon: <Grid /> },
];

const FeatureManagement: React.FC = () => {
  const [selectedFeatures, setSelectedFeatures] = useState<string[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const { user } = useAuth();
  const { setSubscriptionPlan } = useTenant();

  useEffect(() => {
    const fetchUserFeatures = async () => {
      if (user) {
        try {
          const userDoc = await getDoc(doc(db, 'users', user.uid));
          if (userDoc.exists()) {
            setSelectedFeatures(userDoc.data().selectedFeatures || []);
          }
        } catch (error) {
          setError('Failed to fetch user features');
        } finally {
          setLoading(false);
        }
      }
    };

    fetchUserFeatures();
  }, [user]);

  const toggleFeature = (featureId: string) => {
    setSelectedFeatures(prev => 
      prev.includes(featureId)
        ? prev.filter(id => id !== featureId)
        : [...prev, featureId]
    );
  };

  const handleSaveFeatures = async () => {
    if (user) {
      try {
        await updateDoc(doc(db, 'users', user.uid), {
          selectedFeatures,
        });
        // Update subscription plan based on the number of selected features
        const newPlan = selectedFeatures.length <= 5 ? 'basic' : selectedFeatures.length <= 15 ? 'professional' : 'enterprise';
        await updateDoc(doc(db, 'users', user.uid), { subscriptionPlan: newPlan });
        setSubscriptionPlan(newPlan);
        setError('Features updated successfully');
      } catch (error) {
        setError('Failed to update features');
      }
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <div className="max-w-4xl mx-auto">
      <h2 className="text-2xl font-bold mb-4">Manage Features</h2>
      <div className="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-6 gap-4 mb-6">
        {features.map((feature) => (
          <div
            key={feature.id}
            className={`flex flex-col items-center justify-center p-4 rounded-lg cursor-pointer transition-colors duration-200 ${
              selectedFeatures.includes(feature.id)
                ? 'bg-blue-100 border-2 border-blue-500'
                : 'bg-gray-50 hover:bg-gray-100'
            }`}
            onClick={() => toggleFeature(feature.id)}
          >
            <div className="text-3xl mb-2">{feature.icon}</div>
            <span className="text-xs text-center">{feature.name}</span>
          </div>
        ))}
      </div>
      <button
        onClick={handleSaveFeatures}
        className="bg-blue-500 text-white px-6 py-2 rounded-full hover:bg-blue-600 transition-colors duration-200"
      >
        Save Changes
      </button>
      {error && <p className="mt-4 text-red-500">{error}</p>}
    </div>
  );
};

export default FeatureManagement;

================
File: src/components/Features.tsx
================
import React from 'react';
import { Link } from 'react-router-dom';
import { 
  Calendar, Users, Briefcase, BarChart2, PieChart, ShoppingCart, Percent, CheckCircle,
  Clock, Trello, FileText, ShoppingBag, Box, Factory, UserPlus, DollarSign
} from 'lucide-react';

interface Feature {
  id: string;
  name: string;
  icon: React.ReactNode;
  path: string;
}

const features: Feature[] = [
  { id: 'calendar', name: 'Calendar', icon: <Calendar />, path: '/calendar' },
  { id: 'contacts', name: 'Contacts', icon: <Users />, path: '/contacts' },
  { id: 'crm', name: 'CRM', icon: <Briefcase />, path: '/crm' },
  { id: 'sales', name: 'Sales', icon: <BarChart2 />, path: '/sales' },
  { id: 'dashboards', name: 'Dashboards', icon: <PieChart />, path: '/dashboard' },
  { id: 'pos', name: 'Point of Sale', icon: <ShoppingCart />, path: '/point-of-sale' },
  { id: 'finance_accounting', name: 'Finance & Accounting', icon: <Percent />, path: '/finance-and-accounting' },
  { id: 'project', name: 'Project', icon: <CheckCircle />, path: '/project' },
  { id: 'timesheets', name: 'Timesheets', icon: <Clock />, path: '/timesheets' },
  { id: 'planning', name: 'Planning', icon: <Trello />, path: '/planning' },
  { id: 'purchase', name: 'Purchase', icon: <ShoppingBag />, path: '/purchase' },
  { id: 'inventory', name: 'Inventory', icon: <Box />, path: '/inventory' },
  { id: 'manufacturing', name: 'Manufacturing', icon: <Factory />, path: '/manufacturing' },
  { id: 'hr_management', name: 'HR Management', icon: <UserPlus />, path: '/hr-management' },
  { id: 'expenses', name: 'Expenses', icon: <DollarSign />, path: '/expenses' },
  { id: 'reports', name: 'Reports', icon: <FileText />, path: '/reports' },
];

const Features: React.FC = () => {
  return (
    <div className="min-h-screen bg-gray-100 py-6 flex flex-col justify-center sm:py-12">
      <div className="relative py-3 sm:max-w-xl sm:mx-auto">
        <div className="relative px-4 py-10 bg-white shadow-lg sm:rounded-3xl sm:p-20">
          <h1 className="text-2xl font-semibold mb-6 text-center">Available Features</h1>
          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
            {features.map((feature) => (
              <Link
                key={feature.id}
                to={feature.path}
                className="flex flex-col items-center justify-center p-4 rounded-lg bg-gray-50 hover:bg-gray-100 transition-colors duration-200"
              >
                <div className="text-3xl mb-2">{feature.icon}</div>
                <span className="text-xs text-center">{feature.name}</span>
              </Link>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Features;

================
File: src/components/features/Accounting.tsx
================
import React from 'react';

const Accounting: React.FC = () => {
  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">Accounting</h2>
      <p>This is the Accounting feature page. Implement your accounting functionality here.</p>
    </div>
  );
};

export default Accounting;

================
File: src/components/features/Appointments.tsx
================
import React from 'react';

const Appointments: React.FC = () => {
  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">Appointments</h2>
      <p>This is the Appointments feature page. Implement your appointment management functionality here.</p>
    </div>
  );
};

export default Appointments;

================
File: src/components/features/Apps.tsx
================
import React from 'react';

const Apps: React.FC = () => {
  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">Apps</h2>
      <p>This is the Apps feature page. Implement your app management or integration functionality here.</p>
    </div>
  );
};



export default Apps;

================
File: src/components/features/Barcode.tsx
================
import React from 'react';

const Barcode: React.FC = () => {
  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">Barcode</h2>
      <p>This is the Barcode feature page. Implement your barcode scanning and generation functionality here.</p>
    </div>
  );
};

export default Barcode;

================
File: src/components/features/Calendar.tsx
================
import React from 'react';

const Calendar: React.FC = () => {
  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">Calendar</h2>
      <p>This is the Calendar feature page. Implement your calendar functionality here.</p>
    </div>
  );
};

export default Calendar;

================
File: src/components/features/CRM.tsx
================
import React, { useState } from 'react';
import { Users, MessageSquare, Mail, FileText } from 'lucide-react';
import LeadManagement from './CRM/LeadManagement';
import CustomerDatabase from './CRM/CustomerDatabase';
import CustomerService from './CRM/CustomerService';
import MarketingAutomation from './CRM/MarketingAutomation';
import QuotationsContracts from './CRM/QuotationsContracts';

const CRM: React.FC = () => {
  const [activeTab, setActiveTab] = useState('leads');

  const tabs = [
    { id: 'leads', name: 'Lead Management', icon: <Users /> },
    { id: 'customers', name: 'Customer Database', icon: <Users /> },
    { id: 'service', name: 'Customer Service', icon: <MessageSquare /> },
    { id: 'marketing', name: 'Marketing Automation', icon: <Mail /> },
    { id: 'quotations', name: 'Quotations & Contracts', icon: <FileText /> },
  ];

  const renderComponent = () => {
    switch (activeTab) {
      case 'leads':
        return <LeadManagement />;
      case 'customers':
        return <CustomerDatabase />;
      case 'service':
        return <CustomerService />;
      case 'marketing':
        return <MarketingAutomation />;
      case 'quotations':
        return <QuotationsContracts />;
      default:
        return <LeadManagement />;
    }
  };

  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-6">Customer Relationship Management</h2>
      <div className="flex mb-6 space-x-2 overflow-x-auto">
        {tabs.map((tab) => (
          <button
            key={tab.id}
            className={`flex items-center px-4 py-2 rounded-lg transition-colors duration-200 ${
              activeTab === tab.id
                ? 'bg-blue-500 text-white'
                : 'bg-white text-gray-600 hover:bg-gray-100'
            }`}
            onClick={() => setActiveTab(tab.id)}
          >
            {tab.icon}
            <span className="ml-2">{tab.name}</span>
          </button>
        ))}
      </div>
      <div className="bg-white rounded-lg shadow p-6">
        {renderComponent()}
      </div>
    </div>
  );
};

export default CRM;

================
File: src/components/features/CRM/CustomerDatabase.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Trash2, User, Phone, Mail } from 'lucide-react';

interface Customer {
  id: string;
  name: string;
  email: string;
  phone: string;
  company: string;
  address: string;
  notes: string;
  createdAt: Date;
}

const CustomerDatabase: React.FC = () => {
  const [customers, setCustomers] = useState<Customer[]>([]);
  const [newCustomer, setNewCustomer] = useState<Omit<Customer, 'id' | 'createdAt'>>({
    name: '',
    email: '',
    phone: '',
    company: '',
    address: '',
    notes: '',
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'customers'), orderBy('createdAt', 'desc'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const customersData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        createdAt: doc.data().createdAt.toDate(),
      } as Customer));
      setCustomers(customersData);
    });
    return unsubscribe;
  }, []);

  const handleAddCustomer = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'customers'), {
        ...newCustomer,
        createdAt: new Date(),
      });
      setNewCustomer({
        name: '',
        email: '',
        phone: '',
        company: '',
        address: '',
        notes: '',
      });
    } catch (error) {
      console.error("Error adding customer: ", error);
    }
  };

  const handleUpdateCustomer = async (id: string, updatedCustomer: Partial<Customer>) => {
    try {
      await updateDoc(doc(db, 'customers', id), updatedCustomer);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating customer: ", error);
    }
  };

  const handleDeleteCustomer = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'customers', id));
    } catch (error) {
      console.error("Error deleting customer: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = customers.map(customer => 
      `${customer.name},${customer.email},${customer.phone},${customer.company},${customer.address},${customer.notes},${customer.createdAt.toISOString()}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'customers.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Customer Database</h3>
      <form onSubmit={handleAddCustomer} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Name"
            value={newCustomer.name}
            onChange={(e) => setNewCustomer({ ...newCustomer, name: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="email"
            placeholder="Email"
            value={newCustomer.email}
            onChange={(e) => setNewCustomer({ ...newCustomer, email: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="tel"
            placeholder="Phone"
            value={newCustomer.phone}
            onChange={(e) => setNewCustomer({ ...newCustomer, phone: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Company"
            value={newCustomer.company}
            onChange={(e) => setNewCustomer({ ...newCustomer, company: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Address"
            value={newCustomer.address}
            onChange={(e) => setNewCustomer({ ...newCustomer, address: e.target.value })}
            className="p-2 border rounded"
          />
          <textarea
            placeholder="Notes"
            value={newCustomer.notes}
            onChange={(e) => setNewCustomer({ ...newCustomer, notes: e.target.value })}
            className="p-2 border rounded"
          />
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add Customer
        </button>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Name</th>
            <th className="py-3 px-6 text-left">Email</th>
            <th className="py-3 px-6 text-left">Phone</th>
            <th className="py-3 px-6 text-left">Company</th>
            <th className="py-3 px-6 text-left">Address</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {customers.map((customer) => (
            <tr key={customer.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">
                <div className="flex items-center">
                  <User size={18} className="mr-2" />
                  {customer.name}
                </div>
              </td>
              <td className="py-3 px-6 text-left">
                <div className="flex items-center">
                  <Mail size={18} className="mr-2" />
                  {customer.email}
                </div>
              </td>
              <td className="py-3 px-6 text-left">
                <div className="flex items-center">
                  <Phone size={18} className="mr-2" />
                  {customer.phone}
                </div>
              </td>
              <td className="py-3 px-6 text-left">{customer.company}</td>
              <td className="py-3 px-6 text-left">{customer.address}</td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(customer.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteCustomer(customer.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default CustomerDatabase;

================
File: src/components/features/CRM/CustomerService.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Trash2, MessageSquare } from 'lucide-react';

interface Ticket {
  id: string;
  customerName: string;
  subject: string;
  description: string;
  status: 'open' | 'in progress' | 'resolved' | 'closed';
  priority: 'low' | 'medium' | 'high';
  assignedTo: string;
  createdAt: Date;
}

const CustomerService: React.FC = () => {
  const [tickets, setTickets] = useState<Ticket[]>([]);
  const [newTicket, setNewTicket] = useState<Omit<Ticket, 'id' | 'createdAt'>>({
    customerName: '',
    subject: '',
    description: '',
    status: 'open',
    priority: 'medium',
    assignedTo: '',
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'tickets'), orderBy('createdAt', 'desc'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const ticketsData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        createdAt: doc.data().createdAt.toDate(),
      } as Ticket));
      setTickets(ticketsData);
    });
    return unsubscribe;
  }, []);

  const handleAddTicket = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'tickets'), {
        ...newTicket,
        createdAt: new Date(),
      });
      setNewTicket({
        customerName: '',
        subject: '',
        description: '',
        status: 'open',
        priority: 'medium',
        assignedTo: '',
      });
    } catch (error) {
      console.error("Error adding ticket: ", error);
    }
  };

  const handleUpdateTicket = async (id: string, updatedTicket: Partial<Ticket>) => {
    try {
      await updateDoc(doc(db, 'tickets', id), updatedTicket);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating ticket: ", error);
    }
  };

  const handleDeleteTicket = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'tickets', id));
    } catch (error) {
      console.error("Error deleting ticket: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = tickets.map(ticket => 
      `${ticket.customerName},${ticket.subject},${ticket.description},${ticket.status},${ticket.priority},${ticket.assignedTo},${ticket.createdAt.toISOString()}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'customer_service_tickets.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Customer Service</h3>
      <form onSubmit={handleAddTicket} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Customer Name"
            value={newTicket.customerName}
            onChange={(e) => setNewTicket({ ...newTicket, customerName: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Subject"
            value={newTicket.subject}
            onChange={(e) => setNewTicket({ ...newTicket, subject: e.target.value })}
            className="p-2 border rounded"
          />
          <textarea
            placeholder="Description"
            value={newTicket.description}
            onChange={(e) => setNewTicket({ ...newTicket, description: e.target.value })}
            className="p-2 border rounded col-span-2"
          />
          <select
            value={newTicket.status}
            onChange={(e) => setNewTicket({ ...newTicket, status: e.target.value as Ticket['status'] })}
            className="p-2 border rounded"
          >
            <option value="open">Open</option>
            <option value="in progress">In Progress</option>
            <option value="resolved">Resolved</option>
            <option value="closed">Closed</option>
          </select>
          <select
            value={newTicket.priority}
            onChange={(e) => setNewTicket({ ...newTicket, priority: e.target.value as Ticket['priority'] })}
            className="p-2 border rounded"
          >
            <option value="low">Low</option>
            <option value="medium">Medium</option>
            <option value="high">High</option>
          </select>
          <input
            type="text"
            placeholder="Assigned To"
            value={newTicket.assignedTo}
            onChange={(e) => setNewTicket({ ...newTicket, assignedTo: e.target.value })}
            className="p-2 border rounded"
          />
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add Ticket
        </button>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Customer</th>
            <th className="py-3 px-6 text-left">Subject</th>
            <th className="py-3 px-6 text-left">Status</th>
            <th className="py-3 px-6 text-left">Priority</th>
            <th className="py-3 px-6 text-left">Assigned To</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {tickets.map((ticket) => (
            <tr key={ticket.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{ticket.customerName}</td>
              <td className="py-3 px-6 text-left">
                <div className="flex items-center">
                  <MessageSquare size={18} className="mr-2" />
                  {ticket.subject}
                </div>
              </td>
              <td className="py-3 px-6 text-left">
                <span className={`py-1 px-3 rounded-full text-xs ${
                  ticket.status === 'open' ? 'bg-yellow-200 text-yellow-800' :
                  ticket.status === 'in progress' ? 'bg-blue-200 text-blue-800' :
                  ticket.status === 'resolved' ? 'bg-green-200 text-green-800' :
                  'bg-gray-200 text-gray-800'
                }`}>
                  {ticket.status}
                </span>
              </td>
              <td className="py-3 px-6 text-left">
                <span className={`py-1 px-3 rounded-full text-xs ${
                  ticket.priority === 'high' ? 'bg-red-200 text-red-800' :
                  ticket.priority === 'medium' ? 'bg-yellow-200 text-yellow-800' :
                  'bg-green-200 text-green-800'
                }`}>
                  {ticket.priority}
                </span>
              </td>
              <td className="py-3 px-6 text-left">{ticket.assignedTo}</td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(ticket.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteTicket(ticket.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default CustomerService;

================
File: src/components/features/CRM/LeadManagement.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Trash2, User } from 'lucide-react';

interface Lead {
  id: string;
  name: string;
  email: string;
  phone: string;
  company: string;
  status: 'new' | 'contacted' | 'qualified' | 'lost';
  source: string;
  notes: string;
  createdAt: Date;
}

const LeadManagement: React.FC = () => {
  const [leads, setLeads] = useState<Lead[]>([]);
  const [newLead, setNewLead] = useState<Omit<Lead, 'id' | 'createdAt'>>({
    name: '',
    email: '',
    phone: '',
    company: '',
    status: 'new',
    source: '',
    notes: '',
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'leads'), orderBy('createdAt', 'desc'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const leadsData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        createdAt: doc.data().createdAt.toDate(),
      } as Lead));
      setLeads(leadsData);
    });
    return unsubscribe;
  }, []);

  const handleAddLead = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'leads'), {
        ...newLead,
        createdAt: new Date(),
      });
      setNewLead({
        name: '',
        email: '',
        phone: '',
        company: '',
        status: 'new',
        source: '',
        notes: '',
      });
    } catch (error) {
      console.error("Error adding lead: ", error);
    }
  };

  const handleUpdateLead = async (id: string, updatedLead: Partial<Lead>) => {
    try {
      await updateDoc(doc(db, 'leads', id), updatedLead);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating lead: ", error);
    }
  };

  const handleDeleteLead = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'leads', id));
    } catch (error) {
      console.error("Error deleting lead: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = leads.map(lead => 
      `${lead.name},${lead.email},${lead.phone},${lead.company},${lead.status},${lead.source},${lead.notes},${lead.createdAt.toISOString()}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'leads.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Lead Management</h3>
      <form onSubmit={handleAddLead} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Name"
            value={newLead.name}
            onChange={(e) => setNewLead({ ...newLead, name: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="email"
            placeholder="Email"
            value={newLead.email}
            onChange={(e) => setNewLead({ ...newLead, email: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="tel"
            placeholder="Phone"
            value={newLead.phone}
            onChange={(e) => setNewLead({ ...newLead, phone: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Company"
            value={newLead.company}
            onChange={(e) => setNewLead({ ...newLead, company: e.target.value })}
            className="p-2 border rounded"
          />
          <select
            value={newLead.status}
            onChange={(e) => setNewLead({ ...newLead, status: e.target.value as Lead['status'] })}
            className="p-2 border rounded"
          >
            <option value="new">New</option>
            <option value="contacted">Contacted</option>
            <option value="qualified">Qualified</option>
            <option value="lost">Lost</option>
          </select>
          <input
            type="text"
            placeholder="Source"
            value={newLead.source}
            onChange={(e) => setNewLead({ ...newLead, source: e.target.value })}
            className="p-2 border rounded"
          />
          <textarea
            placeholder="Notes"
            value={newLead.notes}
            onChange={(e) => setNewLead({ ...newLead, notes: e.target.value })}
            className="p-2 border rounded col-span-2"
          />
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add Lead
        </button>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Name</th>
            <th className="py-3 px-6 text-left">Email</th>
            <th className="py-3 px-6 text-left">Phone</th>
            <th className="py-3 px-6 text-left">Company</th>
            <th className="py-3 px-6 text-left">Status</th>
            <th className="py-3 px-6 text-left">Source</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {leads.map((lead) => (
            <tr key={lead.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">
                <div className="flex items-center">
                  <User size={18} className="mr-2" />
                  {lead.name}
                </div>
              </td>
              <td className="py-3 px-6 text-left">{lead.email}</td>
              <td className="py-3 px-6 text-left">{lead.phone}</td>
              <td className="py-3 px-6 text-left">{lead.company}</td>
              <td className="py-3 px-6 text-left">
                <span className={`py-1 px-3 rounded-full text-xs ${
                  lead.status === 'new' ? 'bg-blue-200 text-blue-800' :
                  lead.status === 'contacted' ? 'bg-yellow-200 text-yellow-800' :
                  lead.status === 'qualified' ? 'bg-green-200 text-green-800' :
                  'bg-red-200 text-red-800'
                }`}>
                  {lead.status}
                </span>
              </td>
              <td className="py-3 px-6 text-left">{lead.source}</td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(lead.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteLead(lead.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default LeadManagement;

================
File: src/components/features/CRM/MarketingAutomation.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Trash2, Mail, Users } from 'lucide-react';

interface Campaign {
  id: string;
  name: string;
  type: 'email' | 'sms' | 'social media';
  status: 'draft' | 'scheduled' | 'active' | 'completed';
  targetAudience: string;
  content: string;
  scheduledDate: Date;
  createdAt: Date;
}

const MarketingAutomation: React.FC = () => {
  const [campaigns, setCampaigns] = useState<Campaign[]>([]);
  const [newCampaign, setNewCampaign] = useState<Omit<Campaign, 'id' | 'createdAt'>>({
    name: '',
    type: 'email',
    status: 'draft',
    targetAudience: '',
    content: '',
    scheduledDate: new Date(),
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'campaigns'), orderBy('createdAt', 'desc'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const campaignsData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        scheduledDate: doc.data().scheduledDate.toDate(),
        createdAt: doc.data().createdAt.toDate(),
      } as Campaign));
      setCampaigns(campaignsData);
    });
    return unsubscribe;
  }, []);

  const handleAddCampaign = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'campaigns'), {
        ...newCampaign,
        createdAt: new Date(),
      });
      setNewCampaign({
        name: '',
        type: 'email',
        status: 'draft',
        targetAudience: '',
        content: '',
        scheduledDate: new Date(),
      });
    } catch (error) {
      console.error("Error adding campaign: ", error);
    }
  };

  const handleUpdateCampaign = async (id: string, updatedCampaign: Partial<Campaign>) => {
    try {
      await updateDoc(doc(db, 'campaigns', id), updatedCampaign);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating campaign: ", error);
    }
  };

  const handleDeleteCampaign = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'campaigns', id));
    } catch (error) {
      console.error("Error deleting campaign: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = campaigns.map(campaign => 
      `${campaign.name},${campaign.type},${campaign.status},${campaign.targetAudience},${campaign.content},${campaign.scheduledDate.toISOString()},${campaign.createdAt.toISOString()}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'marketing_campaigns.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Marketing Automation</h3>
      <form onSubmit={handleAddCampaign} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Campaign Name"
            value={newCampaign.name}
            onChange={(e) => setNewCampaign({ ...newCampaign, name: e.target.value })}
            className="p-2 border rounded"
          />
          <select
            value={newCampaign.type}
            onChange={(e) => setNewCampaign({ ...newCampaign, type: e.target.value as Campaign['type'] })}
            className="p-2 border rounded"
          >
            <option value="email">Email</option>
            <option value="sms">SMS</option>
            <option value="social media">Social Media</option>
          </select>
          <select
            value={newCampaign.status}
            onChange={(e) => setNewCampaign({ ...newCampaign, status: e.target.value as Campaign['status'] })}
            className="p-2 border rounded"
          >
            <option value="draft">Draft</option>
            <option value="scheduled">Scheduled</option>
            <option value="active">Active</option>
            <option value="completed">Completed</option>
          </select>
          <input
            type="text"
            placeholder="Target Audience"
            value={newCampaign.targetAudience}
            onChange={(e) => setNewCampaign({ ...newCampaign, targetAudience: e.target.value })}
            className="p-2 border rounded"
          />
          <textarea
            placeholder="Campaign Content"
            value={newCampaign.content}
            onChange={(e) => setNewCampaign({ ...newCampaign, content: e.target.value })}
            className="p-2 border rounded col-span-2"
          />
          <input
            type="datetime-local"
            value={newCampaign.scheduledDate.toISOString().slice(0, 16)}
            onChange={(e) => setNewCampaign({ ...newCampaign, scheduledDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add Campaign
        </button>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Name</th>
            <th className="py-3 px-6 text-left">Type</th>
            <th className="py-3 px-6 text-left">Status</th>
            <th className="py-3 px-6 text-left">Target Audience</th>
            <th className="py-3 px-6 text-left">Scheduled Date</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {campaigns.map((campaign) => (
            <tr key={campaign.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{campaign.name}</td>
              <td className="py-3 px-6 text-left">
                <div className="flex items-center">
                  {campaign.type === 'email' ? <Mail size={18} className="mr-2" /> :
                   campaign.type === 'sms' ? <MessageSquare size={18} className="mr-2" /> :
                   <Users size={18} className="mr-2" />}
                  {campaign.type}
                </div>
              </td>
              <td className="py-3 px-6 text-left">
                <span className={`py-1 px-3 rounded-full text-xs ${
                  campaign.status === 'draft' ? 'bg-gray-200 text-gray-800' :
                  campaign.status === 'scheduled' ? 'bg-yellow-200 text-yellow-800' :
                  campaign.status === 'active' ? 'bg-green-200 text-green-800' :
                  'bg-blue-200 text-blue-800'
                }`}>
                  {campaign.status}
                </span>
              </td>
              <td className="py-3 px-6 text-left">{campaign.targetAudience}</td>
              <td className="py-3 px-6 text-left">{campaign.scheduledDate.toLocaleString()}</td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(campaign.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteCampaign(campaign.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default MarketingAutomation;

================
File: src/components/features/CRM/QuotationsContracts.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Trash2, FileText, DollarSign } from 'lucide-react';

interface QuotationContract {
  id: string;
  type: 'quotation' | 'contract';
  customerName: string;
  amount: number;
  status: 'draft' | 'sent' | 'accepted' | 'rejected';
  validUntil: Date;
  content: string;
  createdAt: Date;
}

const QuotationsContracts: React.FC = () => {
  const [documents, setDocuments] = useState<QuotationContract[]>([]);
  const [newDocument, setNewDocument] = useState<Omit<QuotationContract, 'id' | 'createdAt'>>({
    type: 'quotation',
    customerName: '',
    amount: 0,
    status: 'draft',
    validUntil: new Date(),
    content: '',
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'quotationsContracts'), orderBy('createdAt', 'desc'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const documentsData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        validUntil: doc.data().validUntil.toDate(),
        createdAt: doc.data().createdAt.toDate(),
      } as QuotationContract));
      setDocuments(documentsData);
    });
    return unsubscribe;
  }, []);

  const handleAddDocument = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'quotationsContracts'), {
        ...newDocument,
        createdAt: new Date(),
      });
      setNewDocument({
        type: 'quotation',
        customerName: '',
        amount: 0,
        status: 'draft',
        validUntil: new Date(),
        content: '',
      });
    } catch (error) {
      console.error("Error adding document: ", error);
    }
  };

  const handleUpdateDocument = async (id: string, updatedDocument: Partial<QuotationContract>) => {
    try {
      await updateDoc(doc(db, 'quotationsContracts', id), updatedDocument);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating document: ", error);
    }
  };

  const handleDeleteDocument = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'quotationsContracts', id));
    } catch (error) {
      console.error("Error deleting document: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = documents.map(doc => 
      `${doc.type},${doc.customerName},${doc.amount},${doc.status},${doc.validUntil.toISOString()},${doc.content},${doc.createdAt.toISOString()}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'quotations_contracts.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Quotations & Contracts</h3>
      <form onSubmit={handleAddDocument} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <select
            value={newDocument.type}
            onChange={(e) => setNewDocument({ ...newDocument, type: e.target.value as 'quotation' | 'contract' })}
            className="p-2 border rounded"
          >
            <option value="quotation">Quotation</option>
            <option value="contract">Contract</option>
          </select>
          <input
            type="text"
            placeholder="Customer Name"
            value={newDocument.customerName}
            onChange={(e) => setNewDocument({ ...newDocument, customerName: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="number"
            placeholder="Amount"
            value={newDocument.amount}
            onChange={(e) => setNewDocument({ ...newDocument, amount: parseFloat(e.target.value) })}
            className="p-2 border rounded"
          />
          <select
            value={newDocument.status}
            onChange={(e) => setNewDocument({ ...newDocument, status: e.target.value as QuotationContract['status'] })}
            className="p-2 border rounded"
          >
            <option value="draft">Draft</option>
            <option value="sent">Sent</option>
            <option value="accepted">Accepted</option>
            <option value="rejected">Rejected</option>
          </select>
          <input
            type="date"
            value={newDocument.validUntil.toISOString().split('T')[0]}
            onChange={(e) => setNewDocument({ ...newDocument, validUntil: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
          <textarea
            placeholder="Document Content"
            value={newDocument.content}
            onChange={(e) => setNewDocument({ ...newDocument, content: e.target.value })}
            className="p-2 border rounded col-span-2"
          />
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add Document
        </button>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Type</th>
            <th className="py-3 px-6 text-left">Customer</th>
            <th className="py-3 px-6 text-right">Amount</th>
            <th className="py-3 px-6 text-left">Status</th>
            <th className="py-3 px-6 text-left">Valid Until</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {documents.map((doc) => (
            <tr key={doc.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">
                <div className="flex items-center">
                  <FileText size={18} className="mr-2" />
                  {doc.type}
                </div>
              </td>
              <td className="py-3 px-6 text-left">{doc.customerName}</td>
              <td className="py-3 px-6 text-right">
                <div className="flex items-center justify-end">
                  <DollarSign size={18} className="mr-2" />
                  {doc.amount.toFixed(2)}
                </div>
              </td>
              <td className="py-3 px-6 text-left">
                <span className={`py-1 px-3 rounded-full text-xs ${
                  doc.status === 'draft' ? 'bg-gray-200 text-gray-800' :
                  doc.status === 'sent' ? 'bg-yellow-200 text-yellow-800' :
                  doc.status === 'accepted' ? 'bg-green-200 text-green-800' :
                  'bg-red-200 text-red-800'
                }`}>
                  {doc.status}
                </span>
              </td>
              <td className="py-3 px-6 text-left">{doc.validUntil.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(doc.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteDocument(doc.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default QuotationsContracts;

================
File: src/components/features/CRM/SalesOrderManagement.tsx
================
import React, { useState } from 'react';
import { Package, DollarSign, TrendingUp, RefreshCcw, BarChart } from 'lucide-react';
import SalesOrderCreation from './SalesOrderManagement/SalesOrderCreation';
import OrderFulfillment from './SalesOrderManagement/OrderFulfillment';
import ReturnsRefunds from './SalesOrderManagement/ReturnsRefunds';
import PricingManagement from './SalesOrderManagement/PricingManagement';
import SalesAnalytics from './SalesOrderManagement/SalesAnalytics';

const SalesOrderManagement: React.FC = () => {
  const [activeTab, setActiveTab] = useState('salesOrder');

  const tabs = [
    { id: 'salesOrder', name: 'Sales Order Creation', icon: <Package /> },
    { id: 'fulfillment', name: 'Order Fulfillment', icon: <DollarSign /> },
    { id: 'returns', name: 'Returns and Refunds', icon: <RefreshCcw /> },
    { id: 'pricing', name: 'Pricing Management', icon: <TrendingUp /> },
    { id: 'analytics', name: 'Sales Analytics', icon: <BarChart /> },
  ];

  const renderComponent = () => {
    switch (activeTab) {
      case 'salesOrder':
        return <SalesOrderCreation />;
      case 'fulfillment':
        return <OrderFulfillment />;
      case 'returns':
        return <ReturnsRefunds />;
      case 'pricing':
        return <PricingManagement />;
      case 'analytics':
        return <SalesAnalytics />;
      default:
        return <SalesOrderCreation />;
    }
  };

  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-6">Sales and Order Management</h2>
      <div className="flex mb-6 space-x-2 overflow-x-auto">
        {tabs.map((tab) => (
          <button
            key={tab.id}
            className={`flex items-center px-4 py-2 rounded-lg transition-colors duration-200 ${
              activeTab === tab.id
                ? 'bg-blue-500 text-white'
                : 'bg-white text-gray-600 hover:bg-gray-100'
            }`}
            onClick={() => setActiveTab(tab.id)}
          >
            {tab.icon}
            <span className="ml-2">{tab.name}</span>
          </button>
        ))}
      </div>
      <div className="bg-white rounded-lg shadow p-6">
        {renderComponent()}
      </div>
    </div>
  );
};

export default SalesOrderManagement;

================
File: src/components/features/CRM/SalesOrderManagement/OrderFulfillment.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../../firebase';
import { Plus, Download, Edit, Trash2, Truck } from 'lucide-react';

interface FulfillmentOrder {
  id: string;
  orderId: string;
  customerName: string;
  status: 'pending' | 'processing' | 'shipped' | 'delivered';
  shippingMethod: string;
  trackingNumber: string;
  estimatedDeliveryDate: Date;
  actualDeliveryDate?: Date;
  createdAt: Date;
}

const OrderFulfillment: React.FC = () => {
  const [fulfillments, setFulfillments] = useState<FulfillmentOrder[]>([]);
  const [newFulfillment, setNewFulfillment] = useState<Omit<FulfillmentOrder, 'id' | 'createdAt'>>({
    orderId: '',
    customerName: '',
    status: 'pending',
    shippingMethod: '',
    trackingNumber: '',
    estimatedDeliveryDate: new Date(),
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'orderFulfillments'), orderBy('createdAt', 'desc'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const fulfillmentsData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        estimatedDeliveryDate: doc.data().estimatedDeliveryDate.toDate(),
        actualDeliveryDate: doc.data().actualDeliveryDate?.toDate(),
        createdAt: doc.data().createdAt.toDate(),
      } as FulfillmentOrder));
      setFulfillments(fulfillmentsData);
    });
    return unsubscribe;
  }, []);

  const handleAddFulfillment = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'orderFulfillments'), {
        ...newFulfillment,
        createdAt: new Date(),
      });
      setNewFulfillment({
        orderId: '',
        customerName: '',
        status: 'pending',
        shippingMethod: '',
        trackingNumber: '',
        estimatedDeliveryDate: new Date(),
      });
    } catch (error) {
      console.error("Error adding fulfillment: ", error);
    }
  };

  const handleUpdateFulfillment = async (id: string, updatedFulfillment: Partial<FulfillmentOrder>) => {
    try {
      await updateDoc(doc(db, 'orderFulfillments', id), updatedFulfillment);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating fulfillment: ", error);
    }
  };

  const handleDeleteFulfillment = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'orderFulfillments', id));
    } catch (error) {
      console.error("Error deleting fulfillment: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = fulfillments.map(fulfillment => 
      `${fulfillment.orderId},${fulfillment.customerName},${fulfillment.status},${fulfillment.shippingMethod},${fulfillment.trackingNumber},${fulfillment.estimatedDeliveryDate.toISOString()},${fulfillment.actualDeliveryDate?.toISOString() || ''},${fulfillment.createdAt.toISOString()}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'order_fulfillments.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Order Fulfillment</h3>
      <form onSubmit={handleAddFulfillment} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Order ID"
            value={newFulfillment.orderId}
            onChange={(e) => setNewFulfillment({ ...newFulfillment, orderId: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Customer Name"
            value={newFulfillment.customerName}
            onChange={(e) => setNewFulfillment({ ...newFulfillment, customerName: e.target.value })}
            className="p-2 border rounded"
          />
          <select
            value={newFulfillment.status}
            onChange={(e) => setNewFulfillment({ ...newFulfillment, status: e.target.value as FulfillmentOrder['status'] })}
            className="p-2 border rounded"
          >
            <option value="pending">Pending</option>
            <option value="processing">Processing</option>
            <option value="shipped">Shipped</option>
            <option value="delivered">Delivered</option>
          </select>
          <input
            type="text"
            placeholder="Shipping Method"
            value={newFulfillment.shippingMethod}
            onChange={(e) => setNewFulfillment({ ...newFulfillment, shippingMethod: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Tracking Number"
            value={newFulfillment.trackingNumber}
            onChange={(e) => setNewFulfillment({ ...newFulfillment, trackingNumber: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="date"
            value={newFulfillment.estimatedDeliveryDate.toISOString().split('T')[0]}
            onChange={(e) => setNewFulfillment({ ...newFulfillment, estimatedDeliveryDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add Fulfillment
        </button>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Order ID</th>
            <th className="py-3 px-6 text-left">Customer</th>
            <th className="py-3 px-6 text-left">Status</th>
            <th className="py-3 px-6 text-left">Shipping Method</th>
            <th className="py-3 px-6 text-left">Tracking Number</th>
            <th className="py-3 px-6 text-left">Est. Delivery</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {fulfillments.map((fulfillment) => (
            <tr key={fulfillment.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{fulfillment.orderId}</td>
              <td className="py-3 px-6 text-left">{fulfillment.customerName}</td>
              <td className="py-3 px-6 text-left">
                <span className={`py-1 px-3 rounded-full text-xs ${
                  fulfillment.status === 'pending' ? 'bg-yellow-200 text-yellow-800' :
                  fulfillment.status === 'processing' ? 'bg-blue-200 text-blue-800' :
                  fulfillment.status === 'shipped' ? 'bg-purple-200 text-purple-800' :
                  'bg-green-200 text-green-800'
                }`}>
                  {fulfillment.status}
                </span>
              </td>
              <td className="py-3 px-6 text-left">{fulfillment.shippingMethod}</td>
              <td className="py-3 px-6 text-left">{fulfillment.trackingNumber}</td>
              <td className="py-3 px-6 text-left">{fulfillment.estimatedDeliveryDate.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(fulfillment.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteFulfillment(fulfillment.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default OrderFulfillment;

================
File: src/components/features/CRM/SalesOrderManagement/PricingManagement.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../../firebase';
import { Plus, Download, Edit, Trash2, DollarSign, Percent } from 'lucide-react';

interface PricingRule {
  id: string;
  name: string;
  type: 'fixed' | 'percentage';
  value: number;
  startDate: Date;
  endDate: Date;
  productIds: string[];
  customerGroups: string[];
  active: boolean;
  createdAt: Date;
}

const PricingManagement: React.FC = () => {
  const [pricingRules, setPricingRules] = useState<PricingRule[]>([]);
  const [newPricingRule, setNewPricingRule] = useState<Omit<PricingRule, 'id' | 'createdAt'>>({
    name: '',
    type: 'fixed',
    value: 0,
    startDate: new Date(),
    endDate: new Date(),
    productIds: [],
    customerGroups: [],
    active: true,
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'pricingRules'), orderBy('createdAt', 'desc'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const pricingRulesData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        startDate: doc.data().startDate.toDate(),
        endDate: doc.data().endDate.toDate(),
        createdAt: doc.data().createdAt.toDate(),
      } as PricingRule));
      setPricingRules(pricingRulesData);
    });
    return unsubscribe;
  }, []);

  const handleAddPricingRule = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'pricingRules'), {
        ...newPricingRule,
        createdAt: new Date(),
      });
      setNewPricingRule({
        name: '',
        type: 'fixed',
        value: 0,
        startDate: new Date(),
        endDate: new Date(),
        productIds: [],
        customerGroups: [],
        active: true,
      });
    } catch (error) {
      console.error("Error adding pricing rule: ", error);
    }
  };

  const handleUpdatePricingRule = async (id: string, updatedPricingRule: Partial<PricingRule>) => {
    try {
      await updateDoc(doc(db, 'pricingRules', id), updatedPricingRule);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating pricing rule: ", error);
    }
  };

  const handleDeletePricingRule = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'pricingRules', id));
    } catch (error) {
      console.error("Error deleting pricing rule: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = pricingRules.map(rule => 
      `${rule.name},${rule.type},${rule.value},${rule.startDate.toISOString()},${rule.endDate.toISOString()},${rule.productIds.join(';')},${rule.customerGroups.join(';')},${rule.active},${rule.createdAt.toISOString()}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'pricing_rules.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Pricing Management</h3>
      <form onSubmit={handleAddPricingRule} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Rule Name"
            value={newPricingRule.name}
            onChange={(e) => setNewPricingRule({ ...newPricingRule, name: e.target.value })}
            className="p-2 border rounded"
          />
          <select
            value={newPricingRule.type}
            onChange={(e) => setNewPricingRule({ ...newPricingRule, type: e.target.value as 'fixed' | 'percentage' })}
            className="p-2 border rounded"
          >
            <option value="fixed">Fixed Amount</option>
            <option value="percentage">Percentage</option>
          </select>
          <input
            type="number"
            placeholder="Value"
            value={newPricingRule.value}
            onChange={(e) => setNewPricingRule({ ...newPricingRule, value: parseFloat(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="date"
            placeholder="Start Date"
            value={newPricingRule.startDate.toISOString().split('T')[0]}
            onChange={(e) => setNewPricingRule({ ...newPricingRule, startDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="date"
            placeholder="End Date"
            value={newPricingRule.endDate.toISOString().split('T')[0]}
            onChange={(e) => setNewPricingRule({ ...newPricingRule, endDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Product IDs (comma-separated)"
            value={newPricingRule.productIds.join(',')}
            onChange={(e) => setNewPricingRule({ ...newPricingRule, productIds: e.target.value.split(',') })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Customer Groups (comma-separated)"
            value={newPricingRule.customerGroups.join(',')}
            onChange={(e) => setNewPricingRule({ ...newPricingRule, customerGroups: e.target.value.split(',') })}
            className="p-2 border rounded"
          />
          <div className="flex items-center">
            <input
              type="checkbox"
              checked={newPricingRule.active}
              onChange={(e) => setNewPricingRule({ ...newPricingRule, active: e.target.checked })}
              className="mr-2"
            />
            <label>Active</label>
          </div>
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add Pricing Rule
        </button>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Name</th>
            <th className="py-3 px-6 text-left">Type</th>
            <th className="py-3 px-6 text-right">Value</th>
            <th className="py-3 px-6 text-left">Start Date</th>
            <th className="py-3 px-6 text-left">End Date</th>
            <th className="py-3 px-6 text-center">Active</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {pricingRules.map((rule) => (
            <tr key={rule.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{rule.name}</td>
              <td className="py-3 px-6 text-left">
                {rule.type === 'fixed' ? <DollarSign size={18} className="inline mr-1" /> : <Percent size={18} className="inline mr-1" />}
                {rule.type}
              </td>
              <td className="py-3 px-6 text-right">{rule.value}{rule.type === 'percentage' && '%'}</td>
              <td className="py-3 px-6 text-left">{rule.startDate.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-left">{rule.endDate.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-center">
                <span className={`py-1 px-3 rounded-full text-xs ${
                  rule.active ? 'bg-green-200 text-green-800' : 'bg-red-200 text-red-800'
                }`}>
                  {rule.active ? 'Active' : 'Inactive'}
                </span>
              </td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(rule.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeletePricingRule(rule.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default PricingManagement;

================
File: src/components/features/CRM/SalesOrderManagement/ReturnsRefunds.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../../firebase';
import { Plus, Download, Edit, Trash2, RefreshCcw } from 'lucide-react';

interface ReturnRefund {
  id: string;
  orderId: string;
  customerName: string;
  reason: string;
  status: 'pending' | 'approved' | 'rejected' | 'processed';
  amount: number;
  requestDate: Date;
  processedDate?: Date;
  createdAt: Date;
}

const ReturnsRefunds: React.FC = () => {
  const [returnsRefunds, setReturnsRefunds] = useState<ReturnRefund[]>([]);
  const [newReturnRefund, setNewReturnRefund] = useState<Omit<ReturnRefund, 'id' | 'createdAt'>>({
    orderId: '',
    customerName: '',
    reason: '',
    status: 'pending',
    amount: 0,
    requestDate: new Date(),
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'returnsRefunds'), orderBy('createdAt', 'desc'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const returnsRefundsData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        requestDate: doc.data().requestDate.toDate(),
        processedDate: doc.data().processedDate?.toDate(),
        createdAt: doc.data().createdAt.toDate(),
      } as ReturnRefund));
      setReturnsRefunds(returnsRefundsData);
    });
    return unsubscribe;
  }, []);

  const handleAddReturnRefund = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'returnsRefunds'), {
        ...newReturnRefund,
        createdAt: new Date(),
      });
      setNewReturnRefund({
        orderId: '',
        customerName: '',
        reason: '',
        status: 'pending',
        amount: 0,
        requestDate: new Date(),
      });
    } catch (error) {
      console.error("Error adding return/refund: ", error);
    }
  };

  const handleUpdateReturnRefund = async (id: string, updatedReturnRefund: Partial<ReturnRefund>) => {
    try {
      await updateDoc(doc(db, 'returnsRefunds', id), updatedReturnRefund);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating return/refund: ", error);
    }
  };

  const handleDeleteReturnRefund = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'returnsRefunds', id));
    } catch (error) {
      console.error("Error deleting return/refund: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = returnsRefunds.map(returnRefund => 
      `${returnRefund.orderId},${returnRefund.customerName},${returnRefund.reason},${returnRefund.status},${returnRefund.amount},${returnRefund.requestDate.toISOString()},${returnRefund.processedDate?.toISOString() || ''},${returnRefund.createdAt.toISOString()}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'returns_refunds.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Returns and Refunds</h3>
      <form onSubmit={handleAddReturnRefund} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Order ID"
            value={newReturnRefund.orderId}
            onChange={(e) => setNewReturnRefund({ ...newReturnRefund, orderId: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Customer Name"
            value={newReturnRefund.customerName}
            onChange={(e) => setNewReturnRefund({ ...newReturnRefund, customerName: e.target.value })}
            className="p-2 border rounded"
          />
          <textarea
            placeholder="Reason"
            value={newReturnRefund.reason}
            onChange={(e) => setNewReturnRefund({ ...newReturnRefund, reason: e.target.value })}
            className="p-2 border rounded"
          />
          <select
            value={newReturnRefund.status}
            onChange={(e) => setNewReturnRefund({ ...newReturnRefund, status: e.target.value as ReturnRefund['status'] })}
            className="p-2 border rounded"
          >
            <option value="pending">Pending</option>
            <option value="approved">Approved</option>
            <option value="rejected">Rejected</option>
            <option value="processed">Processed</option>
          </select>
          <input
            type="number"
            placeholder="Amount"
            value={newReturnRefund.amount}
            onChange={(e) => setNewReturnRefund({ ...newReturnRefund, amount: parseFloat(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="date"
            value={newReturnRefund.requestDate.toISOString().split('T')[0]}
            onChange={(e) => setNewReturnRefund({ ...newReturnRefund, requestDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add Return/Refund
        </button>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Order ID</th>
            <th className="py-3 px-6 text-left">Customer</th>
            <th className="py-3 px-6 text-left">Reason</th>
            <th className="py-3 px-6 text-left">Status</th>
            <th className="py-3 px-6 text-right">Amount</th>
            <th className="py-3 px-6 text-left">Request Date</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {returnsRefunds.map((returnRefund) => (
            <tr key={returnRefund.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{returnRefund.orderId}</td>
              <td className="py-3 px-6 text-left">{returnRefund.customerName}</td>
              <td className="py-3 px-6 text-left">{returnRefund.reason}</td>
              <td className="py-3 px-6 text-left">
                <span className={`py-1 px-3 rounded-full text-xs ${
                  returnRefund.status === 'pending' ? 'bg-yellow-200 text-yellow-800' :
                  returnRefund.status === 'approved' ? 'bg-green-200 text-green-800' :
                  returnRefund.status === 'rejected' ? 'bg-red-200 text-red-800' :
                  'bg-blue-200 text-blue-800'
                }`}>
                  {returnRefund.status}
                </span>
              </td>
              <td className="py-3 px-6 text-right">${returnRefund.amount.toFixed(2)}</td>
              <td className="py-3 px-6 text-left">{returnRefund.requestDate.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(returnRefund.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteReturnRefund(returnRefund.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ReturnsRefunds;

================
File: src/components/features/CRM/SalesOrderManagement/SalesAnalytics.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, query, where, getDocs } from 'firebase/firestore';
import { db } from '../../../../firebase';
import { Download } from 'lucide-react';

interface SalesData {
  date: string;
  totalSales: number;
  orderCount: number;
}

const SalesAnalytics: React.FC = () => {
  const [salesData, setSalesData] = useState<SalesData[]>([]);
  const [dateRange, setDateRange] = useState<'week' | 'month' | 'year'>('week');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchSalesData();
  }, [dateRange]);

  const fetchSalesData = async () => {
    setLoading(true);
    const salesCollection = collection(db, 'salesOrders');
    const endDate = new Date();
    const startDate = new Date();

    switch (dateRange) {
      case 'week':
        startDate.setDate(endDate.getDate() - 7);
        break;
      case 'month':
        startDate.setMonth(endDate.getMonth() - 1);
        break;
      case 'year':
        startDate.setFullYear(endDate.getFullYear() - 1);
        break;
    }

    const q = query(
      salesCollection,
      where('orderDate', '>=', startDate),
      where('orderDate', '<=', endDate)
    );

    try {
      const querySnapshot = await getDocs(q);
      const sales: { [date: string]: { totalSales: number; orderCount: number } } = {};

      querySnapshot.forEach((doc) => {
        const data = doc.data();
        const date = new Date(data.orderDate.seconds * 1000).toISOString().split('T')[0];
        if (!sales[date]) {
          sales[date] = { totalSales: 0, orderCount: 0 };
        }
        sales[date].totalSales += data.totalAmount;
        sales[date].orderCount += 1;
      });

      const formattedData = Object.entries(sales).map(([date, data]) => ({
        date,
        totalSales: data.totalSales,
        orderCount: data.orderCount,
      }));

      setSalesData(formattedData.sort((a, b) => a.date.localeCompare(b.date)));
      setLoading(false);
    } catch (error) {
      console.error("Error fetching sales data: ", error);
      setLoading(false);
    }
  };

  const handleExport = () => {
    const csvContent = salesData.map(data => 
      `${data.date},${data.totalSales},${data.orderCount}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'sales_analytics.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Sales Analytics</h3>
      <div className="mb-4 flex justify-between items-center">
        <div>
          <select
            value={dateRange}
            onChange={(e) => setDateRange(e.target.value as 'week' | 'month' | 'year')}
            className="p-2 border rounded"
          >
            <option value="week">Last Week</option>
            <option value="month">Last Month</option>
            <option value="year">Last Year</option>
          </select>
        </div>
        <button
          onClick={handleExport}
          className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
        >
          <Download size={18} className="mr-2" />
          Export CSV
        </button>
      </div>
      {loading ? (
        <p>Loading sales data...</p>
      ) : (
        <div className="overflow-x-auto">
          <table className="w-full bg-white shadow-md rounded">
            <thead>
              <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
                <th className="py-3 px-6 text-left">Date</th>
                <th className="py-3 px-6 text-right">Total Sales</th>
                <th className="py-3 px-6 text-right">Order Count</th>
              </tr>
            </thead>
            <tbody className="text-gray-600 text-sm font-light">
              {salesData.map((data) => (
                <tr key={data.date} className="border-b border-gray-200 hover:bg-gray-100">
                  <td className="py-3 px-6 text-left whitespace-nowrap">{data.date}</td>
                  <td className="py-3 px-6 text-right">${data.totalSales.toFixed(2)}</td>
                  <td className="py-3 px-6 text-right">{data.orderCount}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
      <div className="mt-4">
        <h4 className="text-lg font-semibold mb-2">Summary</h4>
        <p>Total Sales: ${salesData.reduce((sum, data) => sum + data.totalSales, 0).toFixed(2)}</p>
        <p>Total Orders: {salesData.reduce((sum, data) => sum + data.orderCount, 0)}</p>
        <p>Average Order Value: ${(salesData.reduce((sum, data) => sum + data.totalSales, 0) / salesData.reduce((sum, data) => sum + data.orderCount, 0) || 0).toFixed(2)}</p>
      </div>
    </div>
  );
};

export default SalesAnalytics;

================
File: src/components/features/CRM/SalesOrderManagement/SalesOrderCreation.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../../firebase';
import { Plus, Download, Edit, Trash2, Package } from 'lucide-react';

interface SalesOrder {
  id: string;
  customerName: string;
  orderDate: Date;
  items: { name: string; quantity: number; price: number }[];
  totalAmount: number;
  status: 'quote' | 'order' | 'invoice' | 'paid';
  createdAt: Date;
}

const SalesOrderCreation: React.FC = () => {
  const [orders, setOrders] = useState<SalesOrder[]>([]);
  const [newOrder, setNewOrder] = useState<Omit<SalesOrder, 'id' | 'createdAt'>>({
    customerName: '',
    orderDate: new Date(),
    items: [],
    totalAmount: 0,
    status: 'quote',
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'salesOrders'), orderBy('createdAt', 'desc'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const ordersData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        orderDate: doc.data().orderDate.toDate(),
        createdAt: doc.data().createdAt.toDate(),
      } as SalesOrder));
      setOrders(ordersData);
    });
    return unsubscribe;
  }, []);

  const handleAddOrder = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'salesOrders'), {
        ...newOrder,
        createdAt: new Date(),
      });
      setNewOrder({
        customerName: '',
        orderDate: new Date(),
        items: [],
        totalAmount: 0,
        status: 'quote',
      });
    } catch (error) {
      console.error("Error adding order: ", error);
    }
  };

  const handleUpdateOrder = async (id: string, updatedOrder: Partial<SalesOrder>) => {
    try {
      await updateDoc(doc(db, 'salesOrders', id), updatedOrder);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating order: ", error);
    }
  };

  const handleDeleteOrder = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'salesOrders', id));
    } catch (error) {
      console.error("Error deleting order: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = orders.map(order => 
      `${order.customerName},${order.orderDate.toISOString()},${order.totalAmount},${order.status},${order.createdAt.toISOString()}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'sales_orders.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Sales Order Creation</h3>
      <form onSubmit={handleAddOrder} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Customer Name"
            value={newOrder.customerName}
            onChange={(e) => setNewOrder({ ...newOrder, customerName: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="date"
            value={newOrder.orderDate.toISOString().split('T')[0]}
            onChange={(e) => setNewOrder({ ...newOrder, orderDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="number"
            placeholder="Total Amount"
            value={newOrder.totalAmount}
            onChange={(e) => setNewOrder({ ...newOrder, totalAmount: parseFloat(e.target.value) })}
            className="p-2 border rounded"
          />
          <select
            value={newOrder.status}
            onChange={(e) => setNewOrder({ ...newOrder, status: e.target.value as SalesOrder['status'] })}
            className="p-2 border rounded"
          >
            <option value="quote">Quote</option>
            <option value="order">Order</option>
            <option value="invoice">Invoice</option>
            <option value="paid">Paid</option>
          </select>
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add Order
        </button>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Customer</th>
            <th className="py-3 px-6 text-left">Order Date</th>
            <th className="py-3 px-6 text-right">Total Amount</th>
            <th className="py-3 px-6 text-left">Status</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {orders.map((order) => (
            <tr key={order.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{order.customerName}</td>
              <td className="py-3 px-6 text-left">{order.orderDate.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-right">${order.totalAmount.toFixed(2)}</td>
              <td className="py-3 px-6 text-left">
                <span className={`py-1 px-3 rounded-full text-xs ${
                  order.status === 'quote' ? 'bg-yellow-200 text-yellow-800' :
                  order.status === 'order' ? 'bg-blue-200 text-blue-800' :
                  order.status === 'invoice' ? 'bg-purple-200 text-purple-800' :
                  'bg-green-200 text-green-800'
                }`}>
                  {order.status}
                </span>
              </td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(order.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteOrder(order.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default SalesOrderCreation;

================
File: src/components/features/CRM/SalesPipeline.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Trash2, DollarSign } from 'lucide-react';

interface Deal {
  id: string;
  customerName: string;
  amount: number;
  stage: 'prospecting' | 'qualification' | 'proposal' | 'negotiation' | 'closed won' | 'closed lost';
  probability: number;
  expectedCloseDate: Date;
  notes: string;
  createdAt: Date;
}

const SalesPipeline: React.FC = () => {
  const [deals, setDeals] = useState<Deal[]>([]);
  const [newDeal, setNewDeal] = useState<Omit<Deal, 'id' | 'createdAt'>>({
    customerName: '',
    amount: 0,
    stage: 'prospecting',
    probability: 0,
    expectedCloseDate: new Date(),
    notes: '',
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'deals'), orderBy('createdAt', 'desc'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const dealsData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        expectedCloseDate: doc.data().expectedCloseDate.toDate(),
        createdAt: doc.data().createdAt.toDate(),
      } as Deal));
      setDeals(dealsData);
    });
    return unsubscribe;
  }, []);

  const handleAddDeal = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'deals'), {
        ...newDeal,
        createdAt: new Date(),
      });
      setNewDeal({
        customerName: '',
        amount: 0,
        stage: 'prospecting',
        probability: 0,
        expectedCloseDate: new Date(),
        notes: '',
      });
    } catch (error) {
      console.error("Error adding deal: ", error);
    }
  };

  const handleUpdateDeal = async (id: string, updatedDeal: Partial<Deal>) => {
    try {
      await updateDoc(doc(db, 'deals', id), updatedDeal);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating deal: ", error);
    }
  };

  const handleDeleteDeal = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'deals', id));
    } catch (error) {
      console.error("Error deleting deal: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = deals.map(deal => 
      `${deal.customerName},${deal.amount},${deal.stage},${deal.probability},${deal.expectedCloseDate.toISOString()},${deal.notes},${deal.createdAt.toISOString()}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'sales_pipeline.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Sales Pipeline</h3>
      <form onSubmit={handleAddDeal} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Customer Name"
            value={newDeal.customerName}
            onChange={(e) => setNewDeal({ ...newDeal, customerName: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="number"
            placeholder="Amount"
            value={newDeal.amount}
            onChange={(e) => setNewDeal({ ...newDeal, amount: parseFloat(e.target.value) })}
            className="p-2 border rounded"
          />
          <select
            value={newDeal.stage}
            onChange={(e) => setNewDeal({ ...newDeal, stage: e.target.value as Deal['stage'] })}
            className="p-2 border rounded"
          >
            <option value="prospecting">Prospecting</option>
            <option value="qualification">Qualification</option>
            <option value="proposal">Proposal</option>
            <option value="negotiation">Negotiation</option>
            <option value="closed won">Closed Won</option>
            <option value="closed lost">Closed Lost</option>
          </select>
          <input
            type="number"
            placeholder="Probability (%)"
            value={newDeal.probability}
            onChange={(e) => setNewDeal({ ...newDeal, probability: parseInt(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="date"
            value={newDeal.expectedCloseDate.toISOString().split('T')[0]}
            onChange={(e) => setNewDeal({ ...newDeal, expectedCloseDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
          <textarea
            placeholder="Notes"
            value={newDeal.notes}
            onChange={(e) => setNewDeal({ ...newDeal, notes: e.target.value })}
            className="p-2 border rounded"
          />
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add Deal
        </button>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Customer</th>
            <th className="py-3 px-6 text-right">Amount</th>
            <th className="py-3 px-6 text-left">Stage</th>
            <th className="py-3 px-6 text-right">Probability</th>
            <th className="py-3 px-6 text-left">Expected Close</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {deals.map((deal) => (
            <tr key={deal.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{deal.customerName}</td>
              <td className="py-3 px-6 text-right">
                <div className="flex items-center justify-end">
                  <DollarSign size={18} className="mr-2" />
                  {deal.amount.toFixed(2)}
                </div>
              </td>
              <td className="py-3 px-6 text-left">
                <span className={`py-1 px-3 rounded-full text-xs ${
                  deal.stage === 'closed won' ? 'bg-green-200 text-green-800' :
                  deal.stage === 'closed lost' ? 'bg-red-200 text-red-800' :
                  'bg-blue-200 text-blue-800'
                }`}>
                  {deal.stage}
                </span>
              </td>
              <td className="py-3 px-6 text-right">{deal.probability}%</td>
              <td className="py-3 px-6 text-left">{deal.expectedCloseDate.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(deal.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteDeal(deal.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default SalesPipeline;

================
File: src/components/features/Discuss.tsx
================
import React from 'react';

const Discuss: React.FC = () => {
  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">Discuss</h2>
      <p>This is the Discuss feature page. Implement your discussion functionality here.</p>
    </div>
  );
};

export default Discuss;

================
File: src/components/features/Employees.tsx
================
import React from 'react';

const Employees: React.FC = () => {
  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">Employees</h2>
      <p>This is the Employees feature page. Implement your employee management functionality here.</p>
    </div>
  );
};

export default Employees;

================
File: src/components/features/Expenses.tsx
================
import React from 'react';

const Expenses: React.FC = () => {
  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">Expenses</h2>
      <p>This is the Expenses feature page. Implement your expense tracking and management functionality here.</p>
    </div>
  );
};

export default Expenses;

================
File: src/components/features/FinanceAndAccounting.tsx
================
import React, { useState, useEffect } from 'react';
import { Book, DollarSign, CreditCard, FileText, BarChart2, Briefcase, Percent, PieChart } from 'lucide-react';
import GeneralLedger from './FinanceAndAccounting/GeneralLedger';
import AccountsPayable from './FinanceAndAccounting/AccountsPayable';
import AccountsReceivable from './FinanceAndAccounting/AccountsReceivable';
import ExpenseManagement from './FinanceAndAccounting/ExpenseManagement';
import AssetManagement from './FinanceAndAccounting/AssetManagement';
import BankReconciliation from './FinanceAndAccounting/BankReconciliation';
import TaxManagement from './FinanceAndAccounting/TaxManagement';
import FinancialReporting from './FinanceAndAccounting/FinancialReporting';

const FinanceAndAccounting: React.FC = () => {
  const [activeTab, setActiveTab] = useState('generalLedger');
  const [error, setError] = useState<string | null>(null);

  const tabs = [
    { id: 'generalLedger', name: 'General Ledger', icon: <Book /> },
    { id: 'accountsPayable', name: 'Accounts Payable', icon: <CreditCard /> },
    { id: 'accountsReceivable', name: 'Accounts Receivable', icon: <DollarSign /> },
    { id: 'expenseManagement', name: 'Expense Management', icon: <FileText /> },
    { id: 'assetManagement', name: 'Asset Management', icon: <Briefcase /> },
    { id: 'bankReconciliation', name: 'Bank Reconciliation', icon: <BarChart2 /> },
    { id: 'taxManagement', name: 'Tax Management', icon: <Percent /> },
    { id: 'financialReporting', name: 'Financial Reporting', icon: <PieChart /> },
  ];

  const renderComponent = () => {
    try {
      switch (activeTab) {
        case 'generalLedger':
          return <GeneralLedger />;
        case 'accountsPayable':
          return <AccountsPayable />;
        case 'accountsReceivable':
          return <AccountsReceivable />;
        case 'expenseManagement':
          return <ExpenseManagement />;
        case 'assetManagement':
          return <AssetManagement />;
        case 'bankReconciliation':
          return <BankReconciliation />;
        case 'taxManagement':
          return <TaxManagement />;
        case 'financialReporting':
          return <FinancialReporting />;
        default:
          return <GeneralLedger />;
      }
    } catch (err) {
      console.error("Error rendering component:", err);
      setError("An error occurred while loading the component. Please try again.");
      return null;
    }
  };

  useEffect(() => {
    // Reset error when changing tabs
    setError(null);
  }, [activeTab]);

  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-6">Finance & Accounting</h2>
      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4 mb-6">
        {tabs.map((tab) => (
          <button
            key={tab.id}
            className={`flex flex-col items-center justify-center p-4 rounded-lg transition-colors duration-200 ${
              activeTab === tab.id
                ? 'bg-blue-500 text-white'
                : 'bg-white text-gray-600 hover:bg-gray-100'
            }`}
            onClick={() => setActiveTab(tab.id)}
          >
            <div className="text-3xl mb-2">{tab.icon}</div>
            <span className="text-sm text-center">{tab.name}</span>
          </button>
        ))}
      </div>
      <div className="bg-white rounded-lg shadow p-6">
        {error ? (
          <div className="text-red-500 mb-4">{error}</div>
        ) : (
          renderComponent()
        )}
      </div>
    </div>
  );
};

export default FinanceAndAccounting;

================
File: src/components/features/FinanceAndAccounting/AccountsPayable.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, limit, updateDoc, doc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Save } from 'lucide-react';

interface Invoice {
  id: string;
  vendorName: string;
  invoiceNumber: string;
  amount: number;
  dueDate: Date;
  status: 'pending' | 'paid' | 'overdue';
}

const AccountsPayable: React.FC = () => {
  const [invoices, setInvoices] = useState<Invoice[]>([]);
  const [newInvoice, setNewInvoice] = useState<Omit<Invoice, 'id'>>({
    vendorName: '',
    invoiceNumber: '',
    amount: 0,
    dueDate: new Date(),
    status: 'pending',
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'accountsPayable'), orderBy('dueDate'), limit(50));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const invoiceData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        dueDate: doc.data().dueDate.toDate(),
      } as Invoice));
      setInvoices(invoiceData);
    });
    return unsubscribe;
  }, []);

  const handleAddInvoice = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'accountsPayable'), {
        ...newInvoice,
        dueDate: new Date(newInvoice.dueDate),
      });
      setNewInvoice({
        vendorName: '',
        invoiceNumber: '',
        amount: 0,
        dueDate: new Date(),
        status: 'pending',
      });
    } catch (error) {
      console.error("Error adding invoice: ", error);
    }
  };

  const handleUpdateInvoice = async (id: string, updatedInvoice: Partial<Invoice>) => {
    try {
      await updateDoc(doc(db, 'accountsPayable', id), updatedInvoice);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating invoice: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = invoices.map(invoice => 
      `${invoice.vendorName},${invoice.invoiceNumber},${invoice.amount},${invoice.dueDate.toISOString()},${invoice.status}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'accounts_payable.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">Accounts Payable</h2>
      <form onSubmit={handleAddInvoice} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Vendor Name"
            value={newInvoice.vendorName}
            onChange={(e) => setNewInvoice({ ...newInvoice, vendorName: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Invoice Number"
            value={newInvoice.invoiceNumber}
            onChange={(e) => setNewInvoice({ ...newInvoice, invoiceNumber: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="number"
            placeholder="Amount"
            value={newInvoice.amount}
            onChange={(e) => setNewInvoice({ ...newInvoice, amount: parseFloat(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="date"
            value={newInvoice.dueDate.toISOString().split('T')[0]}
            onChange={(e) => setNewInvoice({ ...newInvoice, dueDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
          <select
            value={newInvoice.status}
            onChange={(e) => setNewInvoice({ ...newInvoice, status: e.target.value as 'pending' | 'paid' | 'overdue' })}
            className="p-2 border rounded"
          >
            <option value="pending">Pending</option>
            <option value="paid">Paid</option>
            <option value="overdue">Overdue</option>
          </select>
          <button type="submit" className="bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
            <Plus size={24} />
          </button>
        </div>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Vendor</th>
            <th className="py-3 px-6 text-left">Invoice #</th>
            <th className="py-3 px-6 text-right">Amount</th>
            <th className="py-3 px-6 text-left">Due Date</th>
            <th className="py-3 px-6 text-left">Status</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {invoices.map((invoice) => (
            <tr key={invoice.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{invoice.vendorName}</td>
              <td className="py-3 px-6 text-left">{invoice.invoiceNumber}</td>
              <td className="py-3 px-6 text-right">${invoice.amount.toFixed(2)}</td>
              <td className="py-3 px-6 text-left">{invoice.dueDate.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-left">
                {editingId === invoice.id ? (
                  <select
                    value={invoice.status}
                    onChange={(e) => handleUpdateInvoice(invoice.id, { status: e.target.value as 'pending' | 'paid' | 'overdue' })}
                    className="p-1 border rounded"
                  >
                    <option value="pending">Pending</option>
                    <option value="paid">Paid</option>
                    <option value="overdue">Overdue</option>
                  </select>
                ) : (
                  <span className={`py-1 px-3 rounded-full text-xs ${
                    invoice.status === 'paid' ? 'bg-green-200 text-green-800' :
                    invoice.status === 'overdue' ? 'bg-red-200 text-red-800' :
                    'bg-yellow-200 text-yellow-800'
                  }`}>
                    {invoice.status}
                  </span>
                )}
              </td>
              <td className="py-3 px-6 text-center">
                {editingId === invoice.id ? (
                  <button
                    onClick={() => setEditingId(null)}
                    className="text-green-500 hover:text-green-700"
                  >
                    <Save size={18} />
                  </button>
                ) : (
                  <button
                    onClick={() => setEditingId(invoice.id)}
                    className="text-blue-500 hover:text-blue-700"
                  >
                    <Edit size={18} />
                  </button>
                )}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default AccountsPayable;

================
File: src/components/features/FinanceAndAccounting/AccountsReceivable.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, limit, updateDoc, doc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Save } from 'lucide-react';

interface Invoice {
  id: string;
  customerName: string;
  invoiceNumber: string;
  amount: number;
  dueDate: Date;
  status: 'pending' | 'paid' | 'overdue';
}

const AccountsReceivable: React.FC = () => {
  const [invoices, setInvoices] = useState<Invoice[]>([]);
  const [newInvoice, setNewInvoice] = useState<Omit<Invoice, 'id'>>({
    customerName: '',
    invoiceNumber: '',
    amount: 0,
    dueDate: new Date(),
    status: 'pending',
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'accountsReceivable'), orderBy('dueDate'), limit(50));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const invoiceData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        dueDate: doc.data().dueDate.toDate(),
      } as Invoice));
      setInvoices(invoiceData);
    });
    return unsubscribe;
  }, []);

  const handleAddInvoice = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'accountsReceivable'), {
        ...newInvoice,
        dueDate: new Date(newInvoice.dueDate),
      });
      setNewInvoice({
        customerName: '',
        invoiceNumber: '',
        amount: 0,
        dueDate: new Date(),
        status: 'pending',
      });
    } catch (error) {
      console.error("Error adding invoice: ", error);
    }
  };

  const handleUpdateInvoice = async (id: string, updatedInvoice: Partial<Invoice>) => {
    try {
      await updateDoc(doc(db, 'accountsReceivable', id), updatedInvoice);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating invoice: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = invoices.map(invoice => 
      `${invoice.customerName},${invoice.invoiceNumber},${invoice.amount},${invoice.dueDate.toISOString()},${invoice.status}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'accounts_receivable.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">Accounts Receivable</h2>
      <form onSubmit={handleAddInvoice} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Customer Name"
            value={newInvoice.customerName}
            onChange={(e) => setNewInvoice({ ...newInvoice, customerName: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Invoice Number"
            value={newInvoice.invoiceNumber}
            onChange={(e) => setNewInvoice({ ...newInvoice, invoiceNumber: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="number"
            placeholder="Amount"
            value={newInvoice.amount}
            onChange={(e) => setNewInvoice({ ...newInvoice, amount: parseFloat(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="date"
            value={newInvoice.dueDate.toISOString().split('T')[0]}
            onChange={(e) => setNewInvoice({ ...newInvoice, dueDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
          <select
            value={newInvoice.status}
            onChange={(e) => setNewInvoice({ ...newInvoice, status: e.target.value as 'pending' | 'paid' | 'overdue' })}
            className="p-2 border rounded"
          >
            <option value="pending">Pending</option>
            <option value="paid">Paid</option>
            <option value="overdue">Overdue</option>
          </select>
          <button type="submit" className="bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
            <Plus size={24} />
          </button>
        </div>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Customer</th>
            <th className="py-3 px-6 text-left">Invoice #</th>
            <th className="py-3 px-6 text-right">Amount</th>
            <th className="py-3 px-6 text-left">Due Date</th>
            <th className="py-3 px-6 text-left">Status</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {invoices.map((invoice) => (
            <tr key={invoice.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{invoice.customerName}</td>
              <td className="py-3 px-6 text-left">{invoice.invoiceNumber}</td>
              <td className="py-3 px-6 text-right">${invoice.amount.toFixed(2)}</td>
              <td className="py-3 px-6 text-left">{invoice.dueDate.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-left">
                {editingId === invoice.id ? (
                  <select
                    value={invoice.status}
                    onChange={(e) => handleUpdateInvoice(invoice.id, { status: e.target.value as 'pending' | 'paid' | 'overdue' })}
                    className="p-1 border rounded"
                  >
                    <option value="pending">Pending</option>
                    <option value="paid">Paid</option>
                    <option value="overdue">Overdue</option>
                  </select>
                ) : (
                  <span className={`py-1 px-3 rounded-full text-xs ${
                    invoice.status === 'paid' ? 'bg-green-200 text-green-800' :
                    invoice.status === 'overdue' ? 'bg-red-200 text-red-800' :
                    'bg-yellow-200 text-yellow-800'
                  }`}>
                    {invoice.status}
                  </span>
                )}
              </td>
              <td className="py-3 px-6 text-center">
                {editingId === invoice.id ? (
                  <button
                    onClick={() => setEditingId(null)}
                    className="text-green-500 hover:text-green-700"
                  >
                    <Save size={18} />
                  </button>
                ) : (
                  <button
                    onClick={() => setEditingId(invoice.id)}
                    className="text-blue-500 hover:text-blue-700"
                  >
                    <Edit size={18} />
                  </button>
                )}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default AccountsReceivable;

================
File: src/components/features/FinanceAndAccounting/AssetManagement.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, limit, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Save, Trash2 } from 'lucide-react';

interface Asset {
  id: string;
  name: string;
  purchaseDate: Date;
  purchasePrice: number;
  currentValue: number;
  category: string;
  depreciationMethod: 'straight-line' | 'declining-balance' | 'units-of-production';
  usefulLife: number;
}

const AssetManagement: React.FC = () => {
  const [assets, setAssets] = useState<Asset[]>([]);
  const [newAsset, setNewAsset] = useState<Omit<Asset, 'id'>>({
    name: '',
    purchaseDate: new Date(),
    purchasePrice: 0,
    currentValue: 0,
    category: '',
    depreciationMethod: 'straight-line',
    usefulLife: 0,
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'assets'), orderBy('purchaseDate', 'desc'), limit(50));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const assetData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        purchaseDate: doc.data().purchaseDate.toDate(),
      } as Asset));
      setAssets(assetData);
    });
    return unsubscribe;
  }, []);

  const handleAddAsset = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'assets'), {
        ...newAsset,
        purchaseDate: new Date(newAsset.purchaseDate),
      });
      setNewAsset({
        name: '',
        purchaseDate: new Date(),
        purchasePrice: 0,
        currentValue: 0,
        category: '',
        depreciationMethod: 'straight-line',
        usefulLife: 0,
      });
    } catch (error) {
      console.error("Error adding asset: ", error);
    }
  };

  const handleUpdateAsset = async (id: string, updatedAsset: Partial<Asset>) => {
    try {
      await updateDoc(doc(db, 'assets', id), updatedAsset);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating asset: ", error);
    }
  };

  const handleDeleteAsset = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'assets', id));
    } catch (error) {
      console.error("Error deleting asset: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = assets.map(asset => 
      `${asset.name},${asset.purchaseDate.toISOString()},${asset.purchasePrice},${asset.currentValue},${asset.category},${asset.depreciationMethod},${asset.usefulLife}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'assets.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">Asset Management</h2>
      <form onSubmit={handleAddAsset} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Asset Name"
            value={newAsset.name}
            onChange={(e) => setNewAsset({ ...newAsset, name: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="date"
            value={newAsset.purchaseDate.toISOString().split('T')[0]}
            onChange={(e) => setNewAsset({ ...newAsset, purchaseDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="number"
            placeholder="Purchase Price"
            value={newAsset.purchasePrice}
            onChange={(e) => setNewAsset({ ...newAsset, purchasePrice: parseFloat(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="number"
            placeholder="Current Value"
            value={newAsset.currentValue}
            onChange={(e) => setNewAsset({ ...newAsset, currentValue: parseFloat(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Category"
            value={newAsset.category}
            onChange={(e) => setNewAsset({ ...newAsset, category: e.target.value })}
            className="p-2 border rounded"
          />
          <select
            value={newAsset.depreciationMethod}
            onChange={(e) => setNewAsset({ ...newAsset, depreciationMethod: e.target.value as 'straight-line' | 'declining-balance' | 'units-of-production' })}
            className="p-2 border rounded"
          >
            <option value="straight-line">Straight Line</option>
            <option value="declining-balance">Declining Balance</option>
            <option value="units-of-production">Units of Production</option>
          </select>
          <input
            type="number"
            placeholder="Useful Life (years)"
            value={newAsset.usefulLife}
            onChange={(e) => setNewAsset({ ...newAsset, usefulLife: parseInt(e.target.value) })}
            className="p-2 border rounded"
          />
          <button type="submit" className="bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
            <Plus size={24} />
          </button>
        </div>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Name</th>
            <th className="py-3 px-6 text-left">Purchase Date</th>
            <th className="py-3 px-6 text-right">Purchase Price</th>
            <th className="py-3 px-6 text-right">Current Value</th>
            <th className="py-3 px-6 text-left">Category</th>
            <th className="py-3 px-6 text-left">Depreciation Method</th>
            <th className="py-3 px-6 text-right">Useful Life</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {assets.map((asset) => (
            <tr key={asset.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{asset.name}</td>
              <td className="py-3 px-6 text-left">{asset.purchaseDate.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-right">${asset.purchasePrice.toFixed(2)}</td>
              <td className="py-3 px-6 text-right">${asset.currentValue.toFixed(2)}</td>
              <td className="py-3 px-6 text-left">{asset.category}</td>
              <td className="py-3 px-6 text-left">{asset.depreciationMethod}</td>
              <td className="py-3 px-6 text-right">{asset.usefulLife} years</td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(asset.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteAsset(asset.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default AssetManagement;

================
File: src/components/features/FinanceAndAccounting/BankReconciliation.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, limit, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Save, Trash2 } from 'lucide-react';

interface BankTransaction {
  id: string;
  date: Date;
  description: string;
  amount: number;
  type: 'credit' | 'debit';
  reconciled: boolean;
}

const BankReconciliation: React.FC = () => {
  const [transactions, setTransactions] = useState<BankTransaction[]>([]);
  const [newTransaction, setNewTransaction] = useState<Omit<BankTransaction, 'id'>>({
    date: new Date(),
    description: '',
    amount: 0,
    type: 'credit',
    reconciled: false,
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'bankTransactions'), orderBy('date', 'desc'), limit(50));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const transactionData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        date: doc.data().date.toDate(),
      } as BankTransaction));
      setTransactions(transactionData);
    });
    return unsubscribe;
  }, []);

  const handleAddTransaction = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'bankTransactions'), {
        ...newTransaction,
        date: new Date(newTransaction.date),
      });
      setNewTransaction({
        date: new Date(),
        description: '',
        amount: 0,
        type: 'credit',
        reconciled: false,
      });
    } catch (error) {
      console.error("Error adding transaction: ", error);
    }
  };

  const handleUpdateTransaction = async (id: string, updatedTransaction: Partial<BankTransaction>) => {
    try {
      await updateDoc(doc(db, 'bankTransactions', id), updatedTransaction);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating transaction: ", error);
    }
  };

  const handleDeleteTransaction = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'bankTransactions', id));
    } catch (error) {
      console.error("Error deleting transaction: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = transactions.map(transaction => 
      `${transaction.date.toISOString()},${transaction.description},${transaction.amount},${transaction.type},${transaction.reconciled}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'bank_transactions.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">Bank Reconciliation</h2>
      <form onSubmit={handleAddTransaction} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="date"
            value={newTransaction.date.toISOString().split('T')[0]}
            onChange={(e) => setNewTransaction({ ...newTransaction, date: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Description"
            value={newTransaction.description}
            onChange={(e) => setNewTransaction({ ...newTransaction, description: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="number"
            placeholder="Amount"
            value={newTransaction.amount}
            onChange={(e) => setNewTransaction({ ...newTransaction, amount: parseFloat(e.target.value) })}
            className="p-2 border rounded"
          />
          <select
            value={newTransaction.type}
            onChange={(e) => setNewTransaction({ ...newTransaction, type: e.target.value as 'credit' | 'debit' })}
            className="p-2 border rounded"
          >
            <option value="credit">Credit</option>
            <option value="debit">Debit</option>
          </select>
          <div className="flex items-center">
            <input
              type="checkbox"
              checked={newTransaction.reconciled}
              onChange={(e) => setNewTransaction({ ...newTransaction, reconciled: e.target.checked })}
              className="mr-2"
            />
            <label>Reconciled</label>
          </div>
          <button type="submit" className="bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
            <Plus size={24} />
          </button>
        </div>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Date</th>
            <th className="py-3 px-6 text-left">Description</th>
            <th className="py-3 px-6 text-right">Amount</th>
            <th className="py-3 px-6 text-left">Type</th>
            <th className="py-3 px-6 text-center">Reconciled</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {transactions.map((transaction) => (
            <tr key={transaction.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{transaction.date.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-left">{transaction.description}</td>
              <td className="py-3 px-6 text-right">${transaction.amount.toFixed(2)}</td>
              <td className="py-3 px-6 text-left">{transaction.type}</td>
              <td className="py-3 px-6 text-center">
                <input
                  type="checkbox"
                  checked={transaction.reconciled}
                  onChange={(e) => handleUpdateTransaction(transaction.id, { reconciled: e.target.checked })}
                  className="form-checkbox h-5 w-5 text-blue-600"
                />
              </td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(transaction.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteTransaction(transaction.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default BankReconciliation;

================
File: src/components/features/FinanceAndAccounting/ExpenseManagement.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, limit, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Save, Trash2 } from 'lucide-react';

interface Expense {
  id: string;
  date: Date;
  description: string;
  amount: number;
  category: string;
  status: 'pending' | 'approved' | 'rejected';
}

const ExpenseManagement: React.FC = () => {
  const [expenses, setExpenses] = useState<Expense[]>([]);
  const [newExpense, setNewExpense] = useState<Omit<Expense, 'id'>>({
    date: new Date(),
    description: '',
    amount: 0,
    category: '',
    status: 'pending',
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'expenses'), orderBy('date', 'desc'), limit(50));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const expenseData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        date: doc.data().date.toDate(),
      } as Expense));
      setExpenses(expenseData);
    });
    return unsubscribe;
  }, []);

  const handleAddExpense = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'expenses'), {
        ...newExpense,
        date: new Date(newExpense.date),
      });
      setNewExpense({
        date: new Date(),
        description: '',
        amount: 0,
        category: '',
        status: 'pending',
      });
    } catch (error) {
      console.error("Error adding expense: ", error);
    }
  };

  const handleUpdateExpense = async (id: string, updatedExpense: Partial<Expense>) => {
    try {
      await updateDoc(doc(db, 'expenses', id), updatedExpense);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating expense: ", error);
    }
  };

  const handleDeleteExpense = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'expenses', id));
    } catch (error) {
      console.error("Error deleting expense: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = expenses.map(expense => 
      `${expense.date.toISOString()},${expense.description},${expense.amount},${expense.category},${expense.status}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'expenses.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">Expense Management</h2>
      <form onSubmit={handleAddExpense} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="date"
            value={newExpense.date.toISOString().split('T')[0]}
            onChange={(e) => setNewExpense({ ...newExpense, date: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Description"
            value={newExpense.description}
            onChange={(e) => setNewExpense({ ...newExpense, description: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="number"
            placeholder="Amount"
            value={newExpense.amount}
            onChange={(e) => setNewExpense({ ...newExpense, amount: parseFloat(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Category"
            value={newExpense.category}
            onChange={(e) => setNewExpense({ ...newExpense, category: e.target.value })}
            className="p-2 border rounded"
          />
          <select
            value={newExpense.status}
            onChange={(e) => setNewExpense({ ...newExpense, status: e.target.value as 'pending' | 'approved' | 'rejected' })}
            className="p-2 border rounded"
          >
            <option value="pending">Pending</option>
            <option value="approved">Approved</option>
            <option value="rejected">Rejected</option>
          </select>
          <button type="submit" className="bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
            <Plus size={24} />
          </button>
        </div>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Date</th>
            <th className="py-3 px-6 text-left">Description</th>
            <th className="py-3 px-6 text-right">Amount</th>
            <th className="py-3 px-6 text-left">Category</th>
            <th className="py-3 px-6 text-left">Status</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {expenses.map((expense) => (
            <tr key={expense.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{expense.date.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-left">{expense.description}</td>
              <td className="py-3 px-6 text-right">${expense.amount.toFixed(2)}</td>
              <td className="py-3 px-6 text-left">{expense.category}</td>
              <td className="py-3 px-6 text-left">
                {editingId === expense.id ? (
                  <select
                    value={expense.status}
                    onChange={(e) => handleUpdateExpense(expense.id, { status: e.target.value as 'pending' | 'approved' | 'rejected' })}
                    className="p-1 border rounded"
                  >
                    <option value="pending">Pending</option>
                    <option value="approved">Approved</option>
                    <option value="rejected">Rejected</option>
                  </select>
                ) : (
                  <span className={`py-1 px-3 rounded-full text-xs ${
                    expense.status === 'approved' ? 'bg-green-200 text-green-800' :
                    expense.status === 'rejected' ? 'bg-red-200 text-red-800' :
                    'bg-yellow-200 text-yellow-800'
                  }`}>
                    {expense.status}
                  </span>
                )}
              </td>
              <td className="py-3 px-6 text-center">
                {editingId === expense.id ? (
                  <button
                    onClick={() => setEditingId(null)}
                    className="text-green-500 hover:text-green-700 mr-2"
                  >
                    <Save size={18} />
                  </button>
                ) : (
                  <button
                    onClick={() => setEditingId(expense.id)}
                    className="text-blue-500 hover:text-blue-700 mr-2"
                  >
                    <Edit size={18} />
                  </button>
                )}
                <button
                  onClick={() => handleDeleteExpense(expense.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ExpenseManagement;

================
File: src/components/features/FinanceAndAccounting/FinancialReporting.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, query, getDocs, where, Timestamp } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Download, FileText } from 'lucide-react';

interface FinancialData {
  revenue: number;
  expenses: number;
  assets: number;
  liabilities: number;
}

const FinancialReporting: React.FC = () => {
  const [financialData, setFinancialData] = useState<FinancialData>({
    revenue: 0,
    expenses: 0,
    assets: 0,
    liabilities: 0,
  });
  const [reportType, setReportType] = useState<'income' | 'balance' | 'cashflow'>('income');
  const [startDate, setStartDate] = useState(new Date(new Date().getFullYear(), 0, 1));
  const [endDate, setEndDate] = useState(new Date());

  useEffect(() => {
    fetchFinancialData();
  }, [reportType, startDate, endDate]);

  const fetchFinancialData = async () => {
    try {
      const revenueQuery = query(
        collection(db, 'transactions'),
        where('type', '==', 'income'),
        where('date', '>=', Timestamp.fromDate(startDate)),
        where('date', '<=', Timestamp.fromDate(endDate))
      );
      const expensesQuery = query(
        collection(db, 'transactions'),
        where('type', '==', 'expense'),
        where('date', '>=', Timestamp.fromDate(startDate)),
        where('date', '<=', Timestamp.fromDate(endDate))
      );
      const assetsQuery = query(collection(db, 'assets'));
      const liabilitiesQuery = query(collection(db, 'liabilities'));

      const [revenueSnapshot, expensesSnapshot, assetsSnapshot, liabilitiesSnapshot] = await Promise.all([
        getDocs(revenueQuery),
        getDocs(expensesQuery),
        getDocs(assetsQuery),
        getDocs(liabilitiesQuery)
      ]);

      const revenue = revenueSnapshot.docs.reduce((sum, doc) => sum + doc.data().amount, 0);
      const expenses = expensesSnapshot.docs.reduce((sum, doc) => sum + doc.data().amount, 0);
      const assets = assetsSnapshot.docs.reduce((sum, doc) => sum + doc.data().currentValue, 0);
      const liabilities = liabilitiesSnapshot.docs.reduce((sum, doc) => sum + doc.data().amount, 0);

      setFinancialData({ revenue, expenses, assets, liabilities });
    } catch (error) {
      console.error('Error fetching financial data:', error);
    }
  };

  const generateReport = () => {
    let report = '';
    switch (reportType) {
      case 'income':
        report = `Income Statement\n\nRevenue: $${financialData.revenue.toFixed(2)}\nExpenses: $${financialData.expenses.toFixed(2)}\nNet Income: $${(financialData.revenue - financialData.expenses).toFixed(2)}`;
        break;
      case 'balance':
        report = `Balance Sheet\n\nAssets: $${financialData.assets.toFixed(2)}\nLiabilities: $${financialData.liabilities.toFixed(2)}\nEquity: $${(financialData.assets - financialData.liabilities).toFixed(2)}`;
        break;
      case 'cashflow':
        report = `Cash Flow Statement\n\nCash from Operations: $${(financialData.revenue - financialData.expenses).toFixed(2)}\nCash from Investing: $0.00\nCash from Financing: $0.00\nNet Cash Flow: $${(financialData.revenue - financialData.expenses).toFixed(2)}`;
        break;
    }
    return report;
  };

  const handleExport = () => {
    const report = generateReport();
    const blob = new Blob([report], { type: 'text/plain;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', `${reportType}_report.txt`);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">Financial Reporting</h2>
      <div className="mb-4">
        <select
          value={reportType}
          onChange={(e) => setReportType(e.target.value as 'income' | 'balance' | 'cashflow')}
          className="p-2 border rounded mr-2"
        >
          <option value="income">Income Statement</option>
          <option value="balance">Balance Sheet</option>
          <option value="cashflow">Cash Flow Statement</option>
        </select>
        <input
          type="date"
          value={startDate.toISOString().split('T')[0]}
          onChange={(e) => setStartDate(new Date(e.target.value))}
          className="p-2 border rounded mr-2"
        />
        <input
          type="date"
          value={endDate.toISOString().split('T')[0]}
          onChange={(e) => setEndDate(new Date(e.target.value))}
          className="p-2 border rounded mr-2"
        />
        <button
          onClick={handleExport}
          className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
        >
          <Download size={18} className="mr-2" />
          Export Report
        </button>
      </div>
      <div className="bg-white p-4 rounded-lg shadow">
        <h3 className="text-xl font-semibold mb-2">
          {reportType === 'income' ? 'Income Statement' :
           reportType === 'balance' ? 'Balance Sheet' :
           'Cash Flow Statement'}
        </h3>
        <pre className="whitespace-pre-wrap">{generateReport()}</pre>
      </div>
    </div>
  );
};

export default FinancialReporting;

================
File: src/components/features/FinanceAndAccounting/GeneralLedger.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, limit } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download } from 'lucide-react';

interface LedgerEntry {
  id: string;
  date: Date;
  description: string;
  debit: number;
  credit: number;
  account: string;
}

const GeneralLedger: React.FC = () => {
  const [entries, setEntries] = useState<LedgerEntry[]>([]);
  const [newEntry, setNewEntry] = useState<Omit<LedgerEntry, 'id'>>({
    date: new Date(),
    description: '',
    debit: 0,
    credit: 0,
    account: '',
  });
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'generalLedger'), orderBy('date', 'desc'), limit(50));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const ledgerEntries = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        date: doc.data().date.toDate(),
      } as LedgerEntry));
      setEntries(ledgerEntries);
    }, (err) => {
      console.error("Error fetching general ledger entries:", err);
      setError("Failed to load general ledger entries. Please try again later.");
    });
    return unsubscribe;
  }, []);

  const handleAddEntry = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'generalLedger'), {
        ...newEntry,
        date: new Date(newEntry.date),
        debit: Number(newEntry.debit) || 0,
        credit: Number(newEntry.credit) || 0,
      });
      setNewEntry({
        date: new Date(),
        description: '',
        debit: 0,
        credit: 0,
        account: '',
      });
      setError(null);
    } catch (error) {
      console.error("Error adding entry: ", error);
      setError("Failed to add entry. Please try again.");
    }
  };

  const handleExport = () => {
    // ... (export logic remains the same)
  };

  if (error) {
    return <div className="text-red-500 p-4">{error}</div>;
  }

  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">General Ledger</h2>
      <form onSubmit={handleAddEntry} className="mb-4">
        {/* ... (form fields remain the same) */}
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        {/* ... (table structure remains the same) */}
      </table>
    </div>
  );
};

export default GeneralLedger;

================
File: src/components/features/FinanceAndAccounting/TaxManagement.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, limit, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Save, Trash2 } from 'lucide-react';

interface TaxRecord {
  id: string;
  taxYear: number;
  taxType: string;
  amount: number;
  dueDate: Date;
  status: 'pending' | 'paid' | 'overdue';
  region: string;
}

const TaxManagement: React.FC = () => {
  const [taxRecords, setTaxRecords] = useState<TaxRecord[]>([]);
  const [newTaxRecord, setNewTaxRecord] = useState<Omit<TaxRecord, 'id'>>({
    taxYear: new Date().getFullYear(),
    taxType: '',
    amount: 0,
    dueDate: new Date(),
    status: 'pending',
    region: '',
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'taxRecords'), orderBy('dueDate'), limit(50));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const records = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        dueDate: doc.data().dueDate.toDate(),
      } as TaxRecord));
      setTaxRecords(records);
    });
    return unsubscribe;
  }, []);

  const handleAddTaxRecord = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'taxRecords'), {
        ...newTaxRecord,
        dueDate: new Date(newTaxRecord.dueDate),
      });
      setNewTaxRecord({
        taxYear: new Date().getFullYear(),
        taxType: '',
        amount: 0,
        dueDate: new Date(),
        status: 'pending',
        region: '',
      });
    } catch (error) {
      console.error("Error adding tax record: ", error);
    }
  };

  const handleUpdateTaxRecord = async (id: string, updatedRecord: Partial<TaxRecord>) => {
    try {
      await updateDoc(doc(db, 'taxRecords', id), updatedRecord);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating tax record: ", error);
    }
  };

  const handleDeleteTaxRecord = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'taxRecords', id));
    } catch (error) {
      console.error("Error deleting tax record: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = taxRecords.map(record => 
      `${record.taxYear},${record.taxType},${record.amount},${record.dueDate.toISOString()},${record.status},${record.region}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'tax_records.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">Tax Management</h2>
      <form onSubmit={handleAddTaxRecord} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="number"
            placeholder="Tax Year"
            value={newTaxRecord.taxYear}
            onChange={(e) => setNewTaxRecord({ ...newTaxRecord, taxYear: parseInt(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Tax Type"
            value={newTaxRecord.taxType}
            onChange={(e) => setNewTaxRecord({ ...newTaxRecord, taxType: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="number"
            placeholder="Amount"
            value={newTaxRecord.amount}
            onChange={(e) => setNewTaxRecord({ ...newTaxRecord, amount: parseFloat(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="date"
            value={newTaxRecord.dueDate.toISOString().split('T')[0]}
            onChange={(e) => setNewTaxRecord({ ...newTaxRecord, dueDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
          <select
            value={newTaxRecord.status}
            onChange={(e) => setNewTaxRecord({ ...newTaxRecord, status: e.target.value as 'pending' | 'paid' | 'overdue' })}
            className="p-2 border rounded"
          >
            <option value="pending">Pending</option>
            <option value="paid">Paid</option>
            <option value="overdue">Overdue</option>
          </select>
          <input
            type="text"
            placeholder="Region"
            value={newTaxRecord.region}
            onChange={(e) => setNewTaxRecord({ ...newTaxRecord, region: e.target.value })}
            className="p-2 border rounded"
          />
          <button type="submit" className="bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
            <Plus size={24} />
          </button>
        </div>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Tax Year</th>
            <th className="py-3 px-6 text-left">Tax Type</th>
            <th className="py-3 px-6 text-right">Amount</th>
            <th className="py-3 px-6 text-left">Due Date</th>
            <th className="py-3 px-6 text-left">Status</th>
            <th className="py-3 px-6 text-left">Region</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {taxRecords.map((record) => (
            <tr key={record.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{record.taxYear}</td>
              <td className="py-3 px-6 text-left">{record.taxType}</td>
              <td className="py-3 px-6 text-right">${record.amount.toFixed(2)}</td>
              <td className="py-3 px-6 text-left">{record.dueDate.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-left">
                <span className={`py-1 px-3 rounded-full text-xs ${
                  record.status === 'paid' ? 'bg-green-200 text-green-800' :
                  record.status === 'overdue' ? 'bg-red-200 text-red-800' :
                  'bg-yellow-200 text-yellow-800'
                }`}>
                  {record.status}
                </span>
              </td>
              <td className="py-3 px-6 text-left">{record.region}</td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(record.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteTaxRecord(record.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default TaxManagement;

================
File: src/components/features/HRManagement.tsx
================
import React, { useState } from 'react';
import { Users, DollarSign, Calendar, UserPlus, BarChart2, Settings } from 'lucide-react';
import EmployeeDatabase from './HRManagement/EmployeeDatabase';
import PayrollManagement from './HRManagement/PayrollManagement';
import AttendanceLeaveManagement from './HRManagement/AttendanceLeaveManagement';
import RecruitmentOnboarding from './HRManagement/RecruitmentOnboarding';
import PerformanceEvaluation from './HRManagement/PerformanceEvaluation';
import EmployeeSelfService from './HRManagement/EmployeeSelfService';

const HRManagement: React.FC = () => {
  const [activeTab, setActiveTab] = useState('employeeDatabase');

  const tabs = [
    { id: 'employeeDatabase', name: 'Employee Database', icon: <Users /> },
    { id: 'payrollManagement', name: 'Payroll Management', icon: <DollarSign /> },
    { id: 'attendanceLeave', name: 'Attendance & Leave', icon: <Calendar /> },
    { id: 'recruitmentOnboarding', name: 'Recruitment & Onboarding', icon: <UserPlus /> },
    { id: 'performanceEvaluation', name: 'Performance Evaluation', icon: <BarChart2 /> },
    { id: 'employeeSelfService', name: 'Employee Self-Service', icon: <Settings /> },
  ];

  const renderComponent = () => {
    switch (activeTab) {
      case 'employeeDatabase':
        return <EmployeeDatabase />;
      case 'payrollManagement':
        return <PayrollManagement />;
      case 'attendanceLeave':
        return <AttendanceLeaveManagement />;
      case 'recruitmentOnboarding':
        return <RecruitmentOnboarding />;
      case 'performanceEvaluation':
        return <PerformanceEvaluation />;
      case 'employeeSelfService':
        return <EmployeeSelfService />;
      default:
        return <EmployeeDatabase />;
    }
  };

  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-6">HR Management</h2>
      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-6 gap-4 mb-6">
        {tabs.map((tab) => (
          <button
            key={tab.id}
            className={`flex flex-col items-center justify-center p-4 rounded-lg transition-colors duration-200 ${
              activeTab === tab.id
                ? 'bg-blue-500 text-white'
                : 'bg-white text-gray-600 hover:bg-gray-100'
            }`}
            onClick={() => setActiveTab(tab.id)}
          >
            <div className="text-3xl mb-2">{tab.icon}</div>
            <span className="text-sm text-center">{tab.name}</span>
          </button>
        ))}
      </div>
      <div className="bg-white rounded-lg shadow p-6">
        {renderComponent()}
      </div>
    </div>
  );
};

export default HRManagement;

================
File: src/components/features/HRManagement/AttendanceLeaveManagement.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Save, Trash2 } from 'lucide-react';

interface AttendanceRecord {
  id: string;
  employeeId: string;
  employeeName: string;
  date: Date;
  checkIn: string;
  checkOut: string;
  status: 'present' | 'absent' | 'late' | 'half-day';
}

interface LeaveRequest {
  id: string;
  employeeId: string;
  employeeName: string;
  startDate: Date;
  endDate: Date;
  leaveType: 'sick' | 'vacation' | 'personal' | 'other';
  status: 'pending' | 'approved' | 'rejected';
  reason: string;
}

const AttendanceLeaveManagement: React.FC = () => {
  const [attendanceRecords, setAttendanceRecords] = useState<AttendanceRecord[]>([]);
  const [leaveRequests, setLeaveRequests] = useState<LeaveRequest[]>([]);
  const [newAttendance, setNewAttendance] = useState<Omit<AttendanceRecord, 'id'>>({
    employeeId: '',
    employeeName: '',
    date: new Date(),
    checkIn: '',
    checkOut: '',
    status: 'present',
  });
  const [newLeave, setNewLeave] = useState<Omit<LeaveRequest, 'id'>>({
    employeeId: '',
    employeeName: '',
    startDate: new Date(),
    endDate: new Date(),
    leaveType: 'sick',
    status: 'pending',
    reason: '',
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const attendanceQuery = query(collection(db, 'attendance'), orderBy('date', 'desc'));
    const leaveQuery = query(collection(db, 'leaveRequests'), orderBy('startDate', 'desc'));

    const unsubscribeAttendance = onSnapshot(attendanceQuery, (querySnapshot) => {
      const records = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        date: doc.data().date.toDate(),
      } as AttendanceRecord));
      setAttendanceRecords(records);
    });

    const unsubscribeLeave = onSnapshot(leaveQuery, (querySnapshot) => {
      const requests = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        startDate: doc.data().startDate.toDate(),
        endDate: doc.data().endDate.toDate(),
      } as LeaveRequest));
      setLeaveRequests(requests);
    });

    return () => {
      unsubscribeAttendance();
      unsubscribeLeave();
    };
  }, []);

  const handleAddAttendance = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'attendance'), {
        ...newAttendance,
        date: new Date(newAttendance.date),
      });
      setNewAttendance({
        employeeId: '',
        employeeName: '',
        date: new Date(),
        checkIn: '',
        checkOut: '',
        status: 'present',
      });
    } catch (error) {
      console.error("Error adding attendance record: ", error);
    }
  };

  const handleAddLeave = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'leaveRequests'), {
        ...newLeave,
        startDate: new Date(newLeave.startDate),
        endDate: new Date(newLeave.endDate),
      });
      setNewLeave({
        employeeId: '',
        employeeName: '',
        startDate: new Date(),
        endDate: new Date(),
        leaveType: 'sick',
        status: 'pending',
        reason: '',
      });
    } catch (error) {
      console.error("Error adding leave request: ", error);
    }
  };

  const handleUpdateAttendance = async (id: string, updatedRecord: Partial<AttendanceRecord>) => {
    try {
      await updateDoc(doc(db, 'attendance', id), updatedRecord);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating attendance record: ", error);
    }
  };

  const handleUpdateLeave = async (id: string, updatedRequest: Partial<LeaveRequest>) => {
    try {
      await updateDoc(doc(db, 'leaveRequests', id), updatedRequest);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating leave request: ", error);
    }
  };

  const handleDeleteAttendance = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'attendance', id));
    } catch (error) {
      console.error("Error deleting attendance record: ", error);
    }
  };

  const handleDeleteLeave = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'leaveRequests', id));
    } catch (error) {
      console.error("Error deleting leave request: ", error);
    }
  };

  const handleExportAttendance = () => {
    const csvContent = attendanceRecords.map(record => 
      `${record.employeeName},${record.date.toISOString()},${record.checkIn},${record.checkOut},${record.status}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'attendance_records.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  const handleExportLeave = () => {
    const csvContent = leaveRequests.map(request => 
      `${request.employeeName},${request.startDate.toISOString()},${request.endDate.toISOString()},${request.leaveType},${request.status},${request.reason}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'leave_requests.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Attendance & Leave Management</h3>
      
      {/* Attendance Section */}
      <div className="mb-8">
        <h4 className="text-lg font-semibold mb-2">Attendance</h4>
        <form onSubmit={handleAddAttendance} className="mb-4">
          <div className="grid grid-cols-2 gap-4">
            <input
              type="text"
              placeholder="Employee ID"
              value={newAttendance.employeeId}
              onChange={(e) => setNewAttendance({ ...newAttendance, employeeId: e.target.value })}
              className="p-2 border rounded"
            />
            <input
              type="text"
              placeholder="Employee Name"
              value={newAttendance.employeeName}
              onChange={(e) => setNewAttendance({ ...newAttendance, employeeName: etarget.value })}
              className="p-2 border rounded"
            />
            <input
              type="date"
              value={newAttendance.date.toISOString().split('T')[0]}
              onChange={(e) => setNewAttendance({ ...newAttendance, date: new Date(e.target.value) })}
              className="p-2 border rounded"
            />
            <input
              type="time"
              placeholder="Check In"
              value={newAttendance.checkIn}
              onChange={(e) => setNewAttendance({ ...newAttendance, checkIn: e.target.value })}
              className="p-2 border rounded"
            />
            <input
              type="time"
              placeholder="Check Out"
              value={newAttendance.checkOut}
              onChange={(e) => setNewAttendance({ ...newAttendance, checkOut: e.target.value })}
              className="p-2 border rounded"
            />
            <select
              value={newAttendance.status}
              onChange={(e) => setNewAttendance({ ...newAttendance, status: e.target.value as AttendanceRecord['status'] })}
              className="p-2 border rounded"
            >
              <option value="present">Present</option>
              <option value="absent">Absent</option>
              <option value="late">Late</option>
              <option value="half-day">Half Day</option>
            </select>
          </div>
          <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
            <Plus size={24} /> Add Attendance Record
          </button>
        </form>
        <button
          onClick={handleExportAttendance}
          className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
        >
          <Download size={18} className="mr-2" />
          Export Attendance CSV
        </button>
        <table className="w-full bg-white shadow-md rounded">
          <thead>
            <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
              <th className="py-3 px-6 text-left">Employee</th>
              <th className="py-3 px-6 text-left">Date</th>
              <th className="py-3 px-6 text-left">Check In</th>
              <th className="py-3 px-6 text-left">Check Out</th>
              <th className="py-3 px-6 text-left">Status</th>
              <th className="py-3 px-6 text-center">Actions</th>
            </tr>
          </thead>
          <tbody className="text-gray-600 text-sm font-light">
            {attendanceRecords.map((record) => (
              <tr key={record.id} className="border-b border-gray-200 hover:bg-gray-100">
                <td className="py-3 px-6 text-left whitespace-nowrap">{record.employeeName}</td>
                <td className="py-3 px-6 text-left">{record.date.toLocaleDateString()}</td>
                <td className="py-3 px-6 text-left">{record.checkIn}</td>
                <td className="py-3 px-6 text-left">{record.checkOut}</td>
                <td className="py-3 px-6 text-left">
                  <span className={`py-1 px-3 rounded-full text-xs ${
                    record.status === 'present' ? 'bg-green-200 text-green-800' :
                    record.status === 'absent' ? 'bg-red-200 text-red-800' :
                    record.status === 'late' ? 'bg-yellow-200 text-yellow-800' :
                    'bg-blue-200 text-blue-800'
                  }`}>
                    {record.status}
                  </span>
                </td>
                <td className="py-3 px-6 text-center">
                  <button
                    onClick={() => setEditingId(record.id)}
                    className="text-blue-500 hover:text-blue-700 mr-2"
                  >
                    <Edit size={18} />
                  </button>
                  <button
                    onClick={() => handleDeleteAttendance(record.id)}
                    className="text-red-500 hover:text-red-700"
                  >
                    <Trash2 size={18} />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Leave Section */}
      <div>
        <h4 className="text-lg font-semibold mb-2">Leave Requests</h4>
        <form onSubmit={handleAddLeave} className="mb-4">
          <div className="grid grid-cols-2 gap-4">
            <input
              type="text"
              placeholder="Employee ID"
              value={newLeave.employeeId}
              onChange={(e) => setNewLeave({ ...newLeave, employeeId: e.target.value })}
              className="p-2 border rounded"
            />
            <input
              type="text"
              placeholder="Employee Name"
              value={newLeave.employeeName}
              onChange={(e) => setNewLeave({ ...newLeave, employeeName: e.target.value })}
              className="p-2 border rounded"
            />
            <input
              type="date"
              placeholder="Start Date"
              value={newLeave.startDate.toISOString().split('T')[0]}
              onChange={(e) => setNewLeave({ ...newLeave, startDate: new Date(e.target.value) })}
              className="p-2 border rounded"
            />
            <input
              type="date"
              placeholder="End Date"
              value={newLeave.endDate.toISOString().split('T')[0]}
              onChange={(e) => setNewLeave({ ...newLeave, endDate: new Date(e.target.value) })}
              className="p-2 border rounded"
            />
            <select
              value={newLeave.leaveType}
              onChange={(e) => setNewLeave({ ...newLeave, leaveType: e.target.value as LeaveRequest['leaveType'] })}
              className="p-2 border rounded"
            >
              <option value="sick">Sick Leave</option>
              <option value="vacation">Vacation</option>
              <option value="personal">Personal Leave</option>
              <option value="other">Other</option>
            </select>
            <input
              type="text"
              placeholder="Reason"
              value={newLeave.reason}
              onChange={(e) => setNewLeave({ ...newLeave, reason: e.target.value })}
              className="p-2 border rounded"
            />
          </div>
          <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
            <Plus size={24} /> Add Leave Request
          </button>
        </form>
        <button
          onClick={handleExportLeave}
          className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
        >
          <Download size={18} className="mr-2" />
          Export Leave Requests CSV
        </button>
        <table className="w-full bg-white shadow-md rounded">
          <thead>
            <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
              <th className="py-3 px-6 text-left">Employee</th>
              <th className="py-3 px-6 text-left">Start Date</th>
              <th className="py-3 px-6 text-left">End Date</th>
              <th className="py-3 px-6 text-left">Leave Type</th>
              <th className="py-3 px-6 text-left">Status</th>
              <th className="py-3 px-6 text-left">Reason</th>
              <th className="py-3 px-6 text-center">Actions</th>
            </tr>
          </thead>
          <tbody className="text-gray-600 text-sm font-light">
            {leaveRequests.map((request) => (
              <tr key={request.id} className="border-b border-gray-200 hover:bg-gray-100">
                <td className="py-3 px-6 text-left whitespace-nowrap">{request.employeeName}</td>
                <td className="py-3 px-6 text-left">{request.startDate.toLocaleDateString()}</td>
                <td className="py-3 px-6 text-left">{request.endDate.toLocaleDateString()}</td>
                <td className="py-3 px-6 text-left">{request.leaveType}</td>
                <td className="py-3 px-6 text-left">
                  <span className={`py-1 px-3 rounded-full text-xs ${
                    request.status === 'approved' ? 'bg-green-200 text-green-800' :
                    request.status === 'rejected' ? 'bg-red-200 text-red-800' :
                    'bg-yellow-200 text-yellow-800'
                  }`}>
                    {request.status}
                  </span>
                </td>
                <td className="py-3 px-6 text-left">{request.reason}</td>
                <td className="py-3 px-6 text-center">
                  <button
                    onClick={() => setEditingId(request.id)}
                    className="text-blue-500 hover:text-blue-700 mr-2"
                  >
                    <Edit size={18} />
                  </button>
                  <button
                    onClick={() => handleDeleteLeave(request.id)}
                    className="text-red-500 hover:text-red-700"
                  >
                    <Trash2 size={18} />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default AttendanceLeaveManagement;

================
File: src/components/features/HRManagement/EmployeeDatabase.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Save, Trash2 } from 'lucide-react';

interface Employee {
  id: string;
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  position: string;
  department: string;
  hireDate: Date;
  salary: number;
}

const EmployeeDatabase: React.FC = () => {
  const [employees, setEmployees] = useState<Employee[]>([]);
  const [newEmployee, setNewEmployee] = useState<Omit<Employee, 'id'>>({
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    position: '',
    department: '',
    hireDate: new Date(),
    salary: 0,
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'employees'), orderBy('lastName'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const employeesData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        hireDate: doc.data().hireDate.toDate(),
      } as Employee));
      setEmployees(employeesData);
    });
    return unsubscribe;
  }, []);

  const handleAddEmployee = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'employees'), {
        ...newEmployee,
        hireDate: new Date(newEmployee.hireDate),
      });
      setNewEmployee({
        firstName: '',
        lastName: '',
        email: '',
        phone: '',
        position: '',
        department: '',
        hireDate: new Date(),
        salary: 0,
      });
    } catch (error) {
      console.error("Error adding employee: ", error);
    }
  };

  const handleUpdateEmployee = async (id: string, updatedEmployee: Partial<Employee>) => {
    try {
      await updateDoc(doc(db, 'employees', id), updatedEmployee);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating employee: ", error);
    }
  };

  const handleDeleteEmployee = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'employees', id));
    } catch (error) {
      console.error("Error deleting employee: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = employees.map(employee => 
      `${employee.firstName},${employee.lastName},${employee.email},${employee.phone},${employee.position},${employee.department},${employee.hireDate.toISOString()},${employee.salary}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'employees.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Employee Database</h3>
      <form onSubmit={handleAddEmployee} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="First Name"
            value={newEmployee.firstName}
            onChange={(e) => setNewEmployee({ ...newEmployee, firstName: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Last Name"
            value={newEmployee.lastName}
            onChange={(e) => setNewEmployee({ ...newEmployee, lastName: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="email"
            placeholder="Email"
            value={newEmployee.email}
            onChange={(e) => setNewEmployee({ ...newEmployee, email: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="tel"
            placeholder="Phone"
            value={newEmployee.phone}
            onChange={(e) => setNewEmployee({ ...newEmployee, phone: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Position"
            value={newEmployee.position}
            onChange={(e) => setNewEmployee({ ...newEmployee, position: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Department"
            value={newEmployee.department}
            onChange={(e) => setNewEmployee({ ...newEmployee, department: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="date"
            value={newEmployee.hireDate.toISOString().split('T')[0]}
            onChange={(e) => setNewEmployee({ ...newEmployee, hireDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="number"
            placeholder="Salary"
            value={newEmployee.salary}
            onChange={(e) => setNewEmployee({ ...newEmployee, salary: parseFloat(e.target.value) })}
            className="p-2 border rounded"
          />
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add Employee
        </button>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Name</th>
            <th className="py-3 px-6 text-left">Email</th>
            <th className="py-3 px-6 text-left">Phone</th>
            <th className="py-3 px-6 text-left">Position</th>
            <th className="py-3 px-6 text-left">Department</th>
            <th className="py-3 px-6 text-left">Hire Date</th>
            <th className="py-3 px-6 text-right">Salary</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {employees.map((employee) => (
            <tr key={employee.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">
                {employee.firstName} {employee.lastName}
              </td>
              <td className="py-3 px-6 text-left">{employee.email}</td>
              <td className="py-3 px-6 text-left">{employee.phone}</td>
              <td className="py-3 px-6 text-left">{employee.position}</td>
              <td className="py-3 px-6 text-left">{employee.department}</td>
              <td className="py-3 px-6 text-left">{employee.hireDate.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-right">${employee.salary.toFixed(2)}</td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(employee.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteEmployee(employee.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default EmployeeDatabase;

================
File: src/components/features/HRManagement/EmployeeSelfService.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, query, where, getDocs, updateDoc, doc } from 'firebase/firestore';
import { db, auth } from '../../../firebase';
import { User, Mail, Phone, Calendar, Edit, Save } from 'lucide-react';

interface Employee {
  id: string;
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  dateOfBirth: string;
  address: string;
  emergencyContact: string;
}

const EmployeeSelfService: React.FC = () => {
  const [employee, setEmployee] = useState<Employee | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [editedEmployee, setEditedEmployee] = useState<Employee | null>(null);

  useEffect(() => {
    const fetchEmployeeData = async () => {
      const user = auth.currentUser;
      if (user) {
        const q = query(collection(db, 'employees'), where('email', '==', user.email));
        const querySnapshot = await getDocs(q);
        if (!querySnapshot.empty) {
          const employeeData = querySnapshot.docs[0].data() as Employee;
          employeeData.id = querySnapshot.docs[0].id;
          setEmployee(employeeData);
          setEditedEmployee(employeeData);
        }
      }
    };

    fetchEmployeeData();
  }, []);

  const handleEdit = () => {
    setIsEditing(true);
  };

  const handleSave = async () => {
    if (editedEmployee && employee) {
      try {
        await updateDoc(doc(db, 'employees', employee.id), editedEmployee);
        setEmployee(editedEmployee);
        setIsEditing(false);
      } catch (error) {
        console.error("Error updating employee data: ", error);
      }
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (editedEmployee) {
      setEditedEmployee({
        ...editedEmployee,
        [e.target.name]: e.target.value,
      });
    }
  };

  if (!employee) {
    return <div>Loading...</div>;
  }

  return (
    <div className="max-w-2xl mx-auto">
      <h3 className="text-xl font-semibold mb-4">Employee Self-Service</h3>
      <div className="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
        <div className="mb-4 flex items-center">
          <User className="mr-2" />
          <span className="font-bold">Name:</span>
          {isEditing ? (
            <div className="ml-2">
              <input
                type="text"
                name="firstName"
                value={editedEmployee?.firstName}
                onChange={handleChange}
                className="border rounded px-2 py-1 mr-2"
              />
              <input
                type="text"
                name="lastName"
                value={editedEmployee?.lastName}
                onChange={handleChange}
                className="border rounded px-2 py-1"
              />
            </div>
          ) : (
            <span className="ml-2">{`${employee.firstName} ${employee.lastName}`}</span>
          )}
        </div>
        <div className="mb-4 flex items-center">
          <Mail className="mr-2" />
          <span className="font-bold">Email:</span>
          <span className="ml-2">{employee.email}</span>
        </div>
        <div className="mb-4 flex items-center">
          <Phone className="mr-2" />
          <span className="font-bold">Phone:</span>
          {isEditing ? (
            <input
              type="tel"
              name="phone"
              value={editedEmployee?.phone}
              onChange={handleChange}
              className="border rounded px-2 py-1 ml-2"
            />
          ) : (
            <span className="ml-2">{employee.phone}</span>
          )}
        </div>
        <div className="mb-4 flex items-center">
          <Calendar className="mr-2" />
          <span className="font-bold">Date of Birth:</span>
          {isEditing ? (
            <input
              type="date"
              name="dateOfBirth"
              value={editedEmployee?.dateOfBirth}
              onChange={handleChange}
              className="border rounded px-2 py-1 ml-2"
            />
          ) : (
            <span className="ml-2">{employee.dateOfBirth}</span>
          )}
        </div>
        <div className="mb-4">
          <span className="font-bold">Address:</span>
          {isEditing ? (
            <textarea
              name="address"
              value={editedEmployee?.address}
              onChange={(e) => handleChange(e as any)}
              className="border rounded px-2 py-1 w-full mt-2"
            />
          ) : (
            <p className="mt-2">{employee.address}</p>
          )}
        </div>
        <div className="mb-4">
          <span className="font-bold">Emergency Contact:</span>
          {isEditing ? (
            <input
              type="text"
              name="emergencyContact"
              value={editedEmployee?.emergencyContact}
              onChange={handleChange}
              className="border rounded px-2 py-1 w-full mt-2"
            />
          ) : (
            <p className="mt-2">{employee.emergencyContact}</p>
          )}
        </div>
        {isEditing ? (
          <button
            onClick={handleSave}
            className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline flex items-center"
          >
            <Save className="mr-2" size={18} />
            Save Changes
          </button>
        ) : (
          <button
            onClick={handleEdit}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline flex items-center"
          >
            <Edit className="mr-2" size={18} />
            Edit Information
          </button>
        )}
      </div>
    </div>
  );
};

export default EmployeeSelfService;

================
File: src/components/features/HRManagement/PayrollManagement.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Save, Trash2 } from 'lucide-react';

interface PayrollRecord {
  id: string;
  employeeId: string;
  employeeName: string;
  payPeriod: string;
  basicSalary: number;
  overtime: number;
  deductions: number;
  netSalary: number;
  paymentDate: Date;
  status: 'pending' | 'paid';
}

const PayrollManagement: React.FC = () => {
  const [payrollRecords, setPayrollRecords] = useState<PayrollRecord[]>([]);
  const [newRecord, setNewRecord] = useState<Omit<PayrollRecord, 'id'>>({
    employeeId: '',
    employeeName: '',
    payPeriod: '',
    basicSalary: 0,
    overtime: 0,
    deductions: 0,
    netSalary: 0,
    paymentDate: new Date(),
    status: 'pending',
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'payroll'), orderBy('paymentDate', 'desc'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const records = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        paymentDate: doc.data().paymentDate.toDate(),
      } as PayrollRecord));
      setPayrollRecords(records);
    });
    return unsubscribe;
  }, []);

  const handleAddRecord = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'payroll'), {
        ...newRecord,
        paymentDate: new Date(newRecord.paymentDate),
        netSalary: newRecord.basicSalary + newRecord.overtime - newRecord.deductions,
      });
      setNewRecord({
        employeeId: '',
        employeeName: '',
        payPeriod: '',
        basicSalary: 0,
        overtime: 0,
        deductions: 0,
        netSalary: 0,
        paymentDate: new Date(),
        status: 'pending',
      });
    } catch (error) {
      console.error("Error adding payroll record: ", error);
    }
  };

  const handleUpdateRecord = async (id: string, updatedRecord: Partial<PayrollRecord>) => {
    try {
      await updateDoc(doc(db, 'payroll', id), updatedRecord);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating payroll record: ", error);
    }
  };

  const handleDeleteRecord = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'payroll', id));
    } catch (error) {
      console.error("Error deleting payroll record: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = payrollRecords.map(record => 
      `${record.employeeName},${record.payPeriod},${record.basicSalary},${record.overtime},${record.deductions},${record.netSalary},${record.paymentDate.toISOString()},${record.status}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'payroll_records.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Payroll Management</h3>
      <form onSubmit={handleAddRecord} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Employee ID"
            value={newRecord.employeeId}
            onChange={(e) => setNewRecord({ ...newRecord, employeeId: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Employee Name"
            value={newRecord.employeeName}
            onChange={(e) => setNewRecord({ ...newRecord, employeeName: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Pay Period"
            value={newRecord.payPeriod}
            onChange={(e) => setNewRecord({ ...newRecord, payPeriod: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="number"
            placeholder="Basic Salary"
            value={newRecord.basicSalary}
            onChange={(e) => setNewRecord({ ...newRecord, basicSalary: parseFloat(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="number"
            placeholder="Overtime"
            value={newRecord.overtime}
            onChange={(e) => setNewRecord({ ...newRecord, overtime: parseFloat(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="number"
            placeholder="Deductions"
            value={newRecord.deductions}
            onChange={(e) => setNewRecord({ ...newRecord, deductions: parseFloat(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="date"
            value={newRecord.paymentDate.toISOString().split('T')[0]}
            onChange={(e) => setNewRecord({ ...newRecord, paymentDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
          <select
            value={newRecord.status}
            onChange={(e) => setNewRecord({ ...newRecord, status: e.target.value as 'pending' | 'paid' })}
            className="p-2 border rounded"
          >
            <option value="pending">Pending</option>
            <option value="paid">Paid</option>
          </select>
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add Payroll Record
        </button>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Employee</th>
            <th className="py-3 px-6 text-left">Pay Period</th>
            <th className="py-3 px-6 text-right">Basic Salary</th>
            <th className="py-3 px-6 text-right">Overtime</th>
            <th className="py-3 px-6 text-right">Deductions</th>
            <th className="py-3 px-6 text-right">Net Salary</th>
            <th className="py-3 px-6 text-left">Payment Date</th>
            <th className="py-3 px-6 text-left">Status</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {payrollRecords.map((record) => (
            <tr key={record.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{record.employeeName}</td>
              <td className="py-3 px-6 text-left">{record.payPeriod}</td>
              <td className="py-3 px-6 text-right">${record.basicSalary.toFixed(2)}</td>
              <td className="py-3 px-6 text-right">${record.overtime.toFixed(2)}</td>
              <td className="py-3 px-6 text-right">${record.deductions.toFixed(2)}</td>
              <td className="py-3 px-6 text-right">${record.netSalary.toFixed(2)}</td>
              <td className="py-3 px-6 text-left">{record.paymentDate.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-left">
                <span className={`py-1 px-3 rounded-full text-xs ${
                  record.status === 'paid' ? 'bg-green-200 text-green-800' : 'bg-yellow-200 text-yellow-800'
                }`}>
                  {record.status}
                </span>
              </td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(record.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteRecord(record.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default PayrollManagement;

================
File: src/components/features/HRManagement/PerformanceEvaluation.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Save, Trash2 } from 'lucide-react';

interface PerformanceReview {
  id: string;
  employeeId: string;
  employeeName: string;
  reviewerId: string;
  reviewerName: string;
  reviewDate: Date;
  reviewPeriod: string;
  overallRating: number;
  strengths: string;
  areasForImprovement: string;
  goals: string;
  status: 'draft' | 'submitted' | 'approved';
}

const PerformanceEvaluation: React.FC = () => {
  const [performanceReviews, setPerformanceReviews] = useState<PerformanceReview[]>([]);
  const [newReview, setNewReview] = useState<Omit<PerformanceReview, 'id'>>({
    employeeId: '',
    employeeName: '',
    reviewerId: '',
    reviewerName: '',
    reviewDate: new Date(),
    reviewPeriod: '',
    overallRating: 0,
    strengths: '',
    areasForImprovement: '',
    goals: '',
    status: 'draft',
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'performanceReviews'), orderBy('reviewDate', 'desc'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const reviews = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        reviewDate: doc.data().reviewDate.toDate(),
      } as PerformanceReview));
      setPerformanceReviews(reviews);
    });
    return unsubscribe;
  }, []);

  const handleAddReview = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'performanceReviews'), {
        ...newReview,
        reviewDate: new Date(newReview.reviewDate),
      });
      setNewReview({
        employeeId: '',
        employeeName: '',
        reviewerId: '',
        reviewerName: '',
        reviewDate: new Date(),
        reviewPeriod: '',
        overallRating: 0,
        strengths: '',
        areasForImprovement: '',
        goals: '',
        status: 'draft',
      });
    } catch (error) {
      console.error("Error adding performance review: ", error);
    }
  };

  const handleUpdateReview = async (id: string, updatedReview: Partial<PerformanceReview>) => {
    try {
      await updateDoc(doc(db, 'performanceReviews', id), updatedReview);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating performance review: ", error);
    }
  };

  const handleDeleteReview = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'performanceReviews', id));
    } catch (error) {
      console.error("Error deleting performance review: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = performanceReviews.map(review => 
      `${review.employeeName},${review.reviewerName},${review.reviewDate.toISOString()},${review.reviewPeriod},${review.overallRating},${review.status}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'performance_reviews.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Performance Evaluation</h3>
      <form onSubmit={handleAddReview} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Employee ID"
            value={newReview.employeeId}
            onChange={(e) => setNewReview({ ...newReview, employeeId: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Employee Name"
            value={newReview.employeeName}
            onChange={(e) => setNewReview({ ...newReview, employeeName: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Reviewer ID"
            value={newReview.reviewerId}
            onChange={(e) => setNewReview({ ...newReview, reviewerId: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Reviewer Name"
            value={newReview.reviewerName}
            onChange={(e) => setNewReview({ ...newReview, reviewerName: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="date"
            value={newReview.reviewDate.toISOString().split('T')[0]}
            onChange={(e) => setNewReview({ ...newReview, reviewDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Review Period"
            value={newReview.reviewPeriod}
            onChange={(e) => setNewReview({ ...newReview, reviewPeriod: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="number"
            placeholder="Overall Rating"
            value={newReview.overallRating}
            onChange={(e) => setNewReview({ ...newReview, overallRating: parseInt(e.target.value) })}
            className="p-2 border rounded"
          />
          <select
            value={newReview.status}
            onChange={(e) => setNewReview({ ...newReview, status: e.target.value as 'draft' | 'submitted' | 'approved' })}
            className="p-2 border rounded"
          >
            <option value="draft">Draft</option>
            <option value="submitted">Submitted</option>
            <option value="approved">Approved</option>
          </select>
        </div>
        <textarea
          placeholder="Strengths"
          value={newReview.strengths}
          onChange={(e) => setNewReview({ ...newReview, strengths: e.target.value })}
          className="p-2 border rounded w-full mt-4"
        />
        <textarea
          placeholder="Areas for Improvement"
          value={newReview.areasForImprovement}
          onChange={(e) => setNewReview({ ...newReview, areasForImprovement: e.target.value })}
          className="p-2 border rounded w-full mt-4"
        />
        <textarea
          placeholder="Goals"
          value={newReview.goals}
          onChange={(e) => setNewReview({ ...newReview, goals: e.target.value })}
          className="p-2 border rounded w-full mt-4"
        />
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add Performance Review
        </button>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Employee</th>
            <th className="py-3 px-6 text-left">Reviewer</th>
            <th className="py-3 px-6 text-left">Review Date</th>
            <th className="py-3 px-6 text-left">Period</th>
            <th className="py-3 px-6 text-center">Rating</th>
            <th className="py-3 px-6 text-left">Status</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {performanceReviews.map((review) => (
            <tr key={review.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{review.employeeName}</td>
              <td className="py-3 px-6 text-left">{review.reviewerName}</td>
              <td className="py-3 px-6 text-left">{review.reviewDate.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-left">{review.reviewPeriod}</td>
              <td className="py-3 px-6 text-center">{review.overallRating}</td>
              <td className="py-3 px-6 text-left">
                <span className={`py-1 px-3 rounded-full text-xs ${
                  review.status === 'approved' ? 'bg-green-200 text-green-800' :
                  review.status === 'submitted' ? 'bg-yellow-200 text-yellow-800' :
                  'bg-gray-200 text-gray-800'
                }`}>
                  {review.status}
                </span>
              </td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(review.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteReview(review.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default PerformanceEvaluation;

================
File: src/components/features/HRManagement/RecruitmentOnboarding.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Save, Trash2 } from 'lucide-react';

interface JobPosting {
  id: string;
  title: string;
  department: string;
  description: string;
  requirements: string;
  status: 'open' | 'closed';
  postedDate: Date;
}

interface Applicant {
  id: string;
  jobId: string;
  name: string;
  email: string;
  phone: string;
  resumeUrl: string;
  status: 'applied' | 'screening' | 'interview' | 'offered' | 'hired' | 'rejected';
  appliedDate: Date;
}

const RecruitmentOnboarding: React.FC = () => {
  const [jobPostings, setJobPostings] = useState<JobPosting[]>([]);
  const [applicants, setApplicants] = useState<Applicant[]>([]);
  const [newJobPosting, setNewJobPosting] = useState<Omit<JobPosting, 'id'>>({
    title: '',
    department: '',
    description: '',
    requirements: '',
    status: 'open',
    postedDate: new Date(),
  });
  const [newApplicant, setNewApplicant] = useState<Omit<Applicant, 'id'>>({
    jobId: '',
    name: '',
    email: '',
    phone: '',
    resumeUrl: '',
    status: 'applied',
    appliedDate: new Date(),
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const jobsQuery = query(collection(db, 'jobPostings'), orderBy('postedDate', 'desc'));
    const applicantsQuery = query(collection(db, 'applicants'), orderBy('appliedDate', 'desc'));

    const unsubscribeJobs = onSnapshot(jobsQuery, (querySnapshot) => {
      const jobs = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        postedDate: doc.data().postedDate.toDate(),
      } as JobPosting));
      setJobPostings(jobs);
    });

    const unsubscribeApplicants = onSnapshot(applicantsQuery, (querySnapshot) => {
      const applicantsData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        appliedDate: doc.data().appliedDate.toDate(),
      } as Applicant));
      setApplicants(applicantsData);
    });

    return () => {
      unsubscribeJobs();
      unsubscribeApplicants();
    };
  }, []);

  const handleAddJobPosting = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'jobPostings'), {
        ...newJobPosting,
        postedDate: new Date(),
      });
      setNewJobPosting({
        title: '',
        department: '',
        description: '',
        requirements: '',
        status: 'open',
        postedDate: new Date(),
      });
    } catch (error) {
      console.error("Error adding job posting: ", error);
    }
  };

  const handleAddApplicant = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'applicants'), {
        ...newApplicant,
        appliedDate: new Date(),
      });
      setNewApplicant({
        jobId: '',
        name: '',
        email: '',
        phone: '',
        resumeUrl: '',
        status: 'applied',
        appliedDate: new Date(),
      });
    } catch (error) {
      console.error("Error adding applicant: ", error);
    }
  };

  const handleUpdateJobPosting = async (id: string, updatedJob: Partial<JobPosting>) => {
    try {
      await updateDoc(doc(db, 'jobPostings', id), updatedJob);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating job posting: ", error);
    }
  };

  const handleUpdateApplicant = async (id: string, updatedApplicant: Partial<Applicant>) => {
    try {
      await updateDoc(doc(db, 'applicants', id), updatedApplicant);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating applicant: ", error);
    }
  };

  const handleDeleteJobPosting = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'jobPostings', id));
    } catch (error) {
      console.error("Error deleting job posting: ", error);
    }
  };

  const handleDeleteApplicant = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'applicants', id));
    } catch (error) {
      console.error("Error deleting applicant: ", error);
    }
  };

  const handleExportJobPostings = () => {
    const csvContent = jobPostings.map(job => 
      `${job.title},${job.department},${job.description},${job.requirements},${job.status},${job.postedDate.toISOString()}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'job_postings.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  const handleExportApplicants = () => {
    const csvContent = applicants.map(applicant => 
      `${applicant.name},${applicant.email},${applicant.phone},${applicant.resumeUrl},${applicant.status},${applicant.appliedDate.toISOString()}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'applicants.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Recruitment & Onboarding</h3>
      
      {/* Job Postings Section */}
      <div className="mb-8">
        <h4 className="text-lg font-semibold mb-2">Job Postings</h4>
        <form onSubmit={handleAddJobPosting} className="mb-4">
          <div className="grid grid-cols-2 gap-4">
            <input
              type="text"
              placeholder="Job Title"
              value={newJobPosting.title}
              onChange={(e) => setNewJobPosting({ ...newJobPosting, title: e.target.value })}
              className="p-2 border rounded"
            />
            <input
              type="text"
              placeholder="Department"
              value={newJobPosting.department}
              onChange={(e) => setNewJobPosting({ ...newJobPosting, department: e.target.value })}
              className="p-2 border rounded"
            />
            <textarea
              placeholder="Job Description"
              value={newJobPosting.description}
              onChange={(e) => setNewJobPosting({ ...newJobPosting, description: e.target.value })}
              className="p-2 border rounded col-span-2"
            />
            <textarea
              placeholder="Requirements"
              value={newJobPosting.requirements}
              onChange={(e) => setNewJobPosting({ ...newJobPosting, requirements: e.target.value })}
              className="p-2 border rounded col-span-2"
            />
            <select
              value={newJobPosting.status}
              onChange={(e) => setNewJobPosting({ ...newJobPosting, status: e.target.value as 'open' | 'closed' })}
              className="p-2 border rounded"
            >
              <option value="open">Open</option>
              <option value="closed">Closed</option>
            </select>
          </div>
          <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
            <Plus size={24} /> Add Job Posting
          </button>
        </form>
        <button
          onClick={handleExportJobPostings}
          className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
        >
          <Download size={18} className="mr-2" />
          Export Job Postings CSV
        </button>
        <table className="w-full bg-white shadow-md rounded">
          <thead>
            <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
              <th className="py-3 px-6 text-left">Title</th>
              <th className="py-3 px-6 text-left">Department</th>
              <th className="py-3 px-6 text-left">Status</th>
              <th className="py-3 px-6 text-left">Posted Date</th>
              <th className="py-3 px-6 text-center">Actions</th>
            </tr>
          </thead>
          <tbody className="text-gray-600 text-sm font-light">
            {jobPostings.map((job) => (
              <tr key={job.id} className="border-b border-gray-200 hover:bg-gray-100">
                <td className="py-3 px-6 text-left whitespace-nowrap">{job.title}</td>
                <td className="py-3 px-6 text-left">{job.department}</td>
                <td className="py-3 px-6 text-left">
                  <span className={`py-1 px-3 rounded-full text-xs ${
                    job.status === 'open' ? 'bg-green-200 text-green-800' : 'bg-red-200 text-red-800'
                  }`}>
                    {job.status}
                  </span>
                </td>
                <td className="py-3 px-6 text-left">{job.postedDate.toLocaleDateString()}</td>
                <td className="py-3 px-6 text-center">
                  <button
                    onClick={() => setEditingId(job.id)}
                    className="text-blue-500 hover:text-blue-700 mr-2"
                  >
                    <Edit size={18} />
                  </button>
                  <button
                    onClick={() => handleDeleteJobPosting(job.id)}
                    className="text-red-500 hover:text-red-700"
                  >
                    <Trash2 size={18} />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Applicants Section */}
      <div>
        <h4 className="text-lg font-semibold mb-2">Applicants</h4>
        <form onSubmit={handleAddApplicant} className="mb-4">
          <div className="grid grid-cols-2 gap-4">
            <select
              value={newApplicant.jobId}
              onChange={(e) => setNewApplicant({ ...newApplicant, jobId: e.target.value })}
              className="p-2 border rounded"
            >
              <option value="">Select Job</option>
              {jobPostings.map((job) => (
                <option key={job.id} value={job.id}>{job.title}</option>
              ))}
            </select>
            <input
              type="text"
              placeholder="Applicant Name"
              value={newApplicant.name}
              onChange={(e) => setNewApplicant({ ...newApplicant, name: e.target.value })}
              className="p-2 border rounded"
            />
            <input
              type="email"
              placeholder="Email"
              value={newApplicant.email}
              onChange={(e) => setNewApplicant({ ...newApplicant, email: e.target.value })}
              className="p-2 border rounded"
            />
            <input
              type="tel"
              placeholder="Phone"
              value={newApplicant.phone}
              onChange={(e) => setNewApplicant({ ...newApplicant, phone: e.target.value })}
              className="p-2 border rounded"
            />
            <input
              type="url"
              placeholder="Resume URL"
              value={newApplicant.resumeUrl}
              onChange={(e) => setNewApplicant({ ...newApplicant, resumeUrl: e.target.value })}
              className="p-2 border rounded"
            />
            <select
              value={newApplicant.status}
              onChange={(e) => setNewApplicant({ ...newApplicant, status: e.target.value as Applicant['status'] })}
              className="p-2 border rounded"
            >
              <option value="applied">Applied</option>
              <option value="screening">Screening</option>
              <option value="interview">Interview</option>
              <option value="offered">Offered</option>
              <option value="hired">Hired</option>
              <option value="rejected">Rejected</option>
            </select>
          </div>
          <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
            <Plus size={24} /> Add Applicant
          </button>
        </form>
        <button
          onClick={handleExportApplicants}
          className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
        >
          <Download size={18} className="mr-2" />
          Export Applicants CSV
        </button>
        <table className="w-full bg-white shadow-md rounded">
          <thead>
            <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
              <th className="py-3 px-6 text-left">Name</th>
              <th className="py-3 px-6 text-left">Email</th>
              <th className="py-3 px-6 text-left">Phone</th>
              <th className="py-3 px-6 text-left">Job</th>
              <th className="py-3 px-6 text-left">Status</th>
              <th className="py-3 px-6 text-left">Applied Date</th>
              <th className="py-3 px-6 text-center">Actions</th>
            </tr>
          </thead>
          <tbody className="text-gray-600 text-sm font-light">
            {applicants.map((applicant) => (
              <tr key={applicant.id} className="border-b border-gray-200 hover:bg-gray-100">
                <td className="py-3 px-6 text-left whitespace-nowrap">{applicant.name}</td>
                <td className="py-3 px-6 text-left">{applicant.email}</td>
                <td className="py-3 px-6 text-left">{applicant.phone}</td>
                <td className="py-3 px-6 text-left">
                  {jobPostings.find(job => job.id === applicant.jobId)?.title || 'N/A'}
                </td>
                <td className="py-3 px-6 text-left">
                  <span className={`py-1 px-3 rounded-full text-xs ${
                    applicant.status === 'hired' ? 'bg-green-200 text-green-800' :
                    applicant.status === 'rejected' ? 'bg-red-200 text-red-800' :
                    'bg-yellow-200 text-yellow-800'
                  }`}>
                    {applicant.status}
                  </span>
                </td>
                <td className="py-3 px-6 text-left">{applicant.appliedDate.toLocaleDateString()}</td>
                <td className="py-3 px-6 text-center">
                  <button
                    onClick={() => setEditingId(applicant.id)}
                    className="text-blue-500 hover:text-blue-700 mr-2"
                  >
                    <Edit size={18} />
                  </button>
                  <button
                    onClick={() => handleDeleteApplicant(applicant.id)}
                    className="text-red-500 hover:text-red-700"
                  >
                    <Trash2 size={18} />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default RecruitmentOnboarding;

================
File: src/components/features/Inventory.tsx
================
import React, { useState, useEffect } from 'react';
import { Plus, Loader } from 'lucide-react';
import { collection, addDoc, onSnapshot, query, orderBy } from 'firebase/firestore';
import { db } from '../../firebase';
import ProductList from './PointOfSale/ProductList';
import ProductForm from './PointOfSale/ProductForm';

interface Product {
  id: string;
  name: string;
  quantity: number;
  price: number;
  stock: number;
  lowStockThreshold: number;
  imageUrl?: string;
  barcode?: string;
}

const Inventory: React.FC = () => {
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const q = query(collection(db, 'inventory'), orderBy('name'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const inventoryProducts = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        stock: doc.data().quantity, // Map quantity to stock for compatibility
      } as Product));
      setProducts(inventoryProducts);
      setLoading(false);
    }, (error) => {
      console.error("Error fetching inventory: ", error);
      setLoading(false);
    });

    return () => unsubscribe();
  }, []);

  const handleAddProduct = async (newProduct: Omit<Product, 'id'>) => {
    try {
      await addDoc(collection(db, 'inventory'), {
        ...newProduct,
        quantity: newProduct.stock, // Map stock to quantity for storage
      });
    } catch (error) {
      console.error("Error adding product: ", error);
    }
  };

  const handleUpdateProduct = async (id: string, updatedProduct: Partial<Product>) => {
    // Implement update logic here
  };

  const handleDeleteProduct = async (id: string) => {
    // Implement delete logic here
  };

  return (
    <div>
      <h2 className="text-2xl font-semibold mb-4">Inventory</h2>
      <ProductForm onSubmit={handleAddProduct} />
      {loading ? (
        <div className="flex justify-center items-center h-32">
          <Loader className="animate-spin" size={32} />
        </div>
      ) : (
        <ProductList
          products={products}
          onUpdate={handleUpdateProduct}
          onDelete={handleDeleteProduct}
        />
      )}
    </div>
  );
};

export default Inventory;

================
File: src/components/features/InventorySupplyChain.tsx
================
import React, { useState } from 'react';
import { Box, TrendingUp, Truck, ShoppingCart, BarChart, Send, Barcode } from 'lucide-react';
import InventoryControl from './InventorySupplyChain/InventoryControl';
import ProcurementVendorManagement from './InventorySupplyChain/ProcurementVendorManagement';
import WarehouseManagement from './InventorySupplyChain/WarehouseManagement';
import OrderManagement from './InventorySupplyChain/OrderManagement';
import DemandForecasting from './InventorySupplyChain/DemandForecasting';
import ShippingLogistics from './InventorySupplyChain/ShippingLogistics';
import BarcodeRFID from './InventorySupplyChain/BarcodeRFID';
import Inventory from './Inventory'; // Make sure this import is correct

const InventorySupplyChain: React.FC = () => {
  const [activeTab, setActiveTab] = useState('inventory');
  const [error, setError] = useState<string | null>(null);

  console.log('Active Tab:', activeTab);

  const tabs = [
    { id: 'inventory', name: 'Inventory', icon: <Box /> },
    { id: 'inventoryControl', name: 'Inventory Control', icon: <Box /> },
    { id: 'procurementVendor', name: 'Procurement & Vendor', icon: <TrendingUp /> },
    { id: 'warehouseManagement', name: 'Warehouse Management', icon: <Truck /> },
    { id: 'orderManagement', name: 'Order Management', icon: <ShoppingCart /> },
    { id: 'demandForecasting', name: 'Demand Forecasting', icon: <BarChart /> },
    { id: 'shippingLogistics', name: 'Shipping & Logistics', icon: <Send /> },
    { id: 'barcodeRFID', name: 'Barcode/RFID', icon: <Barcode /> },
  ];

  const renderComponent = () => {
    try {
      console.log('Rendering component for tab:', activeTab);
      switch (activeTab) {
        case 'inventory':
          return <Inventory />;
        case 'inventoryControl':
          return <InventoryControl />;
        case 'procurementVendor':
          return <ProcurementVendorManagement />;
        case 'warehouseManagement':
          return <WarehouseManagement />;
        case 'orderManagement':
          return <OrderManagement />;
        case 'demandForecasting':
          return <DemandForecasting />;
        case 'shippingLogistics':
          return <ShippingLogistics />;
        case 'barcodeRFID':
          return <BarcodeRFID />;
        default:
          return <Inventory />;
      }
    } catch (err) {
      console.error('Error rendering component:', err);
      setError('An error occurred while rendering the component. Please try again.');
      return null;
    }
  };

  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-6">Inventory & Supply Chain Management</h2>
      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-8 gap-4 mb-6">
        {tabs.map((tab) => (
          <button
            key={tab.id}
            className={`flex flex-col items-center justify-center p-4 rounded-lg transition-colors duration-200 ${
              activeTab === tab.id
                ? 'bg-blue-500 text-white'
                : 'bg-white text-gray-600 hover:bg-gray-100'
            }`}
            onClick={() => setActiveTab(tab.id)}
          >
            <div className="text-3xl mb-2">{tab.icon}</div>
            <span className="text-sm text-center">{tab.name}</span>
          </button>
        ))}
      </div>
      <div className="bg-white rounded-lg shadow p-6">
        {error ? (
          <div className="text-red-500">{error}</div>
        ) : (
          renderComponent()
        )}
      </div>
    </div>
  );
};

export default InventorySupplyChain;

================
File: src/components/features/InventorySupplyChain/BarcodeRFID.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Trash2, Barcode } from 'lucide-react';

interface BarcodeItem {
  id: string;
  itemId: string;
  itemName: string;
  barcode: string;
  rfidTag?: string;
  lastScanned?: Date;
}

const BarcodeRFID: React.FC = () => {
  const [barcodeItems, setBarcodeItems] = useState<BarcodeItem[]>([]);
  const [newItem, setNewItem] = useState<Omit<BarcodeItem, 'id'>>({
    itemId: '',
    itemName: '',
    barcode: '',
    rfidTag: '',
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'barcodeItems'), orderBy('itemName'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const items = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        lastScanned: doc.data().lastScanned?.toDate(),
      } as BarcodeItem));
      setBarcodeItems(items);
    });
    return unsubscribe;
  }, []);

  const handleAddItem = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'barcodeItems'), newItem);
      setNewItem({
        itemId: '',
        itemName: '',
        barcode: '',
        rfidTag: '',
      });
    } catch (error) {
      console.error("Error adding barcode item: ", error);
    }
  };

  const handleUpdateItem = async (id: string, updatedItem: Partial<BarcodeItem>) => {
    try {
      await updateDoc(doc(db, 'barcodeItems', id), updatedItem);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating barcode item: ", error);
    }
  };

  const handleDeleteItem = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'barcodeItems', id));
    } catch (error) {
      console.error("Error deleting barcode item: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = barcodeItems.map(item => 
      `${item.itemId},${item.itemName},${item.barcode},${item.rfidTag || ''},${item.lastScanned?.toISOString() || ''}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'barcode_rfid_items.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Barcode/RFID Management</h3>
      <form onSubmit={handleAddItem} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Item ID"
            value={newItem.itemId}
            onChange={(e) => setNewItem({ ...newItem, itemId: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Item Name"
            value={newItem.itemName}
            onChange={(e) => setNewItem({ ...newItem, itemName: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Barcode"
            value={newItem.barcode}
            onChange={(e) => setNewItem({ ...newItem, barcode: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="RFID Tag (optional)"
            value={newItem.rfidTag}
            onChange={(e) => setNewItem({ ...newItem, rfidTag: e.target.value })}
            className="p-2 border rounded"
          />
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add Item
        </button>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Item ID</th>
            <th className="py-3 px-6 text-left">Item Name</th>
            <th className="py-3 px-6 text-left">Barcode</th>
            <th className="py-3 px-6 text-left">RFID Tag</th>
            <th className="py-3 px-6 text-left">Last Scanned</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {barcodeItems.map((item) => (
            <tr key={item.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{item.itemId}</td>
              <td className="py-3 px-6 text-left">{item.itemName}</td>
              <td className="py-3 px-6 text-left">{item.barcode}</td>
              <td className="py-3 px-6 text-left">{item.rfidTag || 'N/A'}</td>
              <td className="py-3 px-6 text-left">{item.lastScanned?.toLocaleString() || 'Never'}</td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(item.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteItem(item.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default BarcodeRFID;

================
File: src/components/features/InventorySupplyChain/DemandForecasting.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Trash2, TrendingUp } from 'lucide-react';

interface ForecastItem {
  id: string;
  itemId: string;
  itemName: string;
  forecastDate: Date;
  predictedDemand: number;
  actualDemand?: number;
  accuracy?: number;
}

const DemandForecasting: React.FC = () => {
  const [forecasts, setForecasts] = useState<ForecastItem[]>([]);
  const [newForecast, setNewForecast] = useState<Omit<ForecastItem, 'id'>>({
    itemId: '',
    itemName: '',
    forecastDate: new Date(),
    predictedDemand: 0,
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'demandForecasts'), orderBy('forecastDate', 'desc'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const forecastData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        forecastDate: doc.data().forecastDate.toDate(),
      } as ForecastItem));
      setForecasts(forecastData);
    });
    return unsubscribe;
  }, []);

  const handleAddForecast = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'demandForecasts'), {
        ...newForecast,
        forecastDate: new Date(newForecast.forecastDate),
      });
      setNewForecast({
        itemId: '',
        itemName: '',
        forecastDate: new Date(),
        predictedDemand: 0,
      });
    } catch (error) {
      console.error("Error adding forecast: ", error);
    }
  };

  const handleUpdateForecast = async (id: string, updatedForecast: Partial<ForecastItem>) => {
    try {
      await updateDoc(doc(db, 'demandForecasts', id), updatedForecast);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating forecast: ", error);
    }
  };

  const handleDeleteForecast = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'demandForecasts', id));
    } catch (error) {
      console.error("Error deleting forecast: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = forecasts.map(forecast => 
      `${forecast.itemId},${forecast.itemName},${forecast.forecastDate.toISOString()},${forecast.predictedDemand},${forecast.actualDemand || ''},${forecast.accuracy || ''}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'demand_forecasts.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Demand Forecasting</h3>
      <form onSubmit={handleAddForecast} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Item ID"
            value={newForecast.itemId}
            onChange={(e) => setNewForecast({ ...newForecast, itemId: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Item Name"
            value={newForecast.itemName}
            onChange={(e) => setNewForecast({ ...newForecast, itemName: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="date"
            value={newForecast.forecastDate.toISOString().split('T')[0]}
            onChange={(e) => setNewForecast({ ...newForecast, forecastDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="number"
            placeholder="Predicted Demand"
            value={newForecast.predictedDemand}
            onChange={(e) => setNewForecast({ ...newForecast, predictedDemand: parseInt(e.target.value) })}
            className="p-2 border rounded"
          />
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add Forecast
        </button>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Item ID</th>
            <th className="py-3 px-6 text-left">Item Name</th>
            <th className="py-3 px-6 text-left">Forecast Date</th>
            <th className="py-3 px-6 text-right">Predicted Demand</th>
            <th className="py-3 px-6 text-right">Actual Demand</th>
            <th className="py-3 px-6 text-right">Accuracy</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {forecasts.map((forecast) => (
            <tr key={forecast.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{forecast.itemId}</td>
              <td className="py-3 px-6 text-left">{forecast.itemName}</td>
              <td className="py-3 px-6 text-left">{forecast.forecastDate.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-right">{forecast.predictedDemand}</td>
              <td className="py-3 px-6 text-right">{forecast.actualDemand || 'N/A'}</td>
              <td className="py-3 px-6 text-right">
                {forecast.accuracy ? `${forecast.accuracy.toFixed(2)}%` : 'N/A'}
              </td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(forecast.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteForecast(forecast.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default DemandForecasting;

================
File: src/components/features/InventorySupplyChain/InventoryControl.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Trash2 } from 'lucide-react';

interface InventoryItem {
  id: string;
  name: string;
  sku: string;
  quantity: number;
  reorderPoint: number;
  unitCost: number;
  location: string;
}

const InventoryControl: React.FC = () => {
  const [inventoryItems, setInventoryItems] = useState<InventoryItem[]>([]);
  const [newItem, setNewItem] = useState<Omit<InventoryItem, 'id'>>({
    name: '',
    sku: '',
    quantity: 0,
    reorderPoint: 0,
    unitCost: 0,
    location: '',
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'inventoryItems'), orderBy('name'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const items = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
      } as InventoryItem));
      setInventoryItems(items);
    });
    return unsubscribe;
  }, []);

  const handleAddItem = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'inventoryItems'), newItem);
      setNewItem({
        name: '',
        sku: '',
        quantity: 0,
        reorderPoint: 0,
        unitCost: 0,
        location: '',
      });
    } catch (error) {
      console.error("Error adding inventory item: ", error);
    }
  };

  const handleUpdateItem = async (id: string, updatedItem: Partial<InventoryItem>) => {
    try {
      await updateDoc(doc(db, 'inventoryItems', id), updatedItem);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating inventory item: ", error);
    }
  };

  const handleDeleteItem = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'inventoryItems', id));
    } catch (error) {
      console.error("Error deleting inventory item: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = inventoryItems.map(item => 
      `${item.name},${item.sku},${item.quantity},${item.reorderPoint},${item.unitCost},${item.location}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'inventory_items.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Inventory Control</h3>
      <form onSubmit={handleAddItem} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Item Name"
            value={newItem.name}
            onChange={(e) => setNewItem({ ...newItem, name: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="SKU"
            value={newItem.sku}
            onChange={(e) => setNewItem({ ...newItem, sku: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="number"
            placeholder="Quantity"
            value={newItem.quantity}
            onChange={(e) => setNewItem({ ...newItem, quantity: parseInt(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="number"
            placeholder="Reorder Point"
            value={newItem.reorderPoint}
            onChange={(e) => setNewItem({ ...newItem, reorderPoint: parseInt(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="number"
            placeholder="Unit Cost"
            value={newItem.unitCost}
            onChange={(e) => setNewItem({ ...newItem, unitCost: parseFloat(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Location"
            value={newItem.location}
            onChange={(e) => setNewItem({ ...newItem, location: e.target.value })}
            className="p-2 border rounded"
          />
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add Item
        </button>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Name</th>
            <th className="py-3 px-6 text-left">SKU</th>
            <th className="py-3 px-6 text-right">Quantity</th>
            <th className="py-3 px-6 text-right">Reorder Point</th>
            <th className="py-3 px-6 text-right">Unit Cost</th>
            <th className="py-3 px-6 text-left">Location</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {inventoryItems.map((item) => (
            <tr key={item.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{item.name}</td>
              <td className="py-3 px-6 text-left">{item.sku}</td>
              <td className="py-3 px-6 text-right">{item.quantity}</td>
              <td className="py-3 px-6 text-right">{item.reorderPoint}</td>
              <td className="py-3 px-6 text-right">${item.unitCost.toFixed(2)}</td>
              <td className="py-3 px-6 text-left">{item.location}</td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(item.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteItem(item.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default InventoryControl;

================
File: src/components/features/InventorySupplyChain/OrderManagement.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Trash2 } from 'lucide-react';

interface Order {
  id: string;
  customerId: string;
  orderDate: Date;
  status: 'pending' | 'processing' | 'shipped' | 'delivered' | 'cancelled';
  items: { itemId: string; quantity: number; price: number }[];
  totalAmount: number;
  shippingAddress: string;
  trackingNumber?: string;
}

const OrderManagement: React.FC = () => {
  const [orders, setOrders] = useState<Order[]>([]);
  const [newOrder, setNewOrder] = useState<Omit<Order, 'id'>>({
    customerId: '',
    orderDate: new Date(),
    status: 'pending',
    items: [],
    totalAmount: 0,
    shippingAddress: '',
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'orders'), orderBy('orderDate', 'desc'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const orderData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        orderDate: doc.data().orderDate.toDate(),
      } as Order));
      setOrders(orderData);
    });
    return unsubscribe;
  }, []);

  const handleAddOrder = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'orders'), {
        ...newOrder,
        orderDate: new Date(newOrder.orderDate),
      });
      setNewOrder({
        customerId: '',
        orderDate: new Date(),
        status: 'pending',
        items: [],
        totalAmount: 0,
        shippingAddress: '',
      });
    } catch (error) {
      console.error("Error adding order: ", error);
    }
  };

  const handleUpdateOrder = async (id: string, updatedOrder: Partial<Order>) => {
    try {
      await updateDoc(doc(db, 'orders', id), updatedOrder);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating order: ", error);
    }
  };

  const handleDeleteOrder = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'orders', id));
    } catch (error) {
      console.error("Error deleting order: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = orders.map(order => 
      `${order.id},${order.customerId},${order.orderDate.toISOString()},${order.status},${order.totalAmount},${order.shippingAddress},${order.trackingNumber || ''}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'orders.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Order Management</h3>
      <form onSubmit={handleAddOrder} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Customer ID"
            value={newOrder.customerId}
            onChange={(e) => setNewOrder({ ...newOrder, customerId: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="date"
            value={newOrder.orderDate.toISOString().split('T')[0]}
            onChange={(e) => setNewOrder({ ...newOrder, orderDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
          <select
            value={newOrder.status}
            onChange={(e) => setNewOrder({ ...newOrder, status: e.target.value as Order['status'] })}
            className="p-2 border rounded"
          >
            <option value="pending">Pending</option>
            <option value="processing">Processing</option>
            <option value="shipped">Shipped</option>
            <option value="delivered">Delivered</option>
            <option value="cancelled">Cancelled</option>
          </select>
          <input
            type="number"
            placeholder="Total Amount"
            value={newOrder.totalAmount}
            onChange={(e) => setNewOrder({ ...newOrder, totalAmount: parseFloat(e.target.value) })}
            className="p-2 border rounded"
          />
          <textarea
            placeholder="Shipping Address"
            value={newOrder.shippingAddress}
            onChange={(e) => setNewOrder({ ...newOrder, shippingAddress: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Tracking Number (optional)"
            value={newOrder.trackingNumber || ''}
            onChange={(e) => setNewOrder({ ...newOrder, trackingNumber: e.target.value })}
            className="p-2 border rounded"
          />
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add Order
        </button>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Order ID</th>
            <th className="py-3 px-6 text-left">Customer ID</th>
            <th className="py-3 px-6 text-left">Order Date</th>
            <th className="py-3 px-6 text-left">Status</th>
            <th className="py-3 px-6 text-right">Total Amount</th>
            <th className="py-3 px-6 text-left">Tracking Number</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {orders.map((order) => (
            <tr key={order.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{order.id}</td>
              <td className="py-3 px-6 text-left">{order.customerId}</td>
              <td className="py-3 px-6 text-left">{order.orderDate.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-left">
                <span className={`py-1 px-3 rounded-full text-xs ${
                  order.status === 'pending' ? 'bg-yellow-200 text-yellow-800' :
                  order.status === 'processing' ? 'bg-blue-200 text-blue-800' :
                  order.status === 'shipped' ? 'bg-purple-200 text-purple-800' :
                  order.status === 'delivered' ? 'bg-green-200 text-green-800' :
                  'bg-red-200 text-red-800'
                }`}>
                  {order.status}
                </span>
              </td>
              <td className="py-3 px-6 text-right">${order.totalAmount.toFixed(2)}</td>
              <td className="py-3 px-6 text-left">{order.trackingNumber || 'N/A'}</td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(order.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteOrder(order.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default OrderManagement;

================
File: src/components/features/InventorySupplyChain/ProcurementVendorManagement.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Trash2 } from 'lucide-react';

interface Vendor {
  id: string;
  name: string;
  contactPerson: string;
  email: string;
  phone: string;
  address: string;
  rating: number;
}

interface PurchaseOrder {
  id: string;
  vendorId: string;
  orderDate: Date;
  expectedDeliveryDate: Date;
  items: { itemId: string; quantity: number; unitPrice: number }[];
  status: 'pending' | 'approved' | 'shipped' | 'received' | 'cancelled';
  totalAmount: number;
}

const ProcurementVendorManagement: React.FC = () => {
  const [vendors, setVendors] = useState<Vendor[]>([]);
  const [purchaseOrders, setPurchaseOrders] = useState<PurchaseOrder[]>([]);
  const [newVendor, setNewVendor] = useState<Omit<Vendor, 'id'>>({
    name: '',
    contactPerson: '',
    email: '',
    phone: '',
    address: '',
    rating: 0,
  });
  const [newPurchaseOrder, setNewPurchaseOrder] = useState<Omit<PurchaseOrder, 'id'>>({
    vendorId: '',
    orderDate: new Date(),
    expectedDeliveryDate: new Date(),
    items: [],
    status: 'pending',
    totalAmount: 0,
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const vendorsQuery = query(collection(db, 'vendors'), orderBy('name'));
    const unsubscribeVendors = onSnapshot(vendorsQuery, (querySnapshot) => {
      const vendorData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
      } as Vendor));
      setVendors(vendorData);
    });

    const purchaseOrdersQuery = query(collection(db, 'purchaseOrders'), orderBy('orderDate', 'desc'));
    const unsubscribePurchaseOrders = onSnapshot(purchaseOrdersQuery, (querySnapshot) => {
      const poData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        orderDate: doc.data().orderDate.toDate(),
        expectedDeliveryDate: doc.data().expectedDeliveryDate.toDate(),
      } as PurchaseOrder));
      setPurchaseOrders(poData);
    });

    return () => {
      unsubscribeVendors();
      unsubscribePurchaseOrders();
    };
  }, []);

  const handleAddVendor = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'vendors'), newVendor);
      setNewVendor({
        name: '',
        contactPerson: '',
        email: '',
        phone: '',
        address: '',
        rating: 0,
      });
    } catch (error) {
      console.error("Error adding vendor: ", error);
    }
  };

  const handleAddPurchaseOrder = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'purchaseOrders'), {
        ...newPurchaseOrder,
        orderDate: new Date(newPurchaseOrder.orderDate),
        expectedDeliveryDate: new Date(newPurchaseOrder.expectedDeliveryDate),
      });
      setNewPurchaseOrder({
        vendorId: '',
        orderDate: new Date(),
        expectedDeliveryDate: new Date(),
        items: [],
        status: 'pending',
        totalAmount: 0,
      });
    } catch (error) {
      console.error("Error adding purchase order: ", error);
    }
  };

  const handleUpdateVendor = async (id: string, updatedVendor: Partial<Vendor>) => {
    try {
      await updateDoc(doc(db, 'vendors', id), updatedVendor);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating vendor: ", error);
    }
  };

  const handleUpdatePurchaseOrder = async (id: string, updatedPO: Partial<PurchaseOrder>) => {
    try {
      await updateDoc(doc(db, 'purchaseOrders', id), updatedPO);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating purchase order: ", error);
    }
  };

  const handleDeleteVendor = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'vendors', id));
    } catch (error) {
      console.error("Error deleting vendor: ", error);
    }
  };

  const handleDeletePurchaseOrder = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'purchaseOrders', id));
    } catch (error) {
      console.error("Error deleting purchase order: ", error);
    }
  };

  const handleExportVendors = () => {
    const csvContent = vendors.map(vendor => 
      `${vendor.name},${vendor.contactPerson},${vendor.email},${vendor.phone},${vendor.address},${vendor.rating}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'vendors.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  const handleExportPurchaseOrders = () => {
    const csvContent = purchaseOrders.map(po => 
      `${po.id},${po.vendorId},${po.orderDate.toISOString()},${po.expectedDeliveryDate.toISOString()},${po.status},${po.totalAmount}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'purchase_orders.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Procurement & Vendor Management</h3>
      
      {/* Vendors Section */}
      <div className="mb-8">
        <h4 className="text-lg font-semibold mb-2">Vendors</h4>
        <form onSubmit={handleAddVendor} className="mb-4">
          <div className="grid grid-cols-2 gap-4">
            <input
              type="text"
              placeholder="Vendor Name"
              value={newVendor.name}
              onChange={(e) => setNewVendor({ ...newVendor, name: e.target.value })}
              className="p-2 border rounded"
            />
            <input
              type="text"
              placeholder="Contact Person"
              value={newVendor.contactPerson}
              onChange={(e) => setNewVendor({ ...newVendor, contactPerson: e.target.value })}
              className="p-2 border rounded"
            />
            <input
              type="email"
              placeholder="Email"
              value={newVendor.email}
              onChange={(e) => setNewVendor({ ...newVendor, email: e.target.value })}
              className="p-2 border rounded"
            />
            <input
              type="tel"
              placeholder="Phone"
              value={newVendor.phone}
              onChange={(e) => setNewVendor({ ...newVendor, phone: e.target.value })}
              className="p-2 border rounded"
            />
            <input
              type="text"
              placeholder="Address"
              value={newVendor.address}
              onChange={(e) => setNewVendor({ ...newVendor, address: e.target.value })}
              className="p-2 border rounded"
            />
            <input
              type="number"
              placeholder="Rating"
              value={newVendor.rating}
              onChange={(e) => setNewVendor({ ...newVendor, rating: parseInt(e.target.value) })}
              className="p-2 border rounded"
            />
          </div>
          <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
            <Plus size={24} /> Add Vendor
          </button>
        </form>
        <button
          onClick={handleExportVendors}
          className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
        >
          <Download size={18} className="mr-2" />
          Export Vendors CSV
        </button>
        <table className="w-full bg-white shadow-md rounded">
          <thead>
            <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
              <th className="py-3 px-6 text-left">Name</th>
              <th className="py-3 px-6 text-left">Contact Person</th>
              <th className="py-3 px-6 text-left">Email</th>
              <th className="py-3 px-6 text-left">Phone</th>
              <th className="py-3 px-6 text-left">Rating</th>
              <th className="py-3 px-6 text-center">Actions</th>
            </tr>
          </thead>
          <tbody className="text-gray-600 text-sm font-light">
            {vendors.map((vendor) => (
              <tr key={vendor.id} className="border-b border-gray-200 hover:bg-gray-100">
                <td className="py-3 px-6 text-left whitespace-nowrap">{vendor.name}</td>
                <td className="py-3 px-6 text-left">{vendor.contactPerson}</td>
                <td className="py-3 px-6 text-left">{vendor.email}</td>
                <td className="py-3 px-6 text-left">{vendor.phone}</td>
                <td className="py-3 px-6 text-left">{vendor.rating}</td>
                <td className="py-3 px-6 text-center">
                  <button
                    onClick={() => setEditingId(vendor.id)}
                    className="text-blue-500 hover:text-blue-700 mr-2"
                  >
                    <Edit size={18} />
                  </button>
                  <button
                    onClick={() => handleDeleteVendor(vendor.id)}
                    className="text-red-500 hover:text-red-700"
                  >
                    <Trash2 size={18} />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Purchase Orders Section */}
      <div>
        <h4 className="text-lg font-semibold mb-2">Purchase Orders</h4>
        <form onSubmit={handleAddPurchaseOrder} className="mb-4">
          <div className="grid grid-cols-2 gap-4">
            <select
              value={newPurchaseOrder.vendorId}
              onChange={(e) => setNewPurchaseOrder({ ...newPurchaseOrder, vendorId: e.target.value })}
              className="p-2 border rounded"
            >
              <option value="">Select Vendor</option>
              {vendors.map((vendor) => (
                <option key={vendor.id} value={vendor.id}>{vendor.name}</option>
              ))}
            </select>
            <input
              type="date"
              value={newPurchaseOrder.orderDate.toISOString().split('T')[0]}
              onChange={(e) => setNewPurchaseOrder({ ...newPurchaseOrder, orderDate: new Date(e.target.value) })}
              className="p-2 border rounded"
            />
            <input
              type="date"
              value={newPurchaseOrder.expectedDeliveryDate.toISOString().split('T')[0]}
              onChange={(e) => setNewPurchaseOrder({ ...newPurchaseOrder, expectedDeliveryDate: new Date(e.target.value) })}
              className="p-2 border rounded"
            />
            <select
              value={newPurchaseOrder.status}
              onChange={(e) => setNewPurchaseOrder({ ...newPurchaseOrder, status: e.target.value as PurchaseOrder['status'] })}
              className="p-2 border rounded"
            >
              <option value="pending">Pending</option>
              <option value="approved">Approved</option>
              <option value="shipped">Shipped</option>
              <option value="received">Received</option>
              <option value="cancelled">Cancelled</option>
            </select>
            <input
              type="number"
              placeholder="Total Amount"
              value={newPurchaseOrder.totalAmount}
              onChange={(e) => setNewPurchaseOrder({ ...newPurchaseOrder, totalAmount: parseFloat(e.target.value) })}
              className="p-2 border rounded"
            />
          </div>
          <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
            <Plus size={24} /> Add Purchase Order
          </button>
        </form>
        <button
          onClick={handleExportPurchaseOrders}
          className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
        >
          <Download size={18} className="mr-2" />
          Export Purchase Orders CSV
        </button>
        <table className="w-full bg-white shadow-md rounded">
          <thead>
            <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
              <th className="py-3 px-6 text-left">Order ID</th>
              <th className="py-3 px-6 text-left">Vendor</th>
              <th className="py-3 px-6 text-left">Order Date</th>
              <th className="py-3 px-6 text-left">Expected Delivery</th>
              <th className="py-3 px-6 text-left">Status</th>
              <th className="py-3 px-6 text-right">Total Amount</th>
              <th className="py-3 px-6 text-center">Actions</th>
            </tr>
          </thead>
          <tbody className="text-gray-600 text-sm font-light">
            {purchaseOrders.map((po) => (
              <tr key={po.id} className="border-b border-gray-200 hover:bg-gray-100">
                <td className="py-3 px-6 text-left whitespace-nowrap">{po.id}</td>
                <td className="py-3 px-6 text-left">{vendors.find(v => v.id === po.vendorId)?.name || 'N/A'}</td>
                <td className="py-3 px-6 text-left">{po.orderDate.toLocaleDateString()}</td>
                <td className="py-3 px-6 text-left">{po.expectedDeliveryDate.toLocaleDateString()}</td>
                <td className="py-3 px-6 text-left">
                  <span className={`py-1 px-3 rounded-full text-xs ${
                    po.status === 'approved' ? 'bg-green-200 text-green-800' :
                    po.status === 'pending' ? 'bg-yellow-200 text-yellow-800' :
                    po.status === 'shipped' ? 'bg-blue-200 text-blue-800' :
                    po.status === 'received' ? 'bg-purple-200 text-purple-800' :
                    'bg-red-200 text-red-800'
                  }`}>
                    {po.status}
                  </span>
                </td>
                <td className="py-3 px-6 text-right">${po.totalAmount.toFixed(2)}</td>
                <td className="py-3 px-6 text-center">
                  <button
                    onClick={() => setEditingId(po.id)}
                    className="text-blue-500 hover:text-blue-700 mr-2"
                  >
                    <Edit size={18} />
                  </button>
                  <button
                    onClick={() => handleDeletePurchaseOrder(po.id)}
                    className="text-red-500 hover:text-red-700"
                  >
                    <Trash2 size={18} />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default ProcurementVendorManagement;

================
File: src/components/features/InventorySupplyChain/ShippingLogistics.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Trash2, Truck } from 'lucide-react';

interface Shipment {
  id: string;
  orderId: string;
  carrier: string;
  trackingNumber: string;
  status: 'pending' | 'in-transit' | 'delivered' | 'returned';
  shippingDate: Date;
  estimatedDeliveryDate: Date;
  actualDeliveryDate?: Date;
}

const ShippingLogistics: React.FC = () => {
  const [shipments, setShipments] = useState<Shipment[]>([]);
  const [newShipment, setNewShipment] = useState<Omit<Shipment, 'id'>>({
    orderId: '',
    carrier: '',
    trackingNumber: '',
    status: 'pending',
    shippingDate: new Date(),
    estimatedDeliveryDate: new Date(),
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'shipments'), orderBy('shippingDate', 'desc'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const shipmentData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        shippingDate: doc.data().shippingDate.toDate(),
        estimatedDeliveryDate: doc.data().estimatedDeliveryDate.toDate(),
        actualDeliveryDate: doc.data().actualDeliveryDate?.toDate(),
      } as Shipment));
      setShipments(shipmentData);
    });
    return unsubscribe;
  }, []);

  const handleAddShipment = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'shipments'), {
        ...newShipment,
        shippingDate: new Date(newShipment.shippingDate),
        estimatedDeliveryDate: new Date(newShipment.estimatedDeliveryDate),
      });
      setNewShipment({
        orderId: '',
        carrier: '',
        trackingNumber: '',
        status: 'pending',
        shippingDate: new Date(),
        estimatedDeliveryDate: new Date(),
      });
    } catch (error) {
      console.error("Error adding shipment: ", error);
    }
  };

  const handleUpdateShipment = async (id: string, updatedShipment: Partial<Shipment>) => {
    try {
      await updateDoc(doc(db, 'shipments', id), updatedShipment);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating shipment: ", error);
    }
  };

  const handleDeleteShipment = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'shipments', id));
    } catch (error) {
      console.error("Error deleting shipment: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = shipments.map(shipment => 
      `${shipment.orderId},${shipment.carrier},${shipment.trackingNumber},${shipment.status},${shipment.shippingDate.toISOString()},${shipment.estimatedDeliveryDate.toISOString()},${shipment.actualDeliveryDate?.toISOString() || ''}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'shipments.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Shipping & Logistics</h3>
      <form onSubmit={handleAddShipment} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Order ID"
            value={newShipment.orderId}
            onChange={(e) => setNewShipment({ ...newShipment, orderId: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Carrier"
            value={newShipment.carrier}
            onChange={(e) => setNewShipment({ ...newShipment, carrier: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Tracking Number"
            value={newShipment.trackingNumber}
            onChange={(e) => setNewShipment({ ...newShipment, trackingNumber: e.target.value })}
            className="p-2 border rounded"
          />
          <select
            value={newShipment.status}
            onChange={(e) => setNewShipment({ ...newShipment, status: e.target.value as Shipment['status'] })}
            className="p-2 border rounded"
          >
            <option value="pending">Pending</option>
            <option value="in-transit">In Transit</option>
            <option value="delivered">Delivered</option>
            <option value="returned">Returned</option>
          </select>
          <input
            type="date"
            value={newShipment.shippingDate.toISOString().split('T')[0]}
            onChange={(e) => setNewShipment({ ...newShipment, shippingDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="date"
            value={newShipment.estimatedDeliveryDate.toISOString().split('T')[0]}
            onChange={(e) => setNewShipment({ ...newShipment, estimatedDeliveryDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add Shipment
        </button>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Order ID</th>
            <th className="py-3 px-6 text-left">Carrier</th>
            <th className="py-3 px-6 text-left">Tracking Number</th>
            <th className="py-3 px-6 text-left">Status</th>
            <th className="py-3 px-6 text-left">Shipping Date</th>
            <th className="py-3 px-6 text-left">Est. Delivery Date</th>
            <th className="py-3 px-6 text-left">Actual Delivery Date</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {shipments.map((shipment) => (
            <tr key={shipment.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{shipment.orderId}</td>
              <td className="py-3 px-6 text-left">{shipment.carrier}</td>
              <td className="py-3 px-6 text-left">{shipment.trackingNumber}</td>
              <td className="py-3 px-6 text-left">
                <span className={`py-1 px-3 rounded-full text-xs ${
                  shipment.status === 'pending' ? 'bg-yellow-200 text-yellow-800' :
                  shipment.status === 'in-transit' ? 'bg-blue-200 text-blue-800' :
                  shipment.status === 'delivered' ? 'bg-green-200 text-green-800' :
                  'bg-red-200 text-red-800'
                }`}>
                  {shipment.status}
                </span>
              </td>
              <td className="py-3 px-6 text-left">{shipment.shippingDate.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-left">{shipment.estimatedDeliveryDate.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-left">{shipment.actualDeliveryDate?.toLocaleDateString() || 'N/A'}</td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(shipment.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteShipment(shipment.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ShippingLogistics;

================
File: src/components/features/InventorySupplyChain/WarehouseManagement.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Trash2 } from 'lucide-react';

interface WarehouseLocation {
  id: string;
  name: string;
  type: 'shelf' | 'bin' | 'pallet' | 'other';
  capacity: number;
  currentOccupancy: number;
}

interface InventoryMovement {
  id: string;
  itemId: string;
  fromLocation: string;
  toLocation: string;
  quantity: number;
  date: Date;
  reason: string;
}

const WarehouseManagement: React.FC = () => {
  const [locations, setLocations] = useState<WarehouseLocation[]>([]);
  const [movements, setMovements] = useState<InventoryMovement[]>([]);
  const [newLocation, setNewLocation] = useState<Omit<WarehouseLocation, 'id'>>({
    name: '',
    type: 'shelf',
    capacity: 0,
    currentOccupancy: 0,
  });
  const [newMovement, setNewMovement] = useState<Omit<InventoryMovement, 'id'>>({
    itemId: '',
    fromLocation: '',
    toLocation: '',
    quantity: 0,
    date: new Date(),
    reason: '',
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const locationsQuery = query(collection(db, 'warehouseLocations'), orderBy('name'));
    const unsubscribeLocations = onSnapshot(locationsQuery, (querySnapshot) => {
      const locationData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
      } as WarehouseLocation));
      setLocations(locationData);
    });

    const movementsQuery = query(collection(db, 'inventoryMovements'), orderBy('date', 'desc'));
    const unsubscribeMovements = onSnapshot(movementsQuery, (querySnapshot) => {
      const movementData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        date: doc.data().date.toDate(),
      } as InventoryMovement));
      setMovements(movementData);
    });

    return () => {
      unsubscribeLocations();
      unsubscribeMovements();
    };
  }, []);

  const handleAddLocation = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'warehouseLocations'), newLocation);
      setNewLocation({
        name: '',
        type: 'shelf',
        capacity: 0,
        currentOccupancy: 0,
      });
    } catch (error) {
      console.error("Error adding warehouse location: ", error);
    }
  };

  const handleAddMovement = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'inventoryMovements'), {
        ...newMovement,
        date: new Date(newMovement.date),
      });
      setNewMovement({
        itemId: '',
        fromLocation: '',
        toLocation: '',
        quantity: 0,
        date: new Date(),
        reason: '',
      });
    } catch (error) {
      console.error("Error adding inventory movement: ", error);
    }
  };

  const handleUpdateLocation = async (id: string, updatedLocation: Partial<WarehouseLocation>) => {
    try {
      await updateDoc(doc(db, 'warehouseLocations', id), updatedLocation);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating warehouse location: ", error);
    }
  };

  const handleUpdateMovement = async (id: string, updatedMovement: Partial<InventoryMovement>) => {
    try {
      await updateDoc(doc(db, 'inventoryMovements', id), updatedMovement);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating inventory movement: ", error);
    }
  };

  const handleDeleteLocation = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'warehouseLocations', id));
    } catch (error) {
      console.error("Error deleting warehouse location: ", error);
    }
  };

  const handleDeleteMovement = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'inventoryMovements', id));
    } catch (error) {
      console.error("Error deleting inventory movement: ", error);
    }
  };

  const handleExportLocations = () => {
    const csvContent = locations.map(location => 
      `${location.name},${location.type},${location.capacity},${location.currentOccupancy}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'warehouse_locations.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  const handleExportMovements = () => {
    const csvContent = movements.map(movement => 
      `${movement.itemId},${movement.fromLocation},${movement.toLocation},${movement.quantity},${movement.date.toISOString()},${movement.reason}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'inventory_movements.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Warehouse Management</h3>
      
      {/* Warehouse Locations Section */}
      <div className="mb-8">
        <h4 className="text-lg font-semibold mb-2">Warehouse Locations</h4>
        <form onSubmit={handleAddLocation} className="mb-4">
          <div className="grid grid-cols-2 gap-4">
            <input
              type="text"
              placeholder="Location Name"
              value={newLocation.name}
              onChange={(e) => setNewLocation({ ...newLocation, name: e.target.value })}
              className="p-2 border rounded"
            />
            <select
              value={newLocation.type}
              onChange={(e) => setNewLocation({ ...newLocation, type: e.target.value as WarehouseLocation['type'] })}
              className="p-2 border rounded"
            >
              <option value="shelf">Shelf</option>
              <option value="bin">Bin</option>
              <option value="pallet">Pallet</option>
              <option value="other">Other</option>
            </select>
            <input
              type="number"
              placeholder="Capacity"
              value={newLocation.capacity}
              onChange={(e) => setNewLocation({ ...newLocation, capacity: parseInt(e.target.value) })}
              className="p-2 border rounded"
            />
            <input
              type="number"
              placeholder="Current Occupancy"
              value={newLocation.currentOccupancy}
              onChange={(e) => setNewLocation({ ...newLocation, currentOccupancy: parseInt(e.target.value) })}
              className="p-2 border rounded"
            />
          </div>
          <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
            <Plus size={24} /> Add Location
          </button>
        </form>
        <button
          onClick={handleExportLocations}
          className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
        >
          <Download size={18} className="mr-2" />
          Export Locations CSV
        </button>
        <table className="w-full bg-white shadow-md rounded">
          <thead>
            <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
              <th className="py-3 px-6 text-left">Name</th>
              <th className="py-3 px-6 text-left">Type</th>
              <th className="py-3 px-6 text-right">Capacity</th>
              <th className="py-3 px-6 text-right">Current Occupancy</th>
              <th className="py-3 px-6 text-center">Actions</th>
            </tr>
          </thead>
          <tbody className="text-gray-600 text-sm font-light">
            {locations.map((location) => (
              <tr key={location.id} className="border-b border-gray-200 hover:bg-gray-100">
                <td className="py-3 px-6 text-left whitespace-nowrap">{location.name}</td>
                <td className="py-3 px-6 text-left">{location.type}</td>
                <td className="py-3 px-6 text-right">{location.capacity}</td>
                <td className="py-3 px-6 text-right">{location.currentOccupancy}</td>
                <td className="py-3 px-6 text-center">
                  <button
                    onClick={() => setEditingId(location.id)}
                    className="text-blue-500 hover:text-blue-700 mr-2"
                  >
                    <Edit size={18} />
                  </button>
                  <button
                    onClick={() => handleDeleteLocation(location.id)}
                    className="text-red-500 hover:text-red-700"
                  >
                    <Trash2 size={18} />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Inventory Movements Section */}
      <div>
        <h4 className="text-lg font-semibold mb-2">Inventory Movements</h4>
        <form onSubmit={handleAddMovement} className="mb-4">
          <div className="grid grid-cols-2 gap-4">
            <input
              type="text"
              placeholder="Item ID"
              value={newMovement.itemId}
              onChange={(e) => setNewMovement({ ...newMovement, itemId: e.target.value })}
              className="p-2 border rounded"
            />
            <input
              type="text"
              placeholder="From Location"
              value={newMovement.fromLocation}
              onChange={(e) => setNewMovement({ ...newMovement, fromLocation: e.target.value })}
              className="p-2 border rounded"
            />
            <input
              type="text"
              placeholder="To Location"
              value={newMovement.toLocation}
              onChange={(e) => setNewMovement({ ...newMovement, toLocation: e.target.value })}
              className="p-2 border rounded"
            />
            <input
              type="number"
              placeholder="Quantity"
              value={newMovement.quantity}
              onChange={(e) => setNewMovement({ ...newMovement, quantity: parseInt(e.target.value) })}
              className="p-2 border rounded"
            />
            <input
              type="date"
              value={newMovement.date.toISOString().split('T')[0]}
              onChange={(e) => setNewMovement({ ...newMovement, date: new Date(e.target.value) })}
              className="p-2 border rounded"
            />
            <input
              type="text"
              placeholder="Reason"
              value={newMovement.reason}
              onChange={(e) => setNewMovement({ ...newMovement, reason: e.target.value })}
              className="p-2 border rounded"
            />
          </div>
          <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
            <Plus size={24} /> Add Movement
          </button>
        </form>
        <button
          onClick={handleExportMovements}
          className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
        >
          <Download size={18} className="mr-2" />
          Export Movements CSV
        </button>
        <table className="w-full bg-white shadow-md rounded">
          <thead>
            <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
              <th className="py-3 px-6 text-left">Item ID</th>
              <th className="py-3 px-6 text-left">From</th>
              <th className="py-3 px-6 text-left">To</th>
              <th className="py-3 px-6 text-right">Quantity</th>
              <th className="py-3 px-6 text-left">Date</th>
              <th className="py-3 px-6 text-left">Reason</th>
              <th className="py-3 px-6 text-center">Actions</th>
            </tr>
          </thead>
          <tbody className="text-gray-600 text-sm font-light">
            {movements.map((movement) => (
              <tr key={movement.id} className="border-b border-gray-200 hover:bg-gray-100">
                <td className="py-3 px-6 text-left whitespace-nowrap">{movement.itemId}</td>
                <td className="py-3 px-6 text-left">{movement.fromLocation}</td>
                <td className="py-3 px-6 text-left">{movement.toLocation}</td>
                <td className="py-3 px-6 text-right">{movement.quantity}</td>
                <td className="py-3 px-6 text-left">{movement.date.toLocaleDateString()}</td>
                <td className="py-3 px-6 text-left">{movement.reason}</td>
                <td className="py-3 px-6 text-center">
                  <button
                    onClick={() => setEditingId(movement.id)}
                    className="text-blue-500 hover:text-blue-700 mr-2"
                  >
                    <Edit size={18} />
                  </button>
                  <button
                    onClick={() => handleDeleteMovement(movement.id)}
                    className="text-red-500 hover:text-red-700"
                  >
                    <Trash2 size={18} />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default WarehouseManagement;

================
File: src/components/features/Knowledge.tsx
================
import React from 'react';

const Knowledge: React.FC = () => {
  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">Knowledge</h2>
      <p>This is the Knowledge feature page. Implement your knowledge base functionality here.</p>
    </div>
  );
};

export default Knowledge;

================
File: src/components/features/Manufacturing.tsx
================
import React, { useState } from 'react';
import { FileText, Calendar, Clipboard, Activity, CheckSquare, Package } from 'lucide-react';
import BillOfMaterials from './Manufacturing/BillOfMaterials';
import ProductionPlanning from './Manufacturing/ProductionPlanning';
import WorkOrderManagement from './Manufacturing/WorkOrderManagement';
import ShopFloorControl from './Manufacturing/ShopFloorControl';
import QualityControl from './Manufacturing/QualityControl';
import MaterialsRequirementPlanning from './Manufacturing/MaterialsRequirementPlanning';

const Manufacturing: React.FC = () => {
  const [activeTab, setActiveTab] = useState('bom');

  const tabs = [
    { id: 'bom', name: 'Bill of Materials', icon: <FileText /> },
    { id: 'planning', name: 'Production Planning', icon: <Calendar /> },
    { id: 'workOrder', name: 'Work Order Management', icon: <Clipboard /> },
    { id: 'shopFloor', name: 'Shop Floor Control', icon: <Activity /> },
    { id: 'quality', name: 'Quality Control', icon: <CheckSquare /> },
    { id: 'mrp', name: 'Materials Requirement Planning', icon: <Package /> },
  ];

  const renderComponent = () => {
    switch (activeTab) {
      case 'bom':
        return <BillOfMaterials />;
      case 'planning':
        return <ProductionPlanning />;
      case 'workOrder':
        return <WorkOrderManagement />;
      case 'shopFloor':
        return <ShopFloorControl />;
      case 'quality':
        return <QualityControl />;
      case 'mrp':
        return <MaterialsRequirementPlanning />;
      default:
        return <BillOfMaterials />;
    }
  };

  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-6">Manufacturing/Production Management</h2>
      <div className="flex mb-6 space-x-2 overflow-x-auto">
        {tabs.map((tab) => (
          <button
            key={tab.id}
            className={`flex items-center px-4 py-2 rounded-lg transition-colors duration-200 ${
              activeTab === tab.id
                ? 'bg-blue-500 text-white'
                : 'bg-white text-gray-600 hover:bg-gray-100'
            }`}
            onClick={() => setActiveTab(tab.id)}
          >
            {tab.icon}
            <span className="ml-2">{tab.name}</span>
          </button>
        ))}
      </div>
      <div className="bg-white rounded-lg shadow p-6">
        {renderComponent()}
      </div>
    </div>
  );
};

export default Manufacturing;

================
File: src/components/features/Manufacturing/BillOfMaterials.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Trash2 } from 'lucide-react';

interface BOMItem {
  id: string;
  productName: string;
  componentName: string;
  quantity: number;
  unit: string;
}

const BillOfMaterials: React.FC = () => {
  const [bomItems, setBOMItems] = useState<BOMItem[]>([]);
  const [newItem, setNewItem] = useState<Omit<BOMItem, 'id'>>({
    productName: '',
    componentName: '',
    quantity: 0,
    unit: '',
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'billOfMaterials'), orderBy('productName'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const items = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
      } as BOMItem));
      setBOMItems(items);
    });
    return unsubscribe;
  }, []);

  const handleAddItem = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'billOfMaterials'), newItem);
      setNewItem({
        productName: '',
        componentName: '',
        quantity: 0,
        unit: '',
      });
    } catch (error) {
      console.error("Error adding BOM item: ", error);
    }
  };

  const handleUpdateItem = async (id: string, updatedItem: Partial<BOMItem>) => {
    try {
      await updateDoc(doc(db, 'billOfMaterials', id), updatedItem);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating BOM item: ", error);
    }
  };

  const handleDeleteItem = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'billOfMaterials', id));
    } catch (error) {
      console.error("Error deleting BOM item: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = bomItems.map(item => 
      `${item.productName},${item.componentName},${item.quantity},${item.unit}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'bill_of_materials.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Bill of Materials</h3>
      <form onSubmit={handleAddItem} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Product Name"
            value={newItem.productName}
            onChange={(e) => setNewItem({ ...newItem, productName: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Component Name"
            value={newItem.componentName}
            onChange={(e) => setNewItem({ ...newItem, componentName: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="number"
            placeholder="Quantity"
            value={newItem.quantity}
            onChange={(e) => setNewItem({ ...newItem, quantity: parseFloat(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Unit"
            value={newItem.unit}
            onChange={(e) => setNewItem({ ...newItem, unit: e.target.value })}
            className="p-2 border rounded"
          />
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add BOM Item
        </button>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Product Name</th>
            <th className="py-3 px-6 text-left">Component Name</th>
            <th className="py-3 px-6 text-right">Quantity</th>
            <th className="py-3 px-6 text-left">Unit</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {bomItems.map((item) => (
            <tr key={item.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{item.productName}</td>
              <td className="py-3 px-6 text-left">{item.componentName}</td>
              <td className="py-3 px-6 text-right">{item.quantity}</td>
              <td className="py-3 px-6 text-left">{item.unit}</td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(item.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteItem(item.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default BillOfMaterials;

================
File: src/components/features/Manufacturing/MaterialsRequirementPlanning.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Trash2 } from 'lucide-react';

interface MRPItem {
  id: string;
  itemName: string;
  requiredQuantity: number;
  availableQuantity: number;
  orderQuantity: number;
  expectedDeliveryDate: Date;
  status: 'pending' | 'ordered' | 'received';
}

const MaterialsRequirementPlanning: React.FC = () => {
  const [mrpItems, setMRPItems] = useState<MRPItem[]>([]);
  const [newItem, setNewItem] = useState<Omit<MRPItem, 'id'>>({
    itemName: '',
    requiredQuantity: 0,
    availableQuantity: 0,
    orderQuantity: 0,
    expectedDeliveryDate: new Date(),
    status: 'pending',
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'mrpItems'), orderBy('expectedDeliveryDate'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const items = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        expectedDeliveryDate: doc.data().expectedDeliveryDate.toDate(),
      } as MRPItem));
      setMRPItems(items);
    });
    return unsubscribe;
  }, []);

  const handleAddItem = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'mrpItems'), {
        ...newItem,
        expectedDeliveryDate: new Date(newItem.expectedDeliveryDate),
      });
      setNewItem({
        itemName: '',
        requiredQuantity: 0,
        availableQuantity: 0,
        orderQuantity: 0,
        expectedDeliveryDate: new Date(),
        status: 'pending',
      });
    } catch (error) {
      console.error("Error adding MRP item: ", error);
    }
  };

  const handleUpdateItem = async (id: string, updatedItem: Partial<MRPItem>) => {
    try {
      await updateDoc(doc(db, 'mrpItems', id), updatedItem);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating MRP item: ", error);
    }
  };

  const handleDeleteItem = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'mrpItems', id));
    } catch (error) {
      console.error("Error deleting MRP item: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = mrpItems.map(item => 
      `${item.itemName},${item.requiredQuantity},${item.availableQuantity},${item.orderQuantity},${item.expectedDeliveryDate.toISOString()},${item.status}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'mrp_items.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Materials Requirement Planning</h3>
      <form onSubmit={handleAddItem} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Item Name"
            value={newItem.itemName}
            onChange={(e) => setNewItem({ ...newItem, itemName: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="number"
            placeholder="Required Quantity"
            value={newItem.requiredQuantity}
            onChange={(e) => setNewItem({ ...newItem, requiredQuantity: parseInt(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="number"
            placeholder="Available Quantity"
            value={newItem.availableQuantity}
            onChange={(e) => setNewItem({ ...newItem, availableQuantity: parseInt(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="number"
            placeholder="Order Quantity"
            value={newItem.orderQuantity}
            onChange={(e) => setNewItem({ ...newItem, orderQuantity: parseInt(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="date"
            value={newItem.expectedDeliveryDate.toISOString().split('T')[0]}
            onChange={(e) => setNewItem({ ...newItem, expectedDeliveryDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
          <select
            value={newItem.status}
            onChange={(e) => setNewItem({ ...newItem, status: e.target.value as MRPItem['status'] })}
            className="p-2 border rounded"
          >
            <option value="pending">Pending</option>
            <option value="ordered">Ordered</option>
            <option value="received">Received</option>
          </select>
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add MRP Item
        </button>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Item Name</th>
            <th className="py-3 px-6 text-right">Required Qty</th>
            <th className="py-3 px-6 text-right">Available Qty</th>
            <th className="py-3 px-6 text-right">Order Qty</th>
            <th className="py-3 px-6 text-left">Expected Delivery</th>
            <th className="py-3 px-6 text-left">Status</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {mrpItems.map((item) => (
            <tr key={item.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{item.itemName}</td>
              <td className="py-3 px-6 text-right">{item.requiredQuantity}</td>
              <td className="py-3 px-6 text-right">{item.availableQuantity}</td>
              <td className="py-3 px-6 text-right">{item.orderQuantity}</td>
              <td className="py-3 px-6 text-left">{item.expectedDeliveryDate.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-left">
                <span className={`py-1 px-3 rounded-full text-xs ${
                  item.status === 'pending' ? 'bg-yellow-200 text-yellow-800' :
                  item.status === 'ordered' ? 'bg-blue-200 text-blue-800' :
                  'bg-green-200 text-green-800'
                }`}>
                  {item.status}
                </span>
              </td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(item.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteItem(item.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default MaterialsRequirementPlanning;

================
File: src/components/features/Manufacturing/ProductionPlanning.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Trash2 } from 'lucide-react';

interface ProductionPlan {
  id: string;
  productName: string;
  quantity: number;
  startDate: Date;
  endDate: Date;
  status: 'planned' | 'in-progress' | 'completed' | 'cancelled';
}

const ProductionPlanning: React.FC = () => {
  const [plans, setPlans] = useState<ProductionPlan[]>([]);
  const [newPlan, setNewPlan] = useState<Omit<ProductionPlan, 'id'>>({
    productName: '',
    quantity: 0,
    startDate: new Date(),
    endDate: new Date(),
    status: 'planned',
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'productionPlans'), orderBy('startDate'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const planData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        startDate: doc.data().startDate.toDate(),
        endDate: doc.data().endDate.toDate(),
      } as ProductionPlan));
      setPlans(planData);
    });
    return unsubscribe;
  }, []);

  const handleAddPlan = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'productionPlans'), {
        ...newPlan,
        startDate: new Date(newPlan.startDate),
        endDate: new Date(newPlan.endDate),
      });
      setNewPlan({
        productName: '',
        quantity: 0,
        startDate: new Date(),
        endDate: new Date(),
        status: 'planned',
      });
    } catch (error) {
      console.error("Error adding production plan: ", error);
    }
  };

  const handleUpdatePlan = async (id: string, updatedPlan: Partial<ProductionPlan>) => {
    try {
      await updateDoc(doc(db, 'productionPlans', id), updatedPlan);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating production plan: ", error);
    }
  };

  const handleDeletePlan = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'productionPlans', id));
    } catch (error) {
      console.error("Error deleting production plan: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = plans.map(plan => 
      `${plan.productName},${plan.quantity},${plan.startDate.toISOString()},${plan.endDate.toISOString()},${plan.status}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'production_plans.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Production Planning</h3>
      <form onSubmit={handleAddPlan} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Product Name"
            value={newPlan.productName}
            onChange={(e) => setNewPlan({ ...newPlan, productName: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="number"
            placeholder="Quantity"
            value={newPlan.quantity}
            onChange={(e) => setNewPlan({ ...newPlan, quantity: parseInt(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="date"
            value={newPlan.startDate.toISOString().split('T')[0]}
            onChange={(e) => setNewPlan({ ...newPlan, startDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="date"
            value={newPlan.endDate.toISOString().split('T')[0]}
            onChange={(e) => setNewPlan({ ...newPlan, endDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
          <select
            value={newPlan.status}
            onChange={(e) => setNewPlan({ ...newPlan, status: e.target.value as ProductionPlan['status'] })}
            className="p-2 border rounded"
          >
            <option value="planned">Planned</option>
            <option value="in-progress">In Progress</option>
            <option value="completed">Completed</option>
            <option value="cancelled">Cancelled</option>
          </select>
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add Production Plan
        </button>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Product Name</th>
            <th className="py-3 px-6 text-right">Quantity</th>
            <th className="py-3 px-6 text-left">Start Date</th>
            <th className="py-3 px-6 text-left">End Date</th>
            <th className="py-3 px-6 text-left">Status</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {plans.map((plan) => (
            <tr key={plan.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{plan.productName}</td>
              <td className="py-3 px-6 text-right">{plan.quantity}</td>
              <td className="py-3 px-6 text-left">{plan.startDate.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-left">{plan.endDate.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-left">
                <span className={`py-1 px-3 rounded-full text-xs ${
                  plan.status === 'planned' ? 'bg-yellow-200 text-yellow-800' :
                  plan.status === 'in-progress' ? 'bg-blue-200 text-blue-800' :
                  plan.status === 'completed' ? 'bg-green-200 text-green-800' :
                  'bg-red-200 text-red-800'
                }`}>
                  {plan.status}
                </span>
              </td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(plan.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeletePlan(plan.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ProductionPlanning;

================
File: src/components/features/Manufacturing/QualityControl.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Trash2 } from 'lucide-react';

interface QualityCheck {
  id: string;
  workOrderId: string;
  productName: string;
  checkDate: Date;
  inspector: string;
  result: 'pass' | 'fail';
  notes: string;
}

const QualityControl: React.FC = () => {
  const [qualityChecks, setQualityChecks] = useState<QualityCheck[]>([]);
  const [newCheck, setNewCheck] = useState<Omit<QualityCheck, 'id'>>({
    workOrderId: '',
    productName: '',
    checkDate: new Date(),
    inspector: '',
    result: 'pass',
    notes: '',
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'qualityChecks'), orderBy('checkDate', 'desc'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const checkData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        checkDate: doc.data().checkDate.toDate(),
      } as QualityCheck));
      setQualityChecks(checkData);
    });
    return unsubscribe;
  }, []);

  const handleAddCheck = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'qualityChecks'), {
        ...newCheck,
        checkDate: new Date(newCheck.checkDate),
      });
      setNewCheck({
        workOrderId: '',
        productName: '',
        checkDate: new Date(),
        inspector: '',
        result: 'pass',
        notes: '',
      });
    } catch (error) {
      console.error("Error adding quality check: ", error);
    }
  };

  const handleUpdateCheck = async (id: string, updatedCheck: Partial<QualityCheck>) => {
    try {
      await updateDoc(doc(db, 'qualityChecks', id), updatedCheck);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating quality check: ", error);
    }
  };

  const handleDeleteCheck = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'qualityChecks', id));
    } catch (error) {
      console.error("Error deleting quality check: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = qualityChecks.map(check => 
      `${check.workOrderId},${check.productName},${check.checkDate.toISOString()},${check.inspector},${check.result},${check.notes}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'quality_checks.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Quality Control</h3>
      <form onSubmit={handleAddCheck} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Work Order ID"
            value={newCheck.workOrderId}
            onChange={(e) => setNewCheck({ ...newCheck, workOrderId: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Product Name"
            value={newCheck.productName}
            onChange={(e) => setNewCheck({ ...newCheck, productName: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="datetime-local"
            value={newCheck.checkDate.toISOString().slice(0, 16)}
            onChange={(e) => setNewCheck({ ...newCheck, checkDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Inspector"
            value={newCheck.inspector}
            onChange={(e) => setNewCheck({ ...newCheck, inspector: e.target.value })}
            className="p-2 border rounded"
          />
          <select
            value={newCheck.result}
            onChange={(e) => setNewCheck({ ...newCheck, result: e.target.value as 'pass' | 'fail' })}
            className="p-2 border rounded"
          >
            <option value="pass">Pass</option>
            <option value="fail">Fail</option>
          </select>
          <input
            type="text"
            placeholder="Notes"
            value={newCheck.notes}
            onChange={(e) => setNewCheck({ ...newCheck, notes: e.target.value })}
            className="p-2 border rounded"
          />
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add Quality Check
        </button>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Work Order ID</th>
            <th className="py-3 px-6 text-left">Product Name</th>
            <th className="py-3 px-6 text-left">Check Date</th>
            <th className="py-3 px-6 text-left">Inspector</th>
            <th className="py-3 px-6 text-left">Result</th>
            <th className="py-3 px-6 text-left">Notes</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {qualityChecks.map((check) => (
            <tr key={check.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{check.workOrderId}</td>
              <td className="py-3 px-6 text-left">{check.productName}</td>
              <td className="py-3 px-6 text-left">{check.checkDate.toLocaleString()}</td>
              <td className="py-3 px-6 text-left">{check.inspector}</td>
              <td className="py-3 px-6 text-left">
                <span className={`py-1 px-3 rounded-full text-xs ${
                  check.result === 'pass' ? 'bg-green-200 text-green-800' : 'bg-red-200 text-red-800'
                }`}>
                  {check.result}
                </span>
              </td>
              <td className="py-3 px-6 text-left">{check.notes}</td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(check.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteCheck(check.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default QualityControl;

================
File: src/components/features/Manufacturing/ShopFloorControl.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Trash2 } from 'lucide-react';

interface ShopFloorActivity {
  id: string;
  workOrderId: string;
  machineId: string;
  operatorId: string;
  startTime: Date;
  endTime: Date | null;
  status: 'in-progress' | 'completed' | 'paused';
  output: number;
  notes: string;
}

const ShopFloorControl: React.FC = () => {
  const [activities, setActivities] = useState<ShopFloorActivity[]>([]);
  const [newActivity, setNewActivity] = useState<Omit<ShopFloorActivity, 'id'>>({
    workOrderId: '',
    machineId: '',
    operatorId: '',
    startTime: new Date(),
    endTime: null,
    status: 'in-progress',
    output: 0,
    notes: '',
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'shopFloorActivities'), orderBy('startTime', 'desc'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const activityData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        startTime: doc.data().startTime.toDate(),
        endTime: doc.data().endTime ? doc.data().endTime.toDate() : null,
      } as ShopFloorActivity));
      setActivities(activityData);
    });
    return unsubscribe;
  }, []);

  const handleAddActivity = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'shopFloorActivities'), {
        ...newActivity,
        startTime: new Date(newActivity.startTime),
        endTime: newActivity.endTime ? new Date(newActivity.endTime) : null,
      });
      setNewActivity({
        workOrderId: '',
        machineId: '',
        operatorId: '',
        startTime: new Date(),
        endTime: null,
        status: 'in-progress',
        output: 0,
        notes: '',
      });
    } catch (error) {
      console.error("Error adding shop floor activity: ", error);
    }
  };

  const handleUpdateActivity = async (id: string, updatedActivity: Partial<ShopFloorActivity>) => {
    try {
      await updateDoc(doc(db, 'shopFloorActivities', id), updatedActivity);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating shop floor activity: ", error);
    }
  };

  const handleDeleteActivity = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'shopFloorActivities', id));
    } catch (error) {
      console.error("Error deleting shop floor activity: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = activities.map(activity => 
      `${activity.workOrderId},${activity.machineId},${activity.operatorId},${activity.startTime.toISOString()},${activity.endTime ? activity.endTime.toISOString() : ''},${activity.status},${activity.output},${activity.notes}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'shop_floor_activities.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Shop Floor Control</h3>
      <form onSubmit={handleAddActivity} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Work Order ID"
            value={newActivity.workOrderId}
            onChange={(e) => setNewActivity({ ...newActivity, workOrderId: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Machine ID"
            value={newActivity.machineId}
            onChange={(e) => setNewActivity({ ...newActivity, machineId: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Operator ID"
            value={newActivity.operatorId}
            onChange={(e) => setNewActivity({ ...newActivity, operatorId: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="datetime-local"
            value={newActivity.startTime.toISOString().slice(0, 16)}
            onChange={(e) => setNewActivity({ ...newActivity, startTime: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="datetime-local"
            value={newActivity.endTime ? newActivity.endTime.toISOString().slice(0, 16) : ''}
            onChange={(e) => setNewActivity({ ...newActivity, endTime: e.target.value ? new Date(e.target.value) : null })}
            className="p-2 border rounded"
          />
          <select
            value={newActivity.status}
            onChange={(e) => setNewActivity({ ...newActivity, status: e.target.value as ShopFloorActivity['status'] })}
            className="p-2 border rounded"
          >
            <option value="in-progress">In Progress</option>
            <option value="completed">Completed</option>
            <option value="paused">Paused</option>
          </select>
          <input
            type="number"
            placeholder="Output"
            value={newActivity.output}
            onChange={(e) => setNewActivity({ ...newActivity, output: parseInt(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Notes"
            value={newActivity.notes}
            onChange={(e) => setNewActivity({ ...newActivity, notes: e.target.value })}
            className="p-2 border rounded"
          />
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add Activity
        </button>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Work Order ID</th>
            <th className="py-3 px-6 text-left">Machine ID</th>
            <th className="py-3 px-6 text-left">Operator ID</th>
            <th className="py-3 px-6 text-left">Start Time</th>
            <th className="py-3 px-6 text-left">End Time</th>
            <th className="py-3 px-6 text-left">Status</th>
            <th className="py-3 px-6 text-right">Output</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {activities.map((activity) => (
            <tr key={activity.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{activity.workOrderId}</td>
              <td className="py-3 px-6 text-left">{activity.machineId}</td>
              <td className="py-3 px-6 text-left">{activity.operatorId}</td>
              <td className="py-3 px-6 text-left">{activity.startTime.toLocaleString()}</td>
              <td className="py-3 px-6 text-left">{activity.endTime ? activity.endTime.toLocaleString() : 'N/A'}</td>
              <td className="py-3 px-6 text-left">
                <span className={`py-1 px-3 rounded-full text-xs ${
                  activity.status === 'in-progress' ? 'bg-blue-200 text-blue-800' :
                  activity.status === 'completed' ? 'bg-green-200 text-green-800' :
                  'bg-yellow-200 text-yellow-800'
                }`}>
                  {activity.status}
                </span>
              </td>
              <td className="py-3 px-6 text-right">{activity.output}</td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(activity.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteActivity(activity.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ShopFloorControl;

================
File: src/components/features/Manufacturing/WorkOrderManagement.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Trash2 } from 'lucide-react';

interface WorkOrder {
  id: string;
  orderNumber: string;
  productName: string;
  quantity: number;
  startDate: Date;
  endDate: Date;
  status: 'pending' | 'in-progress' | 'completed' | 'cancelled';
  assignedTo: string;
}

const WorkOrderManagement: React.FC = () => {
  const [workOrders, setWorkOrders] = useState<WorkOrder[]>([]);
  const [newWorkOrder, setNewWorkOrder] = useState<Omit<WorkOrder, 'id'>>({
    orderNumber: '',
    productName: '',
    quantity: 0,
    startDate: new Date(),
    endDate: new Date(),
    status: 'pending',
    assignedTo: '',
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'workOrders'), orderBy('startDate'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const orderData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        startDate: doc.data().startDate.toDate(),
        endDate: doc.data().endDate.toDate(),
      } as WorkOrder));
      setWorkOrders(orderData);
    });
    return unsubscribe;
  }, []);

  const handleAddWorkOrder = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'workOrders'), {
        ...newWorkOrder,
        startDate: new Date(newWorkOrder.startDate),
        endDate: new Date(newWorkOrder.endDate),
      });
      setNewWorkOrder({
        orderNumber: '',
        productName: '',
        quantity: 0,
        startDate: new Date(),
        endDate: new Date(),
        status: 'pending',
        assignedTo: '',
      });
    } catch (error) {
      console.error("Error adding work order: ", error);
    }
  };

  const handleUpdateWorkOrder = async (id: string, updatedOrder: Partial<WorkOrder>) => {
    try {
      await updateDoc(doc(db, 'workOrders', id), updatedOrder);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating work order: ", error);
    }
  };

  const handleDeleteWorkOrder = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'workOrders', id));
    } catch (error) {
      console.error("Error deleting work order: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = workOrders.map(order => 
      `${order.orderNumber},${order.productName},${order.quantity},${order.startDate.toISOString()},${order.endDate.toISOString()},${order.status},${order.assignedTo}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'work_orders.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Work Order Management</h3>
      <form onSubmit={handleAddWorkOrder} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Order Number"
            value={newWorkOrder.orderNumber}
            onChange={(e) => setNewWorkOrder({ ...newWorkOrder, orderNumber: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Product Name"
            value={newWorkOrder.productName}
            onChange={(e) => setNewWorkOrder({ ...newWorkOrder, productName: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="number"
            placeholder="Quantity"
            value={newWorkOrder.quantity}
            onChange={(e) => setNewWorkOrder({ ...newWorkOrder, quantity: parseInt(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="date"
            value={newWorkOrder.startDate.toISOString().split('T')[0]}
            onChange={(e) => setNewWorkOrder({ ...newWorkOrder, startDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="date"
            value={newWorkOrder.endDate.toISOString().split('T')[0]}
            onChange={(e) => setNewWorkOrder({ ...newWorkOrder, endDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
          <select
            value={newWorkOrder.status}
            onChange={(e) => setNewWorkOrder({ ...newWorkOrder, status: e.target.value as WorkOrder['status'] })}
            className="p-2 border rounded"
          >
            <option value="pending">Pending</option>
            <option value="in-progress">In Progress</option>
            <option value="completed">Completed</option>
            <option value="cancelled">Cancelled</option>
          </select>
          <input
            type="text"
            placeholder="Assigned To"
            value={newWorkOrder.assignedTo}
            onChange={(e) => setNewWorkOrder({ ...newWorkOrder, assignedTo: e.target.value })}
            className="p-2 border rounded"
          />
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add Work Order
        </button>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Order Number</th>
            <th className="py-3 px-6 text-left">Product</th>
            <th className="py-3 px-6 text-right">Quantity</th>
            <th className="py-3 px-6 text-left">Start Date</th>
            <th className="py-3 px-6 text-left">End Date</th>
            <th className="py-3 px-6 text-left">Status</th>
            <th className="py-3 px-6 text-left">Assigned To</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {workOrders.map((order) => (
            <tr key={order.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{order.orderNumber}</td>
              <td className="py-3 px-6 text-left">{order.productName}</td>
              <td className="py-3 px-6 text-right">{order.quantity}</td>
              <td className="py-3 px-6 text-left">{order.startDate.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-left">{order.endDate.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-left">
                <span className={`py-1 px-3 rounded-full text-xs ${
                  order.status === 'pending' ? 'bg-yellow-200 text-yellow-800' :
                  order.status === 'in-progress' ? 'bg-blue-200 text-blue-800' :
                  order.status === 'completed' ? 'bg-green-200 text-green-800' :
                  'bg-red-200 text-red-800'
                }`}>
                  {order.status}
                </span>
              </td>
              <td className="py-3 px-6 text-left">{order.assignedTo}</td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(order.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteWorkOrder(order.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default WorkOrderManagement;

================
File: src/components/features/Planning.tsx
================
import React from 'react';

const Planning: React.FC = () => {
  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">Planning</h2>
      <p>This is the Planning feature page. Implement your planning and scheduling functionality here.</p>
    </div>
  );
};

export default Planning;

================
File: src/components/features/PointOfSale.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, updateDoc, doc, getDoc, increment, where } from 'firebase/firestore';
import { db } from '../../firebase';
import { ShoppingCart, Plus, Minus, Trash2, User, DollarSign, BarChart } from 'lucide-react';
import SalesTransactionManagement from './PointOfSale/SalesTransactionManagement';
import InventoryManagement from './PointOfSale/InventoryManagement';
import CustomerManagement from './PointOfSale/CustomerManagement';
import AccountingIntegration from './PointOfSale/AccountingIntegration';
import EmployeeManagement from './PointOfSale/EmployeeManagement';
import ReportingAnalytics from './PointOfSale/ReportingAnalytics';

const PointOfSale: React.FC = () => {
  const [activeTab, setActiveTab] = useState('sales');

  const renderComponent = () => {
    switch (activeTab) {
      case 'sales':
        return <SalesTransactionManagement />;
      case 'inventory':
        return <InventoryManagement />;
      case 'customers':
        return <CustomerManagement />;
      case 'accounting':
        return <AccountingIntegration />;
      case 'employees':
        return <EmployeeManagement />;
      case 'reports':
        return <ReportingAnalytics />;
      default:
        return <SalesTransactionManagement />;
    }
  };

  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">Point of Sale</h2>
      <div className="flex mb-4 space-x-2">
        <button onClick={() => setActiveTab('sales')} className={`px-4 py-2 rounded ${activeTab === 'sales' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}>Sales</button>
        <button onClick={() => setActiveTab('inventory')} className={`px-4 py-2 rounded ${activeTab === 'inventory' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}>Inventory</button>
        <button onClick={() => setActiveTab('customers')} className={`px-4 py-2 rounded ${activeTab === 'customers' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}>Customers</button>
        <button onClick={() => setActiveTab('accounting')} className={`px-4 py-2 rounded ${activeTab === 'accounting' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}>Accounting</button>
        <button onClick={() => setActiveTab('employees')} className={`px-4 py-2 rounded ${activeTab === 'employees' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}>Employees</button>
        <button onClick={() => setActiveTab('reports')} className={`px-4 py-2 rounded ${activeTab === 'reports' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}>Reports</button>
      </div>
      {renderComponent()}
    </div>
  );
};

export default PointOfSale;

================
File: src/components/features/PointOfSale/AccountingIntegration.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, query, where, getDocs } from 'firebase/firestore';
import { db } from '../../../firebase';
import { DollarSign, Download } from 'lucide-react';

interface SalesSummary {
  date: string;
  totalSales: number;
  cashSales: number;
  cardSales: number;
  taxCollected: number;
}

const AccountingIntegration: React.FC = () => {
  const [salesSummary, setSalesSummary] = useState<SalesSummary[]>([]);
  const [dateRange, setDateRange] = useState<'day' | 'week' | 'month'>('day');

  useEffect(() => {
    fetchSalesSummary();
  }, [dateRange]);

  const fetchSalesSummary = async () => {
    const salesCollection = collection(db, 'sales');
    const endDate = new Date();
    const startDate = new Date();

    switch (dateRange) {
      case 'day':
        startDate.setHours(0, 0, 0, 0);
        break;
      case 'week':
        startDate.setDate(endDate.getDate() - 7);
        break;
      case 'month':
        startDate.setMonth(endDate.getMonth() - 1);
        break;
    }

    const q = query(
      salesCollection,
      where('date', '>=', startDate),
      where('date', '<=', endDate)
    );

    try {
      const querySnapshot = await getDocs(q);
      const summaryData: { [date: string]: SalesSummary } = {};

      querySnapshot.forEach((doc) => {
        const data = doc.data();
        const date = new Date(data.date.seconds * 1000).toISOString().split('T')[0];
        if (!summaryData[date]) {
          summaryData[date] = { date, totalSales: 0, cashSales: 0, cardSales: 0, taxCollected: 0 };
        }
        summaryData[date].totalSales += data.total;
        if (data.paymentMethod === 'cash') {
          summaryData[date].cashSales += data.total;
        } else {
          summaryData[date].cardSales += data.total;
        }
        summaryData[date].taxCollected += data.total * 0.1; // Assuming 10% tax rate
      });

      setSalesSummary(Object.values(summaryData).sort((a, b) => a.date.localeCompare(b.date)));
    } catch (error) {
      console.error("Error fetching sales summary: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = salesSummary.map(summary => 
      `${summary.date},${summary.totalSales},${summary.cashSales},${summary.cardSales},${summary.taxCollected}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'sales_summary.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Accounting Integration</h3>
      <div className="mb-4">
        <select
          value={dateRange}
          onChange={(e) => setDateRange(e.target.value as 'day' | 'week' | 'month')}
          className="p-2 border rounded mr-2"
        >
          <option value="day">Today</option>
          <option value="week">This Week</option>
          <option value="month">This Month</option>
        </select>
        <button
          onClick={handleExport}
          className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
        >
          <Download size={18} className="inline mr-2" />
          Export CSV
        </button>
      </div>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Date</th>
            <th className="py-3 px-6 text-right">Total Sales</th>
            <th className="py-3 px-6 text-right">Cash Sales</th>
            <th className="py-3 px-6 text-right">Card Sales</th>
            <th className="py-3 px-6 text-right">Tax Collected</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {salesSummary.map((summary) => (
            <tr key={summary.date} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{summary.date}</td>
              <td className="py-3 px-6 text-right">
                <DollarSign size={18} className="inline mr-1" />
                {summary.totalSales.toFixed(2)}
              </td>
              <td className="py-3 px-6 text-right">${summary.cashSales.toFixed(2)}</td>
              <td className="py-3 px-6 text-right">${summary.cardSales.toFixed(2)}</td>
              <td className="py-3 px-6 text-right">${summary.taxCollected.toFixed(2)}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default AccountingIntegration;

================
File: src/components/features/PointOfSale/Cart.tsx
================
import React from 'react';
import { Plus, Minus, Percent } from 'lucide-react';
import { useSalesContext } from './SalesContext';
import { CartItem } from './types';
import { Button } from "../../ui/button";

interface CartProps {
  onSetActiveInput: (inputId: string | null) => void;
  activeInput: string | null;
  numpadValue: string;
  onApplyDiscount: (productId: string, discount: number) => void;
  isHirePurchase: boolean;
}

const Cart: React.FC<CartProps> = ({ onSetActiveInput, activeInput, numpadValue, onApplyDiscount, isHirePurchase }) => {
  const { cart, removeFromCart, addToCart, calculateTotal } = useSalesContext();

  const renderCartItem = (item: CartItem) => {
    const isDiscountActive = activeInput === `product-${item.id}`;
    const currentDiscount = isDiscountActive ? parseFloat(numpadValue) || item.discount : item.discount;
    const discountedPrice = item.price * (1 - currentDiscount / 100);

    return (
      <div key={item.id} className="flex justify-between items-center border-b py-2">
        <div className="flex items-center">
          {item.imageUrl && (
            <img src={item.imageUrl} alt={item.name} className="w-12 h-12 object-cover mr-2" />
          )}
          <div>
            <span className="font-semibold">{item.name}</span>
            <br />
            <span className="text-sm text-gray-600">
              ${item.price.toFixed(2)} x {item.quantity}
              {currentDiscount > 0 && (
                <>
                  <br />
                  <span className="text-green-600">
                    Discount: {currentDiscount.toFixed(2)}%
                    (${discountedPrice.toFixed(2)})
                  </span>
                </>
              )}
            </span>
          </div>
        </div>
        <div className="flex items-center">
          <button 
            onClick={() => removeFromCart(item.id)}
            className="text-red-500 hover:text-red-600 mr-2"
          >
            <Minus size={16} />
          </button>
          <span className="mx-2">{item.quantity}</span>
          <button 
            onClick={() => addToCart(item)}
            className="text-green-500 hover:text-green-600 mr-4"
          >
            <Plus size={16} />
          </button>
          <button
            onClick={() => onSetActiveInput(`product-${item.id}`)}
            className={`p-1 ${isDiscountActive ? 'bg-blue-100' : ''}`}
          >
            <Percent size={16} />
          </button>
        </div>
      </div>
    );
  };

  const total = calculateTotal();

  return (
    <div>
      <h3 className="text-xl font-semibold mb-2">{isHirePurchase ? 'Hire Purchase Cart' : 'Cart'}</h3>
      {cart.map(renderCartItem)}
      <div className="mt-4">
        <p className="text-xl font-bold">Total: ${total.toFixed(2)}</p>
      </div>
      {isHirePurchase && (
        <div className="mt-4">
          <p className="text-sm text-gray-600">
            Hire purchase terms and conditions will be applied at checkout.
          </p>
        </div>
      )}
    </div>
  );
};

export default Cart;

================
File: src/components/features/PointOfSale/CustomerManagement.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Edit, Trash2, User } from 'lucide-react';

interface Customer {
  id: string;
  name: string;
  email: string;
  phone: string;
  loyaltyPoints: number;
}

const CustomerManagement: React.FC = () => {
  const [customers, setCustomers] = useState<Customer[]>([]);
  const [newCustomer, setNewCustomer] = useState<Omit<Customer, 'id' | 'loyaltyPoints'>>({
    name: '',
    email: '',
    phone: '',
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'customers'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const customersData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      } as Customer));
      setCustomers(customersData);
    });

    return () => unsubscribe();
  }, []);

  const handleAddCustomer = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'customers'), { ...newCustomer, loyaltyPoints: 0 });
      setNewCustomer({ name: '', email: '', phone: '' });
    } catch (error) {
      console.error("Error adding customer: ", error);
    }
  };

  const handleUpdateCustomer = async (id: string, updatedCustomer: Partial<Customer>) => {
    try {
      await updateDoc(doc(db, 'customers', id), updatedCustomer);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating customer: ", error);
    }
  };

  const handleDeleteCustomer = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'customers', id));
    } catch (error) {
      console.error("Error deleting customer: ", error);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Customer Management</h3>
      <form onSubmit={handleAddCustomer} className="mb-4">
        <div className="grid grid-cols-3 gap-4">
          <input
            type="text"
            placeholder="Name"
            value={newCustomer.name}
            onChange={(e) => setNewCustomer({ ...newCustomer, name: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="email"
            placeholder="Email"
            value={newCustomer.email}
            onChange={(e) => setNewCustomer({ ...newCustomer, email: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="tel"
            placeholder="Phone"
            value={newCustomer.phone}
            onChange={(e) => setNewCustomer({ ...newCustomer, phone: e.target.value })}
            className="p-2 border rounded"
          />
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add Customer
        </button>
      </form>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Name</th>
            <th className="py-3 px-6 text-left">Email</th>
            <th className="py-3 px-6 text-left">Phone</th>
            <th className="py-3 px-6 text-right">Loyalty Points</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {customers.map((customer) => (
            <tr key={customer.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">
                <User size={18} className="inline mr-2" />
                {customer.name}
              </td>
              <td className="py-3 px-6 text-left">{customer.email}</td>
              <td className="py-3 px-6 text-left">{customer.phone}</td>
              <td className="py-3 px-6 text-right">{customer.loyaltyPoints}</td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(customer.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteCustomer(customer.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default CustomerManagement;

================
File: src/components/features/PointOfSale/EmployeeManagement.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Edit, Trash2, User } from 'lucide-react';

interface Employee {
  id: string;
  name: string;
  email: string;
  role: string;
  pin: string;
}

const EmployeeManagement: React.FC = () => {
  const [employees, setEmployees] = useState<Employee[]>([]);
  const [newEmployee, setNewEmployee] = useState<Omit<Employee, 'id'>>({
    name: '',
    email: '',
    role: '',
    pin: '',
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'employees'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const employeesData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      } as Employee));
      setEmployees(employeesData);
    });

    return () => unsubscribe();
  }, []);

  const handleAddEmployee = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'employees'), newEmployee);
      setNewEmployee({ name: '', email: '', role: '', pin: '' });
    } catch (error) {
      console.error("Error adding employee: ", error);
    }
  };

  const handleUpdateEmployee = async (id: string, updatedEmployee: Partial<Employee>) => {
    try {
      await updateDoc(doc(db, 'employees', id), updatedEmployee);
      setEditingId(null);
    }catch (error) {
      console.error("Error updating employee: ", error);
    }
  };

  const handleDeleteEmployee = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'employees', id));
    } catch (error) {
      console.error("Error deleting employee: ", error);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Employee Management</h3>
      <form onSubmit={handleAddEmployee} className="mb-4">
        <div className="grid grid-cols-4 gap-4">
          <input
            type="text"
            placeholder="Name"
            value={newEmployee.name}
            onChange={(e) => setNewEmployee({ ...newEmployee, name: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="email"
            placeholder="Email"
            value={newEmployee.email}
            onChange={(e) => setNewEmployee({ ...newEmployee, email: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Role"
            value={newEmployee.role}
            onChange={(e) => setNewEmployee({ ...newEmployee, role: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="password"
            placeholder="PIN"
            value={newEmployee.pin}
            onChange={(e) => setNewEmployee({ ...newEmployee, pin: e.target.value })}
            className="p-2 border rounded"
          />
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add Employee
        </button>
      </form>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Name</th>
            <th className="py-3 px-6 text-left">Email</th>
            <th className="py-3 px-6 text-left">Role</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {employees.map((employee) => (
            <tr key={employee.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">
                <User size={18} className="inline mr-2" />
                {employee.name}
              </td>
              <td className="py-3 px-6 text-left">{employee.email}</td>
              <td className="py-3 px-6 text-left">{employee.role}</td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(employee.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteEmployee(employee.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default EmployeeManagement;

================
File: src/components/features/PointOfSale/HirePurchaseForm.tsx
================
import React, { useState } from 'react';
import { Button } from "../../ui/button";
import { Input } from "../../ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "../../ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../../ui/select";
import { Customer, CartItem, HirePurchaseAgreement } from './types';

interface HirePurchaseFormProps {
  customers: Customer[];
  hirePurchaseItems: CartItem[];
  onConfirm: (formData: HirePurchaseAgreement) => void;
  onBack: () => void;
}

const HirePurchaseForm: React.FC<HirePurchaseFormProps> = ({
  customers,
  hirePurchaseItems,
  onConfirm,
  onBack
}) => {
  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null);
  const [months, setMonths] = useState(6);
  const [interestRate, setInterestRate] = useState(5);
  const [downPayment, setDownPayment] = useState(0);
  const [paymentFrequency, setPaymentFrequency] = useState('monthly');

  const totalAmount = hirePurchaseItems.reduce((total, item) => total + item.price * item.quantity, 0);
  const amountToFinance = totalAmount - downPayment;
  const monthlyPayment = (amountToFinance * (1 + interestRate / 100)) / months;

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedCustomer) return;

    onConfirm({
      selectedCustomer: { id: selectedCustomer.id, name: selectedCustomer.name },
      items: hirePurchaseItems,
      months,
      interestRate,
      downPayment,
      paymentFrequency,
      totalAmount,
      amountToFinance,
      monthlyPayment
    });
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Hire Purchase Details</CardTitle>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-4">
          <Select onValueChange={(value) => setSelectedCustomer(JSON.parse(value))}>
            <SelectTrigger>
              <SelectValue placeholder="Select a customer" />
            </SelectTrigger>
            <SelectContent>
              {customers.map((customer) => (
                <SelectItem key={customer.id} value={JSON.stringify(customer)}>
                  {customer.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>

          <div>
            <label htmlFor="downPayment" className="block text-sm font-medium text-gray-700">Down Payment</label>
            <Input
              id="downPayment"
              type="number"
              value={downPayment}
              onChange={(e) => setDownPayment(Number(e.target.value))}
              min={0}
              max={totalAmount}
              className="mt-1"
            />
          </div>

          <div>
            <label htmlFor="months" className="block text-sm font-medium text-gray-700">Number of Months</label>
            <Input
              id="months"
              type="number"
              value={months}
              onChange={(e) => setMonths(Number(e.target.value))}
              min={1}
              className="mt-1"
            />
          </div>

          <div>
            <label htmlFor="interestRate" className="block text-sm font-medium text-gray-700">Interest Rate (%)</label>
            <Input
              id="interestRate"
              type="number"
              value={interestRate}
              onChange={(e) => setInterestRate(Number(e.target.value))}
              min={0}
              step={0.1}
              className="mt-1"
            />
          </div>

          <div>
            <label htmlFor="paymentFrequency" className="block text-sm font-medium text-gray-700">Payment Frequency</label>
            <Select onValueChange={setPaymentFrequency} value={paymentFrequency}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="weekly">Weekly</SelectItem>
                <SelectItem value="monthly">Monthly</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="flex justify-between">
            <Button type="button" variant="outline" onClick={onBack}>Back</Button>
            <Button type="submit" disabled={!selectedCustomer}>Confirm Agreement</Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );
};

export default HirePurchaseForm;

================
File: src/components/features/PointOfSale/HirePurchasePaymentValidation.tsx
================
import React, { useState } from 'react';
import { Button } from "../../ui/button";
import { Input } from "../../ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "../../ui/card";
import { useSalesContext } from './SalesContext';
import { CreditCard, DollarSign, Calendar, Percent, ArrowRight, Info, User } from 'lucide-react';
import Numpad from './Numpad';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "../../ui/tooltip";
import Select from 'react-select';
import { useToast } from "../../hooks/use-toast";
import { addDoc, collection } from 'firebase/firestore';
import { db } from '../../../firebase';

interface HirePurchasePaymentValidationProps {
  onBack: () => void;
}

const HirePurchasePaymentValidation: React.FC<HirePurchasePaymentValidationProps> = ({ onBack }) => {
  const { 
    calculateTotal, 
    cart,
    customers, 
    selectedCustomer, 
    setSelectedCustomer,
    clearCart 
  } = useSalesContext();
  
  const [downPayment, setDownPayment] = useState(0);
  const [months, setMonths] = useState(6);
  const [interestRate, setInterestRate] = useState(0);
  const [activeInput, setActiveInput] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const totalAmount = calculateTotal();
  const amountToFinance = totalAmount - downPayment;
  const monthlyPayment = (amountToFinance * (1 + interestRate / 100)) / months;

  const handleNumpadClick = (value: string) => {
    if (activeInput === 'downPayment') {
      setDownPayment(prev => Number(prev + value));
    } else if (activeInput === 'months') {
      setMonths(prev => Number(prev + value));
    } else if (activeInput === 'interestRate') {
      setInterestRate(prev => Number(prev + value));
    }
  };

  const handleBackspaceClick = () => {
    if (activeInput === 'downPayment') {
      setDownPayment(prev => Number(String(prev).slice(0, -1)));
    } else if (activeInput === 'months') {
      setMonths(prev => Number(String(prev).slice(0, -1)));
    } else if (activeInput === 'interestRate') {
      setInterestRate(prev => Number(String(prev).slice(0, -1)));
    }
  };

  const generatePaymentSchedule = () => {
    const payments = [];
    const startDate = new Date();
    
    for (let i = 0; i < months; i++) {
      const dueDate = new Date(startDate);
      dueDate.setMonth(dueDate.getMonth() + i + 1);
      
      payments.push({
        id: `payment-${i + 1}`,
        amount: monthlyPayment,
        dueDate,
        status: 'pending'
      });
    }
    
    return payments;
  };

  const handleValidate = async () => {
    if (!selectedCustomer) {
      toast({
        title: "Error",
        description: "Please select a customer before confirming the agreement.",
        variant: "destructive",
      });
      return;
    }

    setIsLoading(true);
    try {
      const startDate = new Date();
      const endDate = new Date(startDate);
      endDate.setMonth(endDate.getMonth() + months);

      const agreementData = {
        customerId: selectedCustomer.id,
        customerName: selectedCustomer.name,
        items: cart.map(item => ({
          id: item.id,
          name: item.name,
          quantity: item.quantity,
          price: item.price,
          discount: item.discount || 0
        })),
        totalAmount,
        downPayment,
        amountFinanced: amountToFinance,
        interestRate,
        term: months,
        monthlyPayment,
        startDate,
        endDate,
        payments: generatePaymentSchedule(),
        status: 'active',
        createdAt: new Date(),
        updatedAt: new Date()
      };

      const docRef = await addDoc(collection(db, 'hirePurchaseAgreements'), agreementData);
      
      toast({
        title: "Success",
        description: `Hire purchase agreement created successfully. Agreement ID: ${docRef.id}`,
      });
      
      clearCart();
      onBack();
    } catch (error) {
      console.error('Error creating hire purchase agreement:', error);
      toast({
        title: "Error",
        description: "Failed to create hire purchase agreement. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const customerOptions = customers.map(customer => ({
    value: customer.id,
    label: customer.name
  }));

  return (
    <TooltipProvider>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 p-4">
        <div>
          <Card className="mb-4">
            <CardHeader>
              <CardTitle className="flex items-center text-xl font-bold text-blue-600">
                <User className="mr-2" />
                Select Customer
              </CardTitle>
            </CardHeader>
            <CardContent>
              <Select
                options={customerOptions}
                value={selectedCustomer ? { value: selectedCustomer.id, label: selectedCustomer.name } : null}
                onChange={(option) => setSelectedCustomer(customers.find(c => c.id === option?.value) || null)}
                placeholder="Choose a customer"
                className="react-select-container"
                classNamePrefix="react-select"
              />
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <CreditCard className="mr-2" />
                Hire Purchase Details
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center space-x-2">
                <DollarSign className="text-green-500" />
                <Input
                  type="number"
                  placeholder="Down Payment"
                  value={downPayment}
                  onChange={(e) => setDownPayment(Number(e.target.value))}
                  onFocus={() => setActiveInput('downPayment')}
                />
              </div>
              <div className="flex items-center space-x-2">
                <Calendar className="text-blue-500" />
                <Input
                  type="number"
                  placeholder="Number of Months"
                  value={months}
                  onChange={(e) => setMonths(Number(e.target.value))}
                  onFocus={() => setActiveInput('months')}
                />
              </div>
              <div className="flex items-center space-x-2">
                <Percent className="text-purple-500" />
                <Input
                  type="number"
                  placeholder="Interest Rate (%)"
                  value={interestRate}
                  onChange={(e) => setInterestRate(Number(e.target.value))}
                  onFocus={() => setActiveInput('interestRate')}
                />
              </div>
            </CardContent>
          </Card>
        </div>
        <div>
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Info className="mr-2" />
                Payment Summary
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="text-4xl font-bold text-green-600 flex items-center justify-between">
                <span>Total Amount</span>
                <span>{totalAmount.toFixed(2)} Rs</span>
              </div>
              <div className="bg-green-100 p-4 rounded-md">
                <div className="font-semibold flex items-center">
                  <ArrowRight className="mr-2 text-green-600" />
                  Monthly Payment
                </div>
                <div className="text-2xl font-bold text-green-600">{monthlyPayment.toFixed(2)} Rs</div>
              </div>
              <div className="space-y-2">
                {[
                  { label: 'Down Payment', value: downPayment.toFixed(2), icon: DollarSign, color: 'text-green-500' },
                  { label: 'Amount to Finance', value: amountToFinance.toFixed(2), icon: CreditCard, color: 'text-blue-500' },
                  { label: 'Number of Months', value: months, icon: Calendar, color: 'text-purple-500' },
                  { label: 'Interest Rate', value: `${interestRate}%`, icon: Percent, color: 'text-orange-500' },
                ].map((item, index) => (
                  <Tooltip key={index}>
                    <TooltipTrigger asChild>
                      <div className="flex justify-between items-center p-2 bg-gray-50 rounded-md cursor-help">
                        <span className="flex items-center">
                          <item.icon className={`mr-2 ${item.color}`} />
                          {item.label}
                        </span>
                        <span className="font-semibold">{item.value} {item.label === 'Down Payment' || item.label === 'Amount to Finance' ? 'Rs' : ''}</span>
                      </div>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>This is the {item.label.toLowerCase()}</p>
                    </TooltipContent>
                  </Tooltip>
                ))}
              </div>
            </CardContent>
          </Card>
          <div className="mt-4">
            <Numpad
              onNumberClick={handleNumpadClick}
              onDiscountClick={() => {}}
              onBackspaceClick={handleBackspaceClick}
              onEnterClick={() => {}}
            />
          </div>
          <div className="grid grid-cols-2 gap-2 mt-4">
            <Button variant="outline" onClick={onBack}>Back</Button>
            <Button onClick={handleValidate} disabled={isLoading || !selectedCustomer}>
              {isLoading ? 'Processing...' : 'Confirm Agreement'}
            </Button>
          </div>
        </div>
      </div>
    </TooltipProvider>
  );
};

export default HirePurchasePaymentValidation;

================
File: src/components/features/PointOfSale/HirePurchaseSummary.tsx
================
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "../../ui/card";
import { CartItem } from './types';

interface HirePurchaseSummaryProps {
  hirePurchaseItems: CartItem[];
}

const HirePurchaseSummary: React.FC<HirePurchaseSummaryProps> = ({ hirePurchaseItems }) => {
  const totalAmount = hirePurchaseItems.reduce((total, item) => total + item.price * item.quantity, 0);

  return (
    <Card>
      <CardHeader>
        <CardTitle>Hire Purchase Summary</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="text-2xl font-bold">Total: ${totalAmount.toFixed(2)}</div>
          <div className="space-y-2">
            {hirePurchaseItems.map((item) => (
              <div key={item.id} className="flex justify-between items-center border-b py-2">
                <div>
                  <span className="font-semibold">{item.name}</span>
                  <br />
                  <span className="text-sm text-gray-600">
                    ${item.price.toFixed(2)} x {item.quantity}
                  </span>
                </div>
                <div className="text-right">
                  ${(item.price * item.quantity).toFixed(2)}
                </div>
              </div>
            ))}
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default HirePurchaseSummary;

================
File: src/components/features/PointOfSale/HirePurchasing.tsx
================
import React, { useState, useEffect } from 'react';
import { useSalesContext } from './SalesContext';
import { useNavigate } from 'react-router-dom';
import { useToast } from "../../hooks/use-toast";
import { collection, getDocs } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Customer, HirePurchaseAgreement } from './types';
import HirePurchaseForm from './HirePurchaseForm';
import HirePurchaseSummary from './HirePurchaseSummary';

const HirePurchasing: React.FC = () => {
  const { hirePurchaseItems, createHirePurchaseAgreement } = useSalesContext();
  const [customers, setCustomers] = useState<Customer[]>([]);
  const navigate = useNavigate();
  const { toast } = useToast();

  useEffect(() => {
    const fetchCustomers = async () => {
      const customersCollection = collection(db, 'customers');
      const customersSnapshot = await getDocs(customersCollection);
      const customersList = customersSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      } as Customer));
      setCustomers(customersList);
    };

    fetchCustomers();
  }, []);

  const handleConfirm = async (formData: HirePurchaseAgreement) => {
    try {
      const agreementId = await createHirePurchaseAgreement(formData);

      toast({
        title: "Hire Purchase Confirmed",
        description: `Agreement ${agreementId} created for ${formData.selectedCustomer.name}. Monthly payment of $${formData.monthlyPayment.toFixed(2)} for ${formData.months} months.`,
      });
      navigate('/point-of-sale');
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to create hire purchase agreement. Please try again.",
        variant: "destructive",
      });
    }
  };

  const handleBack = () => {
    navigate('/point-of-sale');
  };

  if (hirePurchaseItems.length === 0) {
    return (
      <div className="p-4">
        <h2 className="text-2xl font-bold mb-4">No items for hire purchase</h2>
        <button onClick={handleBack} className="bg-blue-500 text-white px-4 py-2 rounded">
          Back to Point of Sale
        </button>
      </div>
    );
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 p-4">
      <HirePurchaseForm
        customers={customers}
        hirePurchaseItems={hirePurchaseItems}
        onConfirm={handleConfirm}
        onBack={handleBack}
      />
      <HirePurchaseSummary hirePurchaseItems={hirePurchaseItems} />
    </div>
  );
};

export default HirePurchasing;

================
File: src/components/features/PointOfSale/ImageUpload.tsx
================
import React, { useState } from 'react';
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { storage } from '../../../firebase';

interface ImageUploadProps {
  onImageUploaded: (url: string) => void;
}

const ImageUpload: React.FC<ImageUploadProps> = ({ onImageUploaded }) => {
  const [isUploading, setIsUploading] = useState(false);
  const [uploadError, setUploadError] = useState<string | null>(null);

  const handleImageChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const image = e.target.files[0];
      setIsUploading(true);
      setUploadError(null);
      const imageRef = ref(storage, `product-images/${image.name}`);
      try {
        console.log('Starting upload...');
        await uploadBytes(imageRef, image);
        console.log('Upload successful, getting download URL...');
        const imageUrl = await getDownloadURL(imageRef);
        console.log('Download URL obtained:', imageUrl);
        onImageUploaded(imageUrl);
      } catch (error) {
        console.error("Error uploading image: ", error);
        setUploadError("Failed to upload image. Please try again.");
      } finally {
        setIsUploading(false);
      }
    }
  };

  return (
    <div className="flex flex-col items-start">
      <input
        type="file"
        accept="image/*"
        onChange={handleImageChange}
        className="p-2 border rounded flex-grow"
        disabled={isUploading}
      />
      {isUploading && <span className="ml-2 mt-2 text-blue-500">Uploading...</span>}
      {uploadError && <span className="ml-2 mt-2 text-red-500">{uploadError}</span>}
    </div>
  );
};

export default ImageUpload;

================
File: src/components/features/PointOfSale/InventoryManagement.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import ProductForm from './ProductForm';
import ProductList from './ProductList';

interface Product {
  id: string;
  name: string;
  quantity: number;
  price: number;
  stock: number;
  lowStockThreshold: number;
  imageUrl?: string;
  barcode?: string;
}

const InventoryManagement: React.FC = () => {
  const [products, setProducts] = useState<Product[]>([]);
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    const q = query(collection(db, 'inventory'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const productsData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        stock: doc.data().quantity, // Map quantity to stock for compatibility
      } as Product));
      setProducts(productsData);
    });

    return () => unsubscribe();
  }, []);

  const handleAddProduct = async (newProduct: Omit<Product, 'id'>) => {
    try {
      await addDoc(collection(db, 'inventory'), {
        ...newProduct,
        quantity: newProduct.stock, // Map stock to quantity for storage
      });
    } catch (error) {
      console.error("Error adding product: ", error);
    }
  };

  const handleUpdateProduct = async (id: string, updatedProduct: Partial<Product>) => {
    try {
      const productToUpdate = { ...updatedProduct };
      if ('stock' in productToUpdate) {
        productToUpdate.quantity = productToUpdate.stock;
        delete productToUpdate.stock;
      }
      await updateDoc(doc(db, 'inventory', id), productToUpdate);
    } catch (error) {
      console.error("Error updating product: ", error);
    }
  };

  const handleDeleteProduct = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'inventory', id));
    } catch (error) {
      console.error("Error deleting product: ", error);
    }
  };

  const filteredProducts = products.filter(product =>
    product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    product.barcode?.includes(searchTerm)
  );

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Inventory Management</h3>
      <div className="mb-4">
        <input
          type="text"
          placeholder="Search products..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="p-2 border rounded w-full"
        />
      </div>
      <ProductForm onSubmit={handleAddProduct} />
      <ProductList
        products={filteredProducts}
        onUpdate={handleUpdateProduct}
        onDelete={handleDeleteProduct}
      />
    </div>
  );
};

export default InventoryManagement;

================
File: src/components/features/PointOfSale/Numpad.tsx
================
import React from 'react';
import { Button } from "../../ui/button";

interface NumpadProps {
  onNumberClick: (value: string) => void;
  onDiscountClick: () => void;
  onBackspaceClick: () => void;
  onEnterClick: () => void;
}

const Numpad: React.FC<NumpadProps> = ({ onNumberClick, onDiscountClick, onBackspaceClick, onEnterClick }) => {
  const buttons = ['7', '8', '9', '4', '5', '6', '1', '2', '3', '0', '.'];

  return (
    <div className="grid grid-cols-3 gap-2">
      {buttons.map((btn) => (
        <Button
          key={btn}
          variant="outline"
          className="aspect-square text-lg font-semibold hover:bg-gray-100"
          onClick={() => onNumberClick(btn)}
        >
          {btn}
        </Button>
      ))}
      <Button
        variant="outline"
        className="aspect-square text-lg font-semibold hover:bg-gray-100"
        onClick={onDiscountClick}
      >
        Discount
      </Button>
      <Button
        variant="outline"
        className="aspect-square text-lg font-semibold hover:bg-gray-100"
        onClick={onBackspaceClick}
      >
        ←
      </Button>
      <Button
        variant="outline"
        className="aspect-square text-lg font-semibold hover:bg-gray-100"
        onClick={onEnterClick}
      >
        Enter
      </Button>
    </div>
  );
};

export default Numpad;

================
File: src/components/features/PointOfSale/PaymentValidation.tsx
================
import React, { useState } from 'react';
import { Button } from "../../ui/button";
import { Input } from "../../ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "../../ui/card";
import { useSalesContext } from './SalesContext';
import { CreditCard, DollarSign, UserPlus } from 'lucide-react';
import Numpad from './Numpad';

interface PaymentValidationProps {
  onBack: () => void;
}

const PaymentValidation: React.FC<PaymentValidationProps> = ({ onBack }) => {
  const { calculateTotal } = useSalesContext();
  const [paymentMethods, setPaymentMethods] = useState({
    cash: 0,
    card: 0,
    customerAccount: 0
  });
  const [activeMethod, setActiveMethod] = useState<keyof typeof paymentMethods>('cash');

  const totalAmount = calculateTotal();
  const totalPaid = Object.values(paymentMethods).reduce((sum, value) => sum + value, 0);
  const change = totalPaid - totalAmount;

  const handlePaymentChange = (method: keyof typeof paymentMethods, value: string) => {
    const numValue = parseFloat(value) || 0;
    setPaymentMethods(prev => ({ ...prev, [method]: numValue }));
  };

  const handleNumpadClick = (value: string) => {
    if (value === '+/-') {
      setPaymentMethods(prev => ({
        ...prev,
        [activeMethod]: prev[activeMethod] * -1
      }));
    } else {
      const currentValue = paymentMethods[activeMethod].toString();
      const newValue = currentValue === '0' ? value : currentValue + value;
      handlePaymentChange(activeMethod, newValue);
    }
  };

  const handleValidate = () => {
    // Implement validation logic here
    console.log('Payment validated');
  };

  return (
    <div className="grid grid-cols-2 gap-4 p-4">
      <div>
        <Card>
          <CardHeader>
            <CardTitle>Payment Methods</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center space-x-2">
              <DollarSign />
              <Input
                type="number"
                placeholder="Cash"
                value={paymentMethods.cash || ''}
                onChange={(e) => handlePaymentChange('cash', e.target.value)}
                onFocus={() => setActiveMethod('cash')}
              />
            </div>
            <div className="flex items-center space-x-2">
              <CreditCard />
              <Input
                type="number"
                placeholder="Card"
                value={paymentMethods.card || ''}
                onChange={(e) => handlePaymentChange('card', e.target.value)}
                onFocus={() => setActiveMethod('card')}
              />
            </div>
            <div className="flex items-center space-x-2">
              <UserPlus />
              <Input
                type="number"
                placeholder="Customer Account"
                value={paymentMethods.customerAccount || ''}
                onChange={(e) => handlePaymentChange('customerAccount', e.target.value)}
                onFocus={() => setActiveMethod('customerAccount')}
              />
            </div>
          </CardContent>
        </Card>
      </div>
      <div>
        <Card>
          <CardHeader>
            <CardTitle>Payment Summary</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="text-4xl font-bold text-green-600">{totalAmount.toFixed(2)} Rs</div>
            <div className="bg-green-100 p-4 rounded-md">
              <div className="font-semibold">Change</div>
              <div className="text-2xl font-bold text-green-600">{change.toFixed(2)} Rs</div>
            </div>
            {Object.entries(paymentMethods).map(([method, amount]) => (
              amount > 0 && (
                <div key={method} className="flex justify-between items-center">
                  <span className="capitalize">{method}</span>
                  <span>{amount.toFixed(2)} Rs</span>
                </div>
              )
            ))}
          </CardContent>
        </Card>
        <div className="mt-4">
          <Numpad onNumberClick={handleNumpadClick} />
        </div>
        <div className="grid grid-cols-2 gap-2 mt-4">
          <Button variant="outline" onClick={onBack}>Back</Button>
          <Button onClick={handleValidate}>Validate</Button>
        </div>
      </div>
    </div>
  );
};

export default PaymentValidation;

================
File: src/components/features/PointOfSale/ProductForm.tsx
================
import React, { useState } from 'react';
import { Plus, Camera } from 'lucide-react';
import ImageUpload from './ImageUpload';

interface ProductFormProps {
  onSubmit: (product: any) => void;
}

const ProductForm: React.FC<ProductFormProps> = ({ onSubmit }) => {
  const [newProduct, setNewProduct] = useState({
    name: '',
    price: 0,
    stock: 0,
    lowStockThreshold: 10,
    imageUrl: '',
    barcode: '',
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit(newProduct);
    setNewProduct({
      name: '',
      price: 0,
      stock: 0,
      lowStockThreshold: 10,
      imageUrl: '',
      barcode: '',
    });
  };

  const handleImageUploaded = (url: string) => {
    setNewProduct(prev => ({ ...prev, imageUrl: url }));
  };

  return (
    <form onSubmit={handleSubmit} className="mb-4">
      <div className="grid grid-cols-2 gap-4">
        <input
          type="text"
          placeholder="Product Name"
          value={newProduct.name}
          onChange={(e) => setNewProduct({ ...newProduct, name: e.target.value })}
          className="p-2 border rounded"
        />
        <input
          type="number"
          placeholder="Price"
          value={newProduct.price}
          onChange={(e) => setNewProduct({ ...newProduct, price: parseFloat(e.target.value) })}
          className="p-2 border rounded"
        />
        <input
          type="number"
          placeholder="Stock"
          value={newProduct.stock}
          onChange={(e) => setNewProduct({ ...newProduct, stock: parseInt(e.target.value) })}
          className="p-2 border rounded"
        />
        <input
          type="number"
          placeholder="Low Stock Threshold"
          value={newProduct.lowStockThreshold}
          onChange={(e) => setNewProduct({ ...newProduct, lowStockThreshold: parseInt(e.target.value) })}
          className="p-2 border rounded"
        />
        <ImageUpload onImageUploaded={handleImageUploaded} />
        {newProduct.imageUrl && (
          <img src={newProduct.imageUrl} alt="Product" className="w-full h-32 object-cover" />
        )}
        <div className="flex items-center">
          <input
            type="text"
            placeholder="Barcode"
            value={newProduct.barcode}
            onChange={(e) => setNewProduct({ ...newProduct, barcode: e.target.value })}
            className="p-2 border rounded flex-grow mr-2"
          />
          <button
            type="button"
            onClick={() => {/* Implement barcode scanning logic */}}
            className="bg-gray-200 p-2 rounded"
          >
            <Camera size={24} />
          </button>
        </div>
      </div>
      <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
        <Plus size={24} /> Add Product
      </button>
    </form>
  );
};

export default ProductForm;

================
File: src/components/features/PointOfSale/ProductList.tsx
================
import React from 'react';
import { Edit, Trash2, AlertTriangle, Plus } from 'lucide-react';
import { Product } from './types';

interface ProductListProps {
  products: Product[];
  onUpdate: (id: string, product: Partial<Product>) => void;
  onDelete: (id: string) => void;
  onAddToCart: (product: Product) => void;
}

const ProductList: React.FC<ProductListProps> = ({ products, onUpdate, onDelete, onAddToCart }) => {
  return (
    <table className="w-full bg-white shadow-md rounded">
      <thead>
        <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
          <th className="py-3 px-6 text-left">Image</th>
          <th className="py-3 px-6 text-left">Name</th>
          <th className="py-3 px-6 text-right">Price</th>
          <th className="py-3 px-6 text-right">Stock</th>
          <th className="py-3 px-6 text-center">Actions</th>
        </tr>
      </thead>
      <tbody className="text-gray-600 text-sm font-light">
        {products.map((product) => (
          <tr key={product.id} className="border-b border-gray-200 hover:bg-gray-100">
            <td className="py-3 px-6 text-left">
              {product.imageUrl && (
                <img src={product.imageUrl} alt={product.name} className="w-12 h-12 object-cover" />
              )}
            </td>
            <td className="py-3 px-6 text-left whitespace-nowrap">
              {product.stock <= product.lowStockThreshold && (
                <AlertTriangle size={18} className="inline text-yellow-500 mr-2" />
              )}
              {product.name}
            </td>
            <td className="py-3 px-6 text-right">${product.price.toFixed(2)}</td>
            <td className="py-3 px-6 text-right">{product.stock}</td>
            <td className="py-3 px-6 text-center">
              <button
                onClick={() => onUpdate(product.id, {})}
                className="text-blue-500 hover:text-blue-700 mr-2"
              >
                <Edit size={18} />
              </button>
              <button
                onClick={() => onDelete(product.id)}
                className="text-red-500 hover:text-red-700 mr-2"
              >
                <Trash2 size={18} />
              </button>
              <button
                onClick={() => onAddToCart(product)}
                className="text-green-500 hover:text-green-700"
              >
                <Plus size={18} />
              </button>
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  );
};

export default ProductList;

================
File: src/components/features/PointOfSale/ReportingAnalytics.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, query, where, getDocs } from 'firebase/firestore';
import { db } from '../../../firebase';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';
import { Download } from 'lucide-react';

interface SalesData {
  date: string;
  totalSales: number;
}

interface ProductSalesData {
  name: string;
  sales: number;
}

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];

const ReportingAnalytics: React.FC = () => {
  const [salesData, setSalesData] = useState<SalesData[]>([]);
  const [productSalesData, setProductSalesData] = useState<ProductSalesData[]>([]);
  const [dateRange, setDateRange] = useState<'week' | 'month' | 'year'>('week');

  useEffect(() => {
    fetchSalesData();
    fetchProductSalesData();
  }, [dateRange]);

  const fetchSalesData = async () => {
    const salesCollection = collection(db, 'sales');
    const endDate = new Date();
    const startDate = new Date();

    switch (dateRange) {
      case 'week':
        startDate.setDate(endDate.getDate() - 7);
        break;
      case 'month':
        startDate.setMonth(endDate.getMonth() - 1);
        break;
      case 'year':
        startDate.setFullYear(endDate.getFullYear() - 1);
        break;
    }

    const q = query(
      salesCollection,
      where('date', '>=', startDate),
      where('date', '<=', endDate)
    );

    try {
      const querySnapshot = await getDocs(q);
      const sales: { [date: string]: number } = {};

      querySnapshot.forEach((doc) => {
        const data = doc.data();
        const date = new Date(data.date.seconds * 1000).toISOString().split('T')[0];
        sales[date] = (sales[date] || 0) + data.total;
      });

      const salesData = Object.entries(sales).map(([date, totalSales]) => ({
        date,
        totalSales,
      }));

      setSalesData(salesData.sort((a, b) => a.date.localeCompare(b.date)));
    } catch (error) {
      console.error("Error fetching sales data: ", error);
    }
  };

  const fetchProductSalesData = async () => {
    const salesCollection = collection(db, 'sales');
    const endDate = new Date();
    const startDate = new Date();
    startDate.setDate(endDate.getDate() - 30); // Last 30 days

    const q = query(
      salesCollection,
      where('date', '>=', startDate),
      where('date', '<=', endDate)
    );

    try {
      const querySnapshot = await getDocs(q);
      const productSales: { [productId: string]: { name: string; sales: number } } = {};

      querySnapshot.forEach((doc) => {
        const data = doc.data();
        data.items.forEach((item: any) => {
          if (!productSales[item.id]) {
            productSales[item.id] = { name: item.name, sales: 0 };
          }
          productSales[item.id].sales += item.quantity;
        });
      });

      const productSalesData = Object.values(productSales)
        .sort((a, b) => b.sales - a.sales)
        .slice(0, 5);

      setProductSalesData(productSalesData);
    } catch (error) {
      console.error("Error fetching product sales data: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = salesData.map(data => 
      `${data.date},${data.totalSales}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'sales_report.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Reporting & Analytics</h3>
      <div className="mb-4">
        <select
          value={dateRange}
          onChange={(e) => setDateRange(e.target.value as 'week' | 'month' | 'year')}
          className="p-2 border rounded mr-2"
        >
          <option value="week">Last Week</option>
          <option value="month">Last Month</option>
          <option value="year">Last Year</option>
        </select>
        <button
          onClick={handleExport}
          className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
        >
          <Download size={18} className="inline mr-2" />
          Export CSV
        </button>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <h4 className="text-lg font-semibold mb-2">Sales Trend</h4>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={salesData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="date" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Bar dataKey="totalSales" fill="#8884d8" name="Total Sales" />
            </BarChart>
          </ResponsiveContainer>
        </div>
        <div>
          <h4 className="text-lg font-semibold mb-2">Top 5 Products (Last 30 Days)</h4>
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie
                data={productSalesData}
                cx="50%"
                cy="50%"
                labelLine={false}
                outerRadius={80}
                fill="#8884d8"
                dataKey="sales"
                label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
              >
                {productSalesData.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                ))}
              </Pie>
              <Tooltip />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </div>
      </div>
    </div>
  );
};

export default ReportingAnalytics;

================
File: src/components/features/PointOfSale/SalesContext.tsx
================
import React, { createContext, useState, useContext, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, updateDoc, doc, increment } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Product, CartItem, SalesContextType, Customer, HirePurchaseAgreement } from './types';
import { createHirePurchaseAgreement as createAgreement } from '../../services/hirePurchaseService';
import { useToast } from "../../hooks/use-toast";

const SalesContext = createContext<SalesContextType | undefined>(undefined);

export const useSalesContext = () => {
  const context = useContext(SalesContext);
  if (!context) {
    throw new Error('useSalesContext must be used within a SalesProvider');
  }
  return context;
};

export const SalesProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [products, setProducts] = useState<Product[]>([]);
  const [cart, setCart] = useState<CartItem[]>([]);
  const [paymentMethod, setPaymentMethod] = useState<string>('cash');
  const [error, setError] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [discount, setDiscount] = useState<number>(0);
  const [isHirePurchase, setIsHirePurchase] = useState(false);
  const [customers, setCustomers] = useState<Customer[]>([]);
  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null);
  const [hirePurchaseItems, setHirePurchaseItems] = useState<CartItem[]>([]);
  const { toast } = useToast();

  useEffect(() => {
    const q = query(collection(db, 'inventory'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const productsData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        stock: doc.data().quantity,
        quantity: doc.data().quantity,
        lowStockThreshold: doc.data().lowStockThreshold || 10
      } as Product));
      setProducts(productsData);
    }, (error) => {
      console.error("Error fetching products: ", error);
      setError('Failed to fetch products. Please try again.');
    });
    return () => unsubscribe();
  }, []);

  useEffect(() => {
    const q = query(collection(db, 'customers'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const customersData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      } as Customer));
      setCustomers(customersData);
    }, (error) => {
      console.error("Error fetching customers: ", error);
      setError('Failed to fetch customers. Please try again.');
    });
    return () => unsubscribe();
  }, []);

  const addToCart = (product: Product) => {
    const existingItem = cart.find(item => item.id === product.id);
    if (existingItem) {
      if (existingItem.quantity < product.stock) {
        setCart(cart.map(item =>
          item.id === product.id ? { ...item, quantity: item.quantity + 1 } : item
        ));
      } else {
        setError('Cannot add more than available stock');
      }
    } else {
      setCart([...cart, { ...product, quantity: 1, discount: 0 }]);
    }
  };

  const removeFromCart = (productId: string) => {
    const existingItem = cart.find(item => item.id === productId);
    if (existingItem && existingItem.quantity > 1) {
      setCart(cart.map(item =>
        item.id === productId ? { ...item, quantity: item.quantity - 1 } : item
      ));
    } else {
      setCart(cart.filter(item => item.id !== productId));
    }
  };

  const clearCart = () => {
    setCart([]);
    setHirePurchaseItems([]);
    setIsHirePurchase(false);
    setSelectedCustomer(null);
  };

  const calculateSubtotal = () => {
    return cart.reduce((total, item) => total + item.price * item.quantity, 0);
  };

  const calculateTotal = () => {
    const subtotal = calculateSubtotal();
    const itemDiscounts = cart.reduce((total, item) => {
      const itemTotal = item.price * item.quantity;
      return total + (itemTotal * item.discount / 100);
    }, 0);
    const totalAfterItemDiscounts = subtotal - itemDiscounts;
    return totalAfterItemDiscounts - (totalAfterItemDiscounts * discount / 100);
  };

  const setTotalDiscount = (discountPercentage: number) => {
    setDiscount(discountPercentage);
  };

  const applyProductDiscount = (productId: string, discountPercentage: number) => {
    setCart(cart.map(item =>
      item.id === productId ? { ...item, discount: discountPercentage } : item
    ));
  };

  const setHirePurchaseItemsFromCart = () => {
    console.log('Setting hire purchase items from cart:', cart);
    setHirePurchaseItems([...cart]);
    setIsHirePurchase(true);
  };

  const createHirePurchaseAgreement = async (formData: HirePurchaseAgreement): Promise<string> => {
    try {
      console.log('Creating hire purchase agreement with data:', formData);
      const agreementId = await createAgreement(
        formData.selectedCustomer.id,
        formData.selectedCustomer.name,
        formData.items,
        formData.totalAmount,
        formData.downPayment,
        formData.interestRate,
        formData.months
      );

      // Update inventory quantities
      for (const item of formData.items) {
        const productRef = doc(db, 'inventory', item.id);
        await updateDoc(productRef, {
          quantity: increment(-item.quantity)
        });
      }

      // Add the hire purchase transaction to sales collection
      await addDoc(collection(db, 'sales'), {
        items: formData.items,
        customerId: formData.selectedCustomer.id,
        customerName: formData.selectedCustomer.name,
        totalAmount: formData.totalAmount,
        downPayment: formData.downPayment,
        amountFinanced: formData.amountToFinance,
        interestRate: formData.interestRate,
        term: formData.months,
        monthlyPayment: formData.monthlyPayment,
        type: 'hire-purchase',
        agreementId,
        date: new Date(),
      });

      toast({
        title: "Success",
        description: "Hire purchase agreement created successfully",
      });

      clearCart();
      return agreementId;
    } catch (error) {
      console.error("Error creating hire purchase agreement: ", error);
      toast({
        title: "Error",
        description: "Failed to create hire purchase agreement",
        variant: "destructive",
      });
      throw error;
    }
  };

  const handleCheckout = async () => {
    try {
      await addDoc(collection(db, 'sales'), {
        items: cart.map(item => ({
          id: item.id,
          name: item.name,
          price: item.price,
          quantity: item.quantity,
          discount: item.discount
        })),
        subtotal: calculateSubtotal(),
        totalDiscount: discount,
        total: calculateTotal(),
        paymentMethod: paymentMethod,
        type: 'regular',
        date: new Date(),
      });

      for (const item of cart) {
        const productRef = doc(db, 'inventory', item.id);
        await updateDoc(productRef, {
          quantity: increment(-item.quantity)
        });
      }

      clearCart();
      setDiscount(0);
      toast({
        title: "Success",
        description: "Sale completed successfully!",
      });
    } catch (error) {
      console.error("Error processing sale: ", error);
      toast({
        title: "Error",
        description: "Failed to process sale. Please try again.",
        variant: "destructive",
      });
    }
  };

  const value: SalesContextType = {
    products,
    cart,
    setCart,
    paymentMethod,
    setPaymentMethod,
    error,
    setError,
    searchTerm,
    setSearchTerm,
    discount,
    isHirePurchase,
    setIsHirePurchase,
    customers,
    selectedCustomer,
    setSelectedCustomer,
    hirePurchaseItems,
    setHirePurchaseItemsFromCart,
    createHirePurchaseAgreement,
    addToCart,
    removeFromCart,
    clearCart,
    calculateSubtotal,
    calculateTotal,
    setTotalDiscount,
    applyProductDiscount,
    handleCheckout,
  };

  return <SalesContext.Provider value={value}>{children}</SalesContext.Provider>;
};

================
File: src/components/features/PointOfSale/SalesTransactionManagement.tsx
================
import React, { useState } from 'react';
import { Search } from 'lucide-react';
import { useSalesContext } from './SalesContext';
import ProductList from './ProductList';
import Cart from './Cart';
import { Input } from "../../ui/input";
import { Button } from "../../ui/button";
import PaymentValidation from './PaymentValidation';
import HirePurchasePaymentValidation from './HirePurchasePaymentValidation';
import Numpad from './Numpad';
import { useToast } from "../../hooks/use-toast";
import { Product } from './types';
import { Tabs, TabsContent, TabsList, TabsTrigger } from "../../ui/tabs";

const SalesTransactionManagement: React.FC = () => {
  const { searchTerm, setSearchTerm, error, addToCart, discount, products, setTotalDiscount, applyProductDiscount } = useSalesContext();
  const [showPaymentValidation, setShowPaymentValidation] = useState(false);
  const [activeInput, setActiveInput] = useState<string | null>(null);
  const [numpadValue, setNumpadValue] = useState('');
  const [activeTab, setActiveTab] = useState('regular');
  const { toast } = useToast();

  const handleBackFromPayment = () => {
    setShowPaymentValidation(false);
  };

  const handleNumpadClick = (value: string) => {
    if (activeInput === 'search') {
      setSearchTerm(prev => prev + value);
    } else if (activeInput?.startsWith('product-') || activeInput === 'totalDiscount') {
      setNumpadValue(prev => prev + value);
    }
  };

  const handleDiscountClick = () => {
    if (!activeInput?.startsWith('product-') && activeInput !== 'totalDiscount') {
      setActiveInput('totalDiscount');
      setNumpadValue('');
    }
  };

  const handleBackspaceClick = () => {
    if (activeInput === 'search') {
      setSearchTerm(prev => prev.slice(0, -1));
    } else if (activeInput?.startsWith('product-') || activeInput === 'totalDiscount') {
      setNumpadValue(prev => prev.slice(0, -1));
    }
  };

  const handleEnterClick = () => {
    if (activeInput?.startsWith('product-')) {
      const productId = activeInput.split('-')[1];
      applyProductDiscount(productId, parseFloat(numpadValue));
    } else if (activeInput === 'totalDiscount') {
      setTotalDiscount(parseFloat(numpadValue));
    }
    setNumpadValue('');
    setActiveInput(null);
  };

  if (showPaymentValidation) {
    return activeTab === 'hirePurchase' 
      ? <HirePurchasePaymentValidation onBack={handleBackFromPayment} />
      : <PaymentValidation onBack={handleBackFromPayment} />;
  }

  return (
    <div className="grid grid-cols-2 gap-4 p-4">
      <div className="bg-white rounded-lg shadow-md p-4">
        <div className="mb-4 relative">
          <Input
            type="text"
            placeholder="Search products..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            onFocus={() => setActiveInput('search')}
            className="pl-10"
          />
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
        </div>
        <ProductList
          products={products}
          onUpdate={() => {}}
          onDelete={() => {}}
          onAddToCart={(product: Product) => addToCart(product)}
        />
      </div>
      <div className="bg-white rounded-lg shadow-md p-4">
        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="regular">Regular Sale</TabsTrigger>
            <TabsTrigger value="hirePurchase">Hire Purchase</TabsTrigger>
          </TabsList>
          <TabsContent value="regular">
            <Cart
              onSetActiveInput={setActiveInput}
              activeInput={activeInput}
              numpadValue={numpadValue}
              onApplyDiscount={(productId, discount) => applyProductDiscount(productId, discount)}
              isHirePurchase={false}
            />
          </TabsContent>
          <TabsContent value="hirePurchase">
            <Cart
              onSetActiveInput={setActiveInput}
              activeInput={activeInput}
              numpadValue={numpadValue}
              onApplyDiscount={(productId, discount) => applyProductDiscount(productId, discount)}
              isHirePurchase={true}
            />
          </TabsContent>
        </Tabs>
        <div className="mt-4">
          <Numpad
            onNumberClick={handleNumpadClick}
            onDiscountClick={handleDiscountClick}
            onBackspaceClick={handleBackspaceClick}
            onEnterClick={handleEnterClick}
          />
        </div>
        <div className="mt-4 space-y-2">
          <Button 
            className="w-full bg-purple-600 hover:bg-purple-700 text-white"
            onClick={() => setShowPaymentValidation(true)}
          >
            Proceed to Payment
          </Button>
        </div>
      </div>
      {error && <div className="col-span-2 text-red-500">{error}</div>}
    </div>
  );
};

export default SalesTransactionManagement;

================
File: src/components/features/PointOfSale/types.ts
================
export interface Product {
  id: string;
  name: string;
  price: number;
  stock: number;
  quantity: number;
  lowStockThreshold: number;
  imageUrl?: string;
  barcode?: string;
}

export interface CartItem extends Product {
  quantity: number;
  discount: number;
}

export interface Customer {
  id: string;
  name: string;
  email: string;
  phone: string;
  hirePurchaseCustomer: boolean;
}

export interface HirePurchaseAgreement {
  selectedCustomer: { id: string; name: string };
  items: CartItem[];
  months: number;
  interestRate: number;
  downPayment: number;
  paymentFrequency: string;
  totalAmount: number;
  amountToFinance: number;
  monthlyPayment: number;
}

export interface SalesContextType {
  products: Product[];
  cart: CartItem[];
  setCart: React.Dispatch<React.SetStateAction<CartItem[]>>;
  paymentMethod: string;
  setPaymentMethod: React.Dispatch<React.SetStateAction<string>>;
  error: string;
  setError: React.Dispatch<React.SetStateAction<string>>;
  searchTerm: string;
  setSearchTerm: React.Dispatch<React.SetStateAction<string>>;
  discount: number;
  isHirePurchase: boolean;
  setIsHirePurchase: React.Dispatch<React.SetStateAction<boolean>>;
  customers: Customer[];
  selectedCustomer: Customer | null;
  setSelectedCustomer: React.Dispatch<React.SetStateAction<Customer | null>>;
  hirePurchaseItems: CartItem[];
  setHirePurchaseItemsFromCart: () => void;
  createHirePurchaseAgreement: (formData: HirePurchaseAgreement) => Promise<string>;
  addToCart: (product: Product) => void;
  removeFromCart: (productId: string) => void;
  clearCart: () => void;
  calculateSubtotal: () => number;
  calculateTotal: () => number;
  setTotalDiscount: (discountPercentage: number) => void;
  applyProductDiscount: (productId: string, discountPercentage: number) => void;
  handleCheckout: () => Promise<void>;
}

================
File: src/components/features/Project.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, deleteDoc, doc, updateDoc } from 'firebase/firestore';
import { db } from '../../firebase';
import { Folder, Edit, Trash2, Save, X, Plus } from 'lucide-react';

interface Project {
  id: string;
  name: string;
  description: string;
  status: 'Not Started' | 'In Progress' | 'Completed';
}

const Project: React.FC = () => {
  const [projects, setProjects] = useState<Project[]>([]);
  const [newProject, setNewProject] = useState({ name: '', description: '', status: 'Not Started' as const });
  const [editingProject, setEditingProject] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    const q = query(collection(db, 'projects'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const projectsData = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Project));
      setProjects(projectsData);
      setLoading(false);
    }, (error) => {
      console.error("Error fetching projects: ", error);
      setError('Failed to fetch projects. Please try again.');
      setLoading(false);
    });

    return () => unsubscribe();
  }, []);

  const handleAddProject = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newProject.name || !newProject.description) {
      setError('Name and description are required.');
      return;
    }
    try {
      await addDoc(collection(db, 'projects'), newProject);
      setNewProject({ name: '', description: '', status: 'Not Started' });
      setError('');
    } catch (error) {
      console.error("Error adding project: ", error);
      setError('Failed to add project. Please try again.');
    }
  };

  const handleDeleteProject = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'projects', id));
    } catch (error) {
      console.error("Error deleting project: ", error);
      setError('Failed to delete project. Please try again.');
    }
  };

  const handleEditProject = async (id: string, updatedProject: Partial<Project>) => {
    try {
      await updateDoc(doc(db, 'projects', id), updatedProject);
      setEditingProject(null);
    } catch (error) {
      console.error("Error updating project: ", error);
      setError('Failed to update project. Please try again.');
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <div className="max-w-4xl mx-auto">
      <h2 className="text-2xl font-bold mb-4">Project Management</h2>
      {error && <p className="text-red-500 mb-4">{error}</p>}
      <form onSubmit={handleAddProject} className="mb-8">
        <div className="flex flex-wrap -mx-2 mb-4">
          <div className="w-full md:w-1/3 px-2 mb-4 md:mb-0">
            <input
              type="text"
              placeholder="Project Name"
              className="w-full p-2 border rounded"
              value={newProject.name}
              onChange={(e) => setNewProject({ ...newProject, name: e.target.value })}
            />
          </div>
          <div className="w-full md:w-1/3 px-2 mb-4 md:mb-0">
            <input
              type="text"
              placeholder="Description"
              className="w-full p-2 border rounded"
              value={newProject.description}
              onChange={(e) => setNewProject({ ...newProject, description: e.target.value })}
            />
          </div>
          <div className="w-full md:w-1/3 px-2">
            <select
              className="w-full p-2 border rounded"
              value={newProject.status}
              onChange={(e) => setNewProject({ ...newProject, status: e.target.value as Project['status'] })}
            >
              <option value="Not Started">Not Started</option>
              <option value="In Progress">In Progress</option>
              <option value="Completed">Completed</option>
            </select>
          </div>
        </div>
        <button type="submit" className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 flex items-center">
          <Plus size={16} className="mr-2" />
          Add Project
        </button>
      </form>
      <div className="bg-white shadow-md rounded my-6">
        <table className="w-full table-auto">
          <thead>
            <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
              <th className="py-3 px-6 text-left">Name</th>
              <th className="py-3 px-6 text-left">Description</th>
              <th className="py-3 px-6 text-left">Status</th>
              <th className="py-3 px-6 text-center">Actions</th>
            </tr>
          </thead>
          <tbody className="text-gray-600 text-sm font-light">
            {projects.map((project) => (
              <tr key={project.id} className="border-b border-gray-200 hover:bg-gray-100">
                <td className="py-3 px-6 text-left whitespace-nowrap">
                  <div className="flex items-center">
                    <Folder size={16} className="mr-2" />
                    {editingProject === project.id ? (
                      <input
                        type="text"
                        value={project.name}
                        onChange={(e) => handleEditProject(project.id, { name: e.target.value })}
                        className="border rounded px-2 py-1"
                      />
                    ) : (
                      <span>{project.name}</span>
                    )}
                  </div>
                </td>
                <td className="py-3 px-6 text-left">
                  {editingProject === project.id ? (
                    <input
                      type="text"
                      value={project.description}
                      onChange={(e) => handleEditProject(project.id, { description: e.target.value })}
                      className="border rounded px-2 py-1 w-full"
                    />
                  ) : (
                    <span>{project.description}</span>
                  )}
                </td>
                <td className="py-3 px-6 text-left">
                  {editingProject === project.id ? (
                    <select
                      value={project.status}
                      onChange={(e) => handleEditProject(project.id, { status: e.target.value as Project['status'] })}
                      className="border rounded px-2 py-1"
                    >
                      <option value="Not Started">Not Started</option>
                      <option value="In Progress">In Progress</option>
                      <option value="Completed">Completed</option>
                    </select>
                  ) : (
                    <span className={`py-1 px-3 rounded-full text-xs ${
                      project.status === 'Not Started' ? 'bg-red-200 text-red-800' :
                      project.status === 'In Progress' ? 'bg-yellow-200 text-yellow-800' :
                      'bg-green-200 text-green-800'
                    }`}>
                      {project.status}
                    </span>
                  )}
                </td>
                <td className="py-3 px-6 text-center">
                  {editingProject === project.id ? (
                    <>
                      <button
                        onClick={() => setEditingProject(null)}
                        className="text-green-500 hover:text-green-600 mr-2"
                      >
                        <Save size={16} />
                      </button>
                      <button
                        onClick={() => setEditingProject(null)}
                        className="text-red-500 hover:text-red-600"
                      >
                        <X size={16} />
                      </button>
                    </>
                  ) : (
                    <>
                      <button
                        onClick={() => setEditingProject(project.id)}
                        className="text-blue-500 hover:text-blue-600 mr-2"
                      >
                        <Edit size={16} />
                      </button>
                      <button
                        onClick={() => handleDeleteProject(project.id)}
                        className="text-red-500 hover:text-red-600"
                      >
                        <Trash2 size={16} />
                      </button>
                    </>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default Project;

================
File: src/components/features/Purchase.tsx
================
import React from 'react';

const Purchase: React.FC = () => {
  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">Purchase</h2>
      <p>This is the Purchase feature page. Implement your purchasing and procurement functionality here.</p>
    </div>
  );
};

export default Purchase;

================
File: src/components/features/SalesOrderManagement.tsx
================
import React, { useState } from 'react';
import { Package, DollarSign, TrendingUp, RefreshCcw, BarChart } from 'lucide-react';
import SalesOrderCreation from './SalesOrderManagement/SalesOrderCreation';
import OrderFulfillment from './SalesOrderManagement/OrderFulfillment';
import ReturnsRefunds from './SalesOrderManagement/ReturnsRefunds';
import PricingManagement from './SalesOrderManagement/PricingManagement';
import SalesAnalytics from './SalesOrderManagement/SalesAnalytics';

const SalesOrderManagement: React.FC = () => {
  const [activeTab, setActiveTab] = useState('salesOrder');

  const tabs = [
    { id: 'salesOrder', name: 'Sales Order Creation', icon: <Package /> },
    { id: 'fulfillment', name: 'Order Fulfillment', icon: <DollarSign /> },
    { id: 'returns', name: 'Returns and Refunds', icon: <RefreshCcw /> },
    { id: 'pricing', name: 'Pricing Management', icon: <TrendingUp /> },
    { id: 'analytics', name: 'Sales Analytics', icon: <BarChart /> },
  ];

  const renderComponent = () => {
    switch (activeTab) {
      case 'salesOrder':
        return <SalesOrderCreation />;
      case 'fulfillment':
        return <OrderFulfillment />;
      case 'returns':
        return <ReturnsRefunds />;
      case 'pricing':
        return <PricingManagement />;
      case 'analytics':
        return <SalesAnalytics />;
      default:
        return <SalesOrderCreation />;
    }
  };

  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-6">Sales and Order Management</h2>
      <div className="flex mb-6 space-x-2 overflow-x-auto">
        {tabs.map((tab) => (
          <button
            key={tab.id}
            className={`flex items-center px-4 py-2 rounded-lg transition-colors duration-200 ${
              activeTab === tab.id
                ? 'bg-blue-500 text-white'
                : 'bg-white text-gray-600 hover:bg-gray-100'
            }`}
            onClick={() => setActiveTab(tab.id)}
          >
            {tab.icon}
            <span className="ml-2">{tab.name}</span>
          </button>
        ))}
      </div>
      <div className="bg-white rounded-lg shadow p-6">
        {renderComponent()}
      </div>
    </div>
  );
};

export default SalesOrderManagement;

================
File: src/components/features/SalesOrderManagement/OrderFulfillment.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Trash2, Truck } from 'lucide-react';

interface FulfillmentOrder {
  id: string;
  orderId: string;
  customerName: string;
  status: 'pending' | 'processing' | 'shipped' | 'delivered';
  shippingMethod: string;
  trackingNumber: string;
  estimatedDeliveryDate: Date;
  actualDeliveryDate?: Date;
  createdAt: Date;
}

const OrderFulfillment: React.FC = () => {
  const [fulfillments, setFulfillments] = useState<FulfillmentOrder[]>([]);
  const [newFulfillment, setNewFulfillment] = useState<Omit<FulfillmentOrder, 'id' | 'createdAt'>>({
    orderId: '',
    customerName: '',
    status: 'pending',
    shippingMethod: '',
    trackingNumber: '',
    estimatedDeliveryDate: new Date(),
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'orderFulfillments'), orderBy('createdAt', 'desc'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const fulfillmentsData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        estimatedDeliveryDate: doc.data().estimatedDeliveryDate.toDate(),
        actualDeliveryDate: doc.data().actualDeliveryDate?.toDate(),
        createdAt: doc.data().createdAt.toDate(),
      } as FulfillmentOrder));
      setFulfillments(fulfillmentsData);
    });
    return unsubscribe;
  }, []);

  const handleAddFulfillment = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'orderFulfillments'), {
        ...newFulfillment,
        createdAt: new Date(),
      });
      setNewFulfillment({
        orderId: '',
        customerName: '',
        status: 'pending',
        shippingMethod: '',
        trackingNumber: '',
        estimatedDeliveryDate: new Date(),
      });
    } catch (error) {
      console.error("Error adding fulfillment: ", error);
    }
  };

  const handleUpdateFulfillment = async (id: string, updatedFulfillment: Partial<FulfillmentOrder>) => {
    try {
      await updateDoc(doc(db, 'orderFulfillments', id), updatedFulfillment);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating fulfillment: ", error);
    }
  };

  const handleDeleteFulfillment = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'orderFulfillments', id));
    } catch (error) {
      console.error("Error deleting fulfillment: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = fulfillments.map(fulfillment => 
      `${fulfillment.orderId},${fulfillment.customerName},${fulfillment.status},${fulfillment.shippingMethod},${fulfillment.trackingNumber},${fulfillment.estimatedDeliveryDate.toISOString()},${fulfillment.actualDeliveryDate?.toISOString() || ''},${fulfillment.createdAt.toISOString()}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'order_fulfillments.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Order Fulfillment</h3>
      <form onSubmit={handleAddFulfillment} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Order ID"
            value={newFulfillment.orderId}
            onChange={(e) => setNewFulfillment({ ...newFulfillment, orderId: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Customer Name"
            value={newFulfillment.customerName}
            onChange={(e) => setNewFulfillment({ ...newFulfillment, customerName: e.target.value })}
            className="p-2 border rounded"
          />
          <select
            value={newFulfillment.status}
            onChange={(e) => setNewFulfillment({ ...newFulfillment, status: e.target.value as FulfillmentOrder['status'] })}
            className="p-2 border rounded"
          >
            <option value="pending">Pending</option>
            <option value="processing">Processing</option>
            <option value="shipped">Shipped</option>
            <option value="delivered">Delivered</option>
          </select>
          <input
            type="text"
            placeholder="Shipping Method"
            value={newFulfillment.shippingMethod}
            onChange={(e) => setNewFulfillment({ ...newFulfillment, shippingMethod: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Tracking Number"
            value={newFulfillment.trackingNumber}
            onChange={(e) => setNewFulfillment({ ...newFulfillment, trackingNumber: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="date"
            value={newFulfillment.estimatedDeliveryDate.toISOString().split('T')[0]}
            onChange={(e) => setNewFulfillment({ ...newFulfillment, estimatedDeliveryDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add Fulfillment
        </button>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Order ID</th>
            <th className="py-3 px-6 text-left">Customer</th>
            <th className="py-3 px-6 text-left">Status</th>
            <th className="py-3 px-6 text-left">Shipping Method</th>
            <th className="py-3 px-6 text-left">Tracking Number</th>
            <th className="py-3 px-6 text-left">Est. Delivery</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {fulfillments.map((fulfillment) => (
            <tr key={fulfillment.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{fulfillment.orderId}</td>
              <td className="py-3 px-6 text-left">{fulfillment.customerName}</td>
              <td className="py-3 px-6 text-left">
                <span className={`py-1 px-3 rounded-full text-xs ${
                  fulfillment.status === 'pending' ? 'bg-yellow-200 text-yellow-800' :
                  fulfillment.status === 'processing' ? 'bg-blue-200 text-blue-800' :
                  fulfillment.status === 'shipped' ? 'bg-purple-200 text-purple-800' :
                  'bg-green-200 text-green-800'
                }`}>
                  {fulfillment.status}
                </span>
              </td>
              <td className="py-3 px-6 text-left">{fulfillment.shippingMethod}</td>
              <td className="py-3 px-6 text-left">{fulfillment.trackingNumber}</td>
              <td className="py-3 px-6 text-left">{fulfillment.estimatedDeliveryDate.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(fulfillment.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteFulfillment(fulfillment.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default OrderFulfillment;

================
File: src/components/features/SalesOrderManagement/PricingManagement.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Trash2, DollarSign, Percent } from 'lucide-react';

interface PricingRule {
  id: string;
  name: string;
  type: 'fixed' | 'percentage';
  value: number;
  startDate: Date;
  endDate: Date;
  productIds: string[];
  customerGroups: string[];
  active: boolean;
  createdAt: Date;
}

const PricingManagement: React.FC = () => {
  const [pricingRules, setPricingRules] = useState<PricingRule[]>([]);
  const [newPricingRule, setNewPricingRule] = useState<Omit<PricingRule, 'id' | 'createdAt'>>({
    name: '',
    type: 'fixed',
    value: 0,
    startDate: new Date(),
    endDate: new Date(),
    productIds: [],
    customerGroups: [],
    active: true,
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'pricingRules'), orderBy('createdAt', 'desc'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const pricingRulesData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        startDate: doc.data().startDate.toDate(),
        endDate: doc.data().endDate.toDate(),
        createdAt: doc.data().createdAt.toDate(),
      } as PricingRule));
      setPricingRules(pricingRulesData);
    });
    return unsubscribe;
  }, []);

  const handleAddPricingRule = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'pricingRules'), {
        ...newPricingRule,
        createdAt: new Date(),
      });
      setNewPricingRule({
        name: '',
        type: 'fixed',
        value: 0,
        startDate: new Date(),
        endDate: new Date(),
        productIds: [],
        customerGroups: [],
        active: true,
      });
    } catch (error) {
      console.error("Error adding pricing rule: ", error);
    }
  };

  const handleUpdatePricingRule = async (id: string, updatedPricingRule: Partial<PricingRule>) => {
    try {
      await updateDoc(doc(db, 'pricingRules', id), updatedPricingRule);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating pricing rule: ", error);
    }
  };

  const handleDeletePricingRule = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'pricingRules', id));
    } catch (error) {
      console.error("Error deleting pricing rule: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = pricingRules.map(rule => 
      `${rule.name},${rule.type},${rule.value},${rule.startDate.toISOString()},${rule.endDate.toISOString()},${rule.productIds.join(';')},${rule.customerGroups.join(';')},${rule.active},${rule.createdAt.toISOString()}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'pricing_rules.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Pricing Management</h3>
      <form onSubmit={handleAddPricingRule} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Rule Name"
            value={newPricingRule.name}
            onChange={(e) => setNewPricingRule({ ...newPricingRule, name: e.target.value })}
            className="p-2 border rounded"
          />
          <select
            value={newPricingRule.type}
            onChange={(e) => setNewPricingRule({ ...newPricingRule, type: e.target.value as 'fixed' | 'percentage' })}
            className="p-2 border rounded"
          >
            <option value="fixed">Fixed Amount</option>
            <option value="percentage">Percentage</option>
          </select>
          <input
            type="number"
            placeholder="Value"
            value={newPricingRule.value}
            onChange={(e) => setNewPricingRule({ ...newPricingRule, value: parseFloat(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="date"
            placeholder="Start Date"
            value={newPricingRule.startDate.toISOString().split('T')[0]}
            onChange={(e) => setNewPricingRule({ ...newPricingRule, startDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="date"
            placeholder="End Date"
            value={newPricingRule.endDate.toISOString().split('T')[0]}
            onChange={(e) => setNewPricingRule({ ...newPricingRule, endDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Product IDs (comma-separated)"
            value={newPricingRule.productIds.join(',')}
            onChange={(e) => setNewPricingRule({ ...newPricingRule, productIds: e.target.value.split(',') })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Customer Groups (comma-separated)"
            value={newPricingRule.customerGroups.join(',')}
            onChange={(e) => setNewPricingRule({ ...newPricingRule, customerGroups: e.target.value.split(',') })}
            className="p-2 border rounded"
          />
          <div className="flex items-center">
            <input
              type="checkbox"
              checked={newPricingRule.active}
              onChange={(e) => setNewPricingRule({ ...newPricingRule, active: e.target.checked })}
              className="mr-2"
            />
            <label>Active</label>
          </div>
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add Pricing Rule
        </button>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Name</th>
            <th className="py-3 px-6 text-left">Type</th>
            <th className="py-3 px-6 text-right">Value</th>
            <th className="py-3 px-6 text-left">Start Date</th>
            <th className="py-3 px-6 text-left">End Date</th>
            <th className="py-3 px-6 text-center">Active</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {pricingRules.map((rule) => (
            <tr key={rule.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{rule.name}</td>
              <td className="py-3 px-6 text-left">
                {rule.type === 'fixed' ? <DollarSign size={18} className="inline mr-1" /> : <Percent size={18} className="inline mr-1" />}
                {rule.type}
              </td>
              <td className="py-3 px-6 text-right">{rule.value}{rule.type === 'percentage' && '%'}</td>
              <td className="py-3 px-6 text-left">{rule.startDate.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-left">{rule.endDate.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-center">
                <span className={`py-1 px-3 rounded-full text-xs ${
                  rule.active ? 'bg-green-200 text-green-800' : 'bg-red-200 text-red-800'
                }`}>
                  {rule.active ? 'Active' : 'Inactive'}
                </span>
              </td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(rule.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeletePricingRule(rule.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default PricingManagement;

================
File: src/components/features/SalesOrderManagement/ReturnsRefunds.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Trash2, RefreshCcw } from 'lucide-react';

interface ReturnRefund {
  id: string;
  orderId: string;
  customerName: string;
  reason: string;
  status: 'pending' | 'approved' | 'rejected' | 'processed';
  amount: number;
  requestDate: Date;
  processedDate?: Date;
  createdAt: Date;
}

const ReturnsRefunds: React.FC = () => {
  const [returnsRefunds, setReturnsRefunds] = useState<ReturnRefund[]>([]);
  const [newReturnRefund, setNewReturnRefund] = useState<Omit<ReturnRefund, 'id' | 'createdAt'>>({
    orderId: '',
    customerName: '',
    reason: '',
    status: 'pending',
    amount: 0,
    requestDate: new Date(),
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'returnsRefunds'), orderBy('createdAt', 'desc'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const returnsRefundsData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        requestDate: doc.data().requestDate.toDate(),
        processedDate: doc.data().processedDate?.toDate(),
        createdAt: doc.data().createdAt.toDate(),
      } as ReturnRefund));
      setReturnsRefunds(returnsRefundsData);
    });
    return unsubscribe;
  }, []);

  const handleAddReturnRefund = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'returnsRefunds'), {
        ...newReturnRefund,
        createdAt: new Date(),
      });
      setNewReturnRefund({
        orderId: '',
        customerName: '',
        reason: '',
        status: 'pending',
        amount: 0,
        requestDate: new Date(),
      });
    } catch (error) {
      console.error("Error adding return/refund: ", error);
    }
  };

  const handleUpdateReturnRefund = async (id: string, updatedReturnRefund: Partial<ReturnRefund>) => {
    try {
      await updateDoc(doc(db, 'returnsRefunds', id), updatedReturnRefund);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating return/refund: ", error);
    }
  };

  const handleDeleteReturnRefund = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'returnsRefunds', id));
    } catch (error) {
      console.error("Error deleting return/refund: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = returnsRefunds.map(returnRefund => 
      `${returnRefund.orderId},${returnRefund.customerName},${returnRefund.reason},${returnRefund.status},${returnRefund.amount},${returnRefund.requestDate.toISOString()},${returnRefund.processedDate?.toISOString() || ''},${returnRefund.createdAt.toISOString()}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'returns_refunds.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Returns and Refunds</h3>
      <form onSubmit={handleAddReturnRefund} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Order ID"
            value={newReturnRefund.orderId}
            onChange={(e) => setNewReturnRefund({ ...newReturnRefund, orderId: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="text"
            placeholder="Customer Name"
            value={newReturnRefund.customerName}
            onChange={(e) => setNewReturnRefund({ ...newReturnRefund, customerName: e.target.value })}
            className="p-2 border rounded"
          />
          <textarea
            placeholder="Reason"
            value={newReturnRefund.reason}
            onChange={(e) => setNewReturnRefund({ ...newReturnRefund, reason: e.target.value })}
            className="p-2 border rounded"
          />
          <select
            value={newReturnRefund.status}
            onChange={(e) => setNewReturnRefund({ ...newReturnRefund, status: e.target.value as ReturnRefund['status'] })}
            className="p-2 border rounded"
          >
            <option value="pending">Pending</option>
            <option value="approved">Approved</option>
            <option value="rejected">Rejected</option>
            <option value="processed">Processed</option>
          </select>
          <input
            type="number"
            placeholder="Amount"
            value={newReturnRefund.amount}
            onChange={(e) => setNewReturnRefund({ ...newReturnRefund, amount: parseFloat(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="date"
            value={newReturnRefund.requestDate.toISOString().split('T')[0]}
            onChange={(e) => setNewReturnRefund({ ...newReturnRefund, requestDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add Return/Refund
        </button>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Order ID</th>
            <th className="py-3 px-6 text-left">Customer</th>
            <th className="py-3 px-6 text-left">Reason</th>
            <th className="py-3 px-6 text-left">Status</th>
            <th className="py-3 px-6 text-right">Amount</th>
            <th className="py-3 px-6 text-left">Request Date</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {returnsRefunds.map((returnRefund) => (
            <tr key={returnRefund.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{returnRefund.orderId}</td>
              <td className="py-3 px-6 text-left">{returnRefund.customerName}</td>
              <td className="py-3 px-6 text-left">{returnRefund.reason}</td>
              <td className="py-3 px-6 text-left">
                <span className={`py-1 px-3 rounded-full text-xs ${
                  returnRefund.status === 'pending' ? 'bg-yellow-200 text-yellow-800' :
                  returnRefund.status === 'approved' ? 'bg-green-200 text-green-800' :
                  returnRefund.status === 'rejected' ? 'bg-red-200 text-red-800' :
                  'bg-blue-200 text-blue-800'
                }`}>
                  {returnRefund.status}
                </span>
              </td>
              <td className="py-3 px-6 text-right">${returnRefund.amount.toFixed(2)}</td>
              <td className="py-3 px-6 text-left">{returnRefund.requestDate.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(returnRefund.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteReturnRefund(returnRefund.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ReturnsRefunds;

================
File: src/components/features/SalesOrderManagement/SalesAnalytics.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, query, where, getDocs } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Download } from 'lucide-react';

interface SalesData {
  date: string;
  totalSales: number;
  orderCount: number;
}

const SalesAnalytics: React.FC = () => {
  const [salesData, setSalesData] = useState<SalesData[]>([]);
  const [dateRange, setDateRange] = useState<'week' | 'month' | 'year'>('week');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchSalesData();
  }, [dateRange]);

  const fetchSalesData = async () => {
    setLoading(true);
    const salesCollection = collection(db, 'salesOrders');
    const endDate = new Date();
    const startDate = new Date();

    switch (dateRange) {
      case 'week':
        startDate.setDate(endDate.getDate() - 7);
        break;
      case 'month':
        startDate.setMonth(endDate.getMonth() - 1);
        break;
      case 'year':
        startDate.setFullYear(endDate.getFullYear() - 1);
        break;
    }

    const q = query(
      salesCollection,
      where('orderDate', '>=', startDate),
      where('orderDate', '<=', endDate)
    );

    try {
      const querySnapshot = await getDocs(q);
      const sales: { [date: string]: { totalSales: number; orderCount: number } } = {};

      querySnapshot.forEach((doc) => {
        const data = doc.data();
        const date = new Date(data.orderDate.seconds * 1000).toISOString().split('T')[0];
        if (!sales[date]) {
          sales[date] = { totalSales: 0, orderCount: 0 };
        }
        sales[date].totalSales += data.totalAmount;
        sales[date].orderCount += 1;
      });

      const formattedData = Object.entries(sales).map(([date, data]) => ({
        date,
        totalSales: data.totalSales,
        orderCount: data.orderCount,
      }));

      setSalesData(formattedData.sort((a, b) => a.date.localeCompare(b.date)));
      setLoading(false);
    } catch (error) {
      console.error("Error fetching sales data: ", error);
      setLoading(false);
    }
  };

  const handleExport = () => {
    const csvContent = salesData.map(data => 
      `${data.date},${data.totalSales},${data.orderCount}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'sales_analytics.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Sales Analytics</h3>
      <div className="mb-4 flex justify-between items-center">
        <div>
          <select
            value={dateRange}
            onChange={(e) => setDateRange(e.target.value as 'week' | 'month' | 'year')}
            className="p-2 border rounded"
          >
            <option value="week">Last Week</option>
            <option value="month">Last Month</option>
            <option value="year">Last Year</option>
          </select>
        </div>
        <button
          onClick={handleExport}
          className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
        >
          <Download size={18} className="mr-2" />
          Export CSV
        </button>
      </div>
      {loading ? (
        <p>Loading sales data...</p>
      ) : (
        <div className="overflow-x-auto">
          <table className="w-full bg-white shadow-md rounded">
            <thead>
              <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
                <th className="py-3 px-6 text-left">Date</th>
                <th className="py-3 px-6 text-right">Total Sales</th>
                <th className="py-3 px-6 text-right">Order Count</th>
              </tr>
            </thead>
            <tbody className="text-gray-600 text-sm font-light">
              {salesData.map((data) => (
                <tr key={data.date} className="border-b border-gray-200 hover:bg-gray-100">
                  <td className="py-3 px-6 text-left whitespace-nowrap">{data.date}</td>
                  <td className="py-3 px-6 text-right">${data.totalSales.toFixed(2)}</td>
                  <td className="py-3 px-6 text-right">{data.orderCount}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
      <div className="mt-4">
        <h4 className="text-lg font-semibold mb-2">Summary</h4>
        <p>Total Sales: ${salesData.reduce((sum, data) => sum + data.totalSales, 0).toFixed(2)}</p>
        <p>Total Orders: {salesData.reduce((sum, data) => sum + data.orderCount, 0)}</p>
        <p>Average Order Value: ${(salesData.reduce((sum, data) => sum + data.totalSales, 0) / salesData.reduce((sum, data) => sum + data.orderCount, 0) || 0).toFixed(2)}</p>
      </div>
    </div>
  );
};

export default SalesAnalytics;

================
File: src/components/features/SalesOrderManagement/SalesOrderCreation.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../../firebase';
import { Plus, Download, Edit, Trash2, Package } from 'lucide-react';

interface SalesOrder {
  id: string;
  customerName: string;
  orderDate: Date;
  items: { name: string; quantity: number; price: number }[];
  totalAmount: number;
  status: 'quote' | 'order' | 'invoice' | 'paid';
  createdAt: Date;
}

const SalesOrderCreation: React.FC = () => {
  const [orders, setOrders] = useState<SalesOrder[]>([]);
  const [newOrder, setNewOrder] = useState<Omit<SalesOrder, 'id' | 'createdAt'>>({
    customerName: '',
    orderDate: new Date(),
    items: [],
    totalAmount: 0,
    status: 'quote',
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  useEffect(() => {
    const q = query(collection(db, 'salesOrders'), orderBy('createdAt', 'desc'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const ordersData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        orderDate: doc.data().orderDate.toDate(),
        createdAt: doc.data().createdAt.toDate(),
      } as SalesOrder));
      setOrders(ordersData);
    });
    return unsubscribe;
  }, []);

  const handleAddOrder = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'salesOrders'), {
        ...newOrder,
        createdAt: new Date(),
      });
      setNewOrder({
        customerName: '',
        orderDate: new Date(),
        items: [],
        totalAmount: 0,
        status: 'quote',
      });
    } catch (error) {
      console.error("Error adding order: ", error);
    }
  };

  const handleUpdateOrder = async (id: string, updatedOrder: Partial<SalesOrder>) => {
    try {
      await updateDoc(doc(db, 'salesOrders', id), updatedOrder);
      setEditingId(null);
    } catch (error) {
      console.error("Error updating order: ", error);
    }
  };

  const handleDeleteOrder = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'salesOrders', id));
    } catch (error) {
      console.error("Error deleting order: ", error);
    }
  };

  const handleExport = () => {
    const csvContent = orders.map(order => 
      `${order.customerName},${order.orderDate.toISOString()},${order.totalAmount},${order.status},${order.createdAt.toISOString()}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'sales_orders.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Sales Order Creation</h3>
      <form onSubmit={handleAddOrder} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Customer Name"
            value={newOrder.customerName}
            onChange={(e) => setNewOrder({ ...newOrder, customerName: e.target.value })}
            className="p-2 border rounded"
          />
          <input
            type="date"
            value={newOrder.orderDate.toISOString().split('T')[0]}
            onChange={(e) => setNewOrder({ ...newOrder, orderDate: new Date(e.target.value) })}
            className="p-2 border rounded"
          />
          <input
            type="number"
            placeholder="Total Amount"
            value={newOrder.totalAmount}
            onChange={(e) => setNewOrder({ ...newOrder, totalAmount: parseFloat(e.target.value) })}
            className="p-2 border rounded"
          />
          <select
            value={newOrder.status}
            onChange={(e) => setNewOrder({ ...newOrder, status: e.target.value as SalesOrder['status'] })}
            className="p-2 border rounded"
          >
            <option value="quote">Quote</option>
            <option value="order">Order</option>
            <option value="invoice">Invoice</option>
            <option value="paid">Paid</option>
          </select>
        </div>
        <button type="submit" className="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
          <Plus size={24} /> Add Order
        </button>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Customer</th>
            <th className="py-3 px-6 text-left">Order Date</th>
            <th className="py-3 px-6 text-right">Total Amount</th>
            <th className="py-3 px-6 text-left">Status</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {orders.map((order) => (
            <tr key={order.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{order.customerName}</td>
              <td className="py-3 px-6 text-left">{order.orderDate.toLocaleDateString()}</td>
              <td className="py-3 px-6 text-right">${order.totalAmount.toFixed(2)}</td>
              <td className="py-3 px-6 text-left">
                <span className={`py-1 px-3 rounded-full text-xs ${
                  order.status === 'quote' ? 'bg-yellow-200 text-yellow-800' :
                  order.status === 'order' ? 'bg-blue-200 text-blue-800' :
                  order.status === 'invoice' ? 'bg-purple-200 text-purple-800' :
                  'bg-green-200 text-green-800'
                }`}>
                  {order.status}
                </span>
              </td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => setEditingId(order.id)}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteOrder(order.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default SalesOrderCreation;

================
File: src/components/features/ShopFloor.tsx
================
import React from 'react';

const ShopFloor: React.FC = () => {
  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">Shop Floor</h2>
      <p>This is the Shop Floor feature page. Implement your shop floor management functionality here.</p>
    </div>
  );
};

export default ShopFloor;

================
File: src/components/features/Sign.tsx
================
import React from 'react';

const Sign: React.FC = () => {
  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">Sign</h2>
      <p>This is the Sign feature page. Implement your digital signature functionality here.</p>
    </div>
  );
};

export default Sign;

================
File: src/components/features/Surveys.tsx
================
import React from 'react';

const Surveys: React.FC = () => {
  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">Surveys</h2>
      <p>This is the Surveys feature page. Implement your survey creation and management functionality here.</p>
    </div>
  );
};

export default Surveys;

================
File: src/components/features/Timesheets.tsx
================
import React from 'react';

const Timesheets: React.FC = () => {
  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">Timesheets</h2>
      <p>This is the Timesheets feature page. Implement your time tracking functionality here.</p>
    </div>
  );
};

export default Timesheets;

================
File: src/components/features/Todo.tsx
================
import React from 'react';

const Todo: React.FC = () => {
  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">To-do</h2>
      <p>This is the To-do feature page. Implement your task management functionality here.</p>
    </div>
  );
};

export default Todo;

================
File: src/components/FeatureSelection.tsx
================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  Calendar, Users, Briefcase, BarChart2, PieChart, ShoppingCart, Percent, CheckCircle,
  Clock as ClockIcon, Trello, ShoppingBag, Box, Factory,
  UserPlus, DollarSign
} from 'lucide-react';

interface Feature {
  id: string;
  name: string;
  icon: React.ReactNode;
}

const features: Feature[] = [
  { id: 'calendar', name: 'Calendar', icon: <Calendar /> },
  { id: 'contacts', name: 'Contacts', icon: <Users /> },
  { id: 'crm', name: 'CRM', icon: <Briefcase /> },
  { id: 'sales', name: 'Sales', icon: <BarChart2 /> },
  { id: 'dashboards', name: 'Dashboards', icon: <PieChart /> },
  { id: 'pos', name: 'Point of Sale', icon: <ShoppingCart /> },
  { id: 'finance_accounting', name: 'Finance & Accounting', icon: <Percent /> },
  { id: 'project', name: 'Project', icon: <CheckCircle /> },
  { id: 'timesheets', name: 'Timesheets', icon: <ClockIcon /> },
  { id: 'planning', name: 'Planning', icon: <Trello /> },
  { id: 'purchase', name: 'Purchase', icon: <ShoppingBag /> },
  { id: 'inventory', name: 'Inventory', icon: <Box /> },
  { id: 'manufacturing', name: 'Manufacturing', icon: <Factory /> },
  { id: 'hr_management', name: 'HR Management', icon: <UserPlus /> },
  { id: 'expenses', name: 'Expenses', icon: <DollarSign /> },
];

const FeatureSelection: React.FC = () => {
  const [selectedFeatures, setSelectedFeatures] = useState<string[]>([]);
  const navigate = useNavigate();

  const toggleFeature = (featureId: string) => {
    setSelectedFeatures(prev => 
      prev.includes(featureId)
        ? prev.filter(id => id !== featureId)
        : [...prev, featureId]
    );
  };

  const handleContinue = () => {
    navigate('/login', { state: { selectedFeatures } });
  };

  return (
    <div className="min-h-screen bg-gray-100 py-6 flex flex-col justify-center sm:py-12">
      <div className="relative py-3 sm:max-w-xl sm:mx-auto">
        <div className="relative px-4 py-10 bg-white shadow-lg sm:rounded-3xl sm:p-20">
          <h1 className="text-2xl font-semibold mb-6 text-center">Select Your Features</h1>
          <div className="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 gap-4">
            {features.map((feature) => (
              <div
                key={feature.id}
                className={`flex flex-col items-center justify-center p-4 rounded-lg cursor-pointer transition-colors duration-200 ${
                  selectedFeatures.includes(feature.id)
                    ? 'bg-blue-100 border-2 border-blue-500'
                    : 'bg-gray-50 hover:bg-gray-100'
                }`}
                onClick={() => toggleFeature(feature.id)}
              >
                <div className="text-3xl mb-2">{feature.icon}</div>
                <span className="text-xs text-center">{feature.name}</span>
              </div>
            ))}
          </div>
          <div className="mt-8 flex justify-center">
            <button
              className="bg-blue-500 text-white px-6 py-2 rounded-full hover:bg-blue-600 transition-colors duration-200"
              onClick={handleContinue}
            >
              Continue
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default FeatureSelection;

================
File: src/components/ForgotPassword.tsx
================
import React, { useState } from 'react';
import { sendPasswordResetEmail } from 'firebase/auth';
import { auth } from '../firebase';
import { Mail, ArrowLeft } from 'lucide-react';
import { Link } from 'react-router-dom';

const ForgotPassword: React.FC = () => {
  const [email, setEmail] = useState('');
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');

  const handleResetPassword = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await sendPasswordResetEmail(auth, email);
      setMessage('Password reset email sent. Check your inbox.');
      setError('');
    } catch (error) {
      setError('Failed to send password reset email. Please try again.');
      setMessage('');
    }
  };

  return (
    <div className="flex justify-center items-center h-full">
      <div className="bg-white p-8 rounded shadow-md w-full max-w-md">
        <h2 className="text-2xl font-bold mb-4 flex items-center">
          <Mail className="mr-2" />
          Forgot Password
        </h2>
        <form onSubmit={handleResetPassword}>
          <div className="mb-4">
            <label htmlFor="email" className="block text-sm font-medium text-gray-600 mb-1">Email</label>
            <input
              type="email"
              id="email"
              className="w-full px-3 py-2 rounded-md border border-gray-300 focus:outline-none focus:ring-1 focus:ring-blue-500"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>
          {message && <p className="text-green-500 mb-4">{message}</p>}
          {error && <p className="text-red-500 mb-4">{error}</p>}
          <button
            type="submit"
            className="w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
          >
            Send Reset Email
          </button>
        </form>
        <div className="mt-4">
          <Link to="/login" className="text-blue-500 hover:text-blue-600 flex items-center">
            <ArrowLeft size={18} className="mr-2" />
            Back to Login
          </Link>
        </div>
      </div>
    </div>
  );
};

export default ForgotPassword;

================
File: src/components/HirePurchaseAgreements.tsx
================
import React, { useEffect, useState } from 'react';
import { collection, onSnapshot, query, Timestamp } from 'firebase/firestore';
import { db } from '../firebase';
import { Card, CardContent, CardHeader, CardTitle } from "./ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "./ui/table";
import { Badge } from "./ui/badge";
import { format } from 'date-fns';
import { useToast } from "../components/hooks/use-toast";
import { Loader2 } from 'lucide-react';

interface HirePurchaseAgreement {
  id: string;
  customerId: string;
  customerName: string;
  items: Array<{
    id: string;
    name: string;
    quantity: number;
    price: number;
  }>;
  totalAmount: number;
  downPayment: number;
  amountFinanced: number;
  interestRate: number;
  term: number;
  monthlyPayment: number;
  startDate: Date;
  endDate: Date;
  payments: Array<{
    id: string;
    amount: number;
    dueDate: Date;
    status: 'pending' | 'paid' | 'overdue';
  }>;
  status: 'active' | 'completed' | 'defaulted';
  createdAt: Date;
  updatedAt: Date;
}

const HirePurchaseAgreements = () => {
  const [agreements, setAgreements] = useState<HirePurchaseAgreement[]>([]);
  const [loading, setLoading] = useState(true);
  const { toast } = useToast();

  useEffect(() => {
    const q = query(collection(db, 'hirePurchaseAgreements'));
    
    const unsubscribe = onSnapshot(q, 
      (querySnapshot) => {
        try {
          const agreementsData = querySnapshot.docs.map(doc => {
            const data = doc.data();
            
            // Convert Firestore timestamps to JavaScript Dates
            const processDate = (dateField: any) => {
              if (!dateField) return new Date();
              if (dateField instanceof Timestamp) return dateField.toDate();
              if (dateField.seconds) return new Date(dateField.seconds * 1000);
              return new Date(dateField);
            };

            return {
              id: doc.id,
              customerId: data.customerId || '',
              customerName: data.customerName || 'Unknown Customer',
              items: data.items || [],
              totalAmount: data.totalAmount || 0,
              downPayment: data.downPayment || 0,
              amountFinanced: data.amountFinanced || 0,
              interestRate: data.interestRate || 0,
              term: data.term || 0,
              monthlyPayment: data.monthlyPayment || 0,
              startDate: processDate(data.startDate),
              endDate: processDate(data.endDate),
              payments: (data.payments || []).map((payment: any) => ({
                ...payment,
                dueDate: processDate(payment.dueDate)
              })),
              status: data.status || 'active',
              createdAt: processDate(data.createdAt),
              updatedAt: processDate(data.updatedAt)
            } as HirePurchaseAgreement;
          });
          
          setAgreements(agreementsData);
        } catch (err) {
          console.error('Error processing agreements:', err);
          toast({
            title: "Error",
            description: "Failed to process agreements data",
            variant: "destructive",
          });
        } finally {
          setLoading(false);
        }
      },
      (err) => {
        console.error("Error fetching agreements:", err);
        toast({
          title: "Error",
          description: "Failed to fetch hire purchase agreements",
          variant: "destructive",
        });
        setLoading(false);
      }
    );

    return () => unsubscribe();
  }, [toast]);

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <Loader2 className="h-8 w-8 animate-spin text-blue-500" />
        <span className="ml-2">Loading agreements...</span>
      </div>
    );
  }

  if (!agreements || agreements.length === 0) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Hire Purchase Agreements</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-gray-500 text-center py-8">
            No hire purchase agreements found. Create a hire purchase agreement from the Point of Sale section.
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>Hire Purchase Agreements ({agreements.length})</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Customer</TableHead>
                <TableHead>Total Amount</TableHead>
                <TableHead>Monthly Payment</TableHead>
                <TableHead>Start Date</TableHead>
                <TableHead>End Date</TableHead>
                <TableHead>Status</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {agreements.map((agreement) => (
                <TableRow key={agreement.id}>
                  <TableCell>{agreement.customerName}</TableCell>
                  <TableCell>${agreement.totalAmount.toFixed(2)}</TableCell>
                  <TableCell>${agreement.monthlyPayment.toFixed(2)}</TableCell>
                  <TableCell>{format(agreement.startDate, 'PP')}</TableCell>
                  <TableCell>{format(agreement.endDate, 'PP')}</TableCell>
                  <TableCell>
                    <Badge variant={
                      agreement.status === 'completed' ? 'default' :
                      agreement.status === 'defaulted' ? 'destructive' : 'outline'
                    }>
                      {agreement.status}
                    </Badge>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      </CardContent>
    </Card>
  );
};

export default HirePurchaseAgreements;

================
File: src/components/hooks/use-toast.ts
================
import { toast as sonnerToast } from "sonner"

type ToastProps = {
  title?: string;
  description: string;
  variant?: "default" | "destructive";
};

export const useToast = () => {
  return {
    toast: ({ title, description, variant }: ToastProps) => {
      sonnerToast[variant === "destructive" ? "error" : "success"](title, {
        description,
      });
    },
  };
};

================
File: src/components/Layout.tsx
================
import React, { useState } from 'react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { 
  Home, Calendar, Users, Briefcase, DollarSign, ShoppingCart, Percent,
  CheckCircle, Clock, Trello, ShoppingBag, Box, Truck, Factory, UserPlus,
  BarChart, Settings, LogOut, User, CreditCard
} from 'lucide-react';
import { useTenant } from '../contexts/TenantContext';
import { useAuth } from '../contexts/AuthContext';
import { auth } from '../firebase';
import { motion, AnimatePresence } from 'framer-motion';
import '../styles/animations.css';

interface LayoutProps {
  children: React.ReactNode;
}

interface NavItem {
  to: string;
  icon: React.ReactNode;
  text: string;
}

const navItems: NavItem[] = [
  { to: "/dashboard", icon: <Home />, text: "Dashboard" },
  { to: "/calendar", icon: <Calendar />, text: "Calendar" },
  { to: "/contacts", icon: <Users />, text: "Contacts" },
  { to: "/crm", icon: <Briefcase />, text: "CRM" },
  { to: "/sales", icon: <DollarSign />, text: "Sales" },
  { to: "/point-of-sale", icon: <ShoppingCart />, text: "Point of Sale" },
  { to: "/finance-and-accounting", icon: <Percent />, text: "Finance & Accounting" },
  { to: "/project", icon: <CheckCircle />, text: "Project" },
  { to: "/timesheets", icon: <Clock />, text: "Timesheets" },
  { to: "/planning", icon: <Trello />, text: "Planning" },
  { to: "/purchase", icon: <ShoppingBag />, text: "Purchase" },
  { to: "/inventory", icon: <Box />, text: "Inventory" },
  { to: "/inventory-supply-chain", icon: <Truck />, text: "Supply Chain" },
  { to: "/manufacturing", icon: <Factory />, text: "Manufacturing" },
  { to: "/hr-management", icon: <UserPlus />, text: "HR Management" },
  { to: "/hire-purchase", icon: <CreditCard />, text: "Hire Purchase" },
  { to: "/expenses", icon: <DollarSign />, text: "Expenses" },
  { to: "/reports", icon: <BarChart />, text: "Reports" },
  { to: "/user-management", icon: <Settings />, text: "Settings" },
  { to: "/profile", icon: <User />, text: "Profile" },
];

const Layout: React.FC<LayoutProps> = ({ children }) => {
  const { tenant } = useTenant();
  const { user } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();
  const [isExpanded, setIsExpanded] = useState(false);

  const handleLogout = async () => {
    try {
      await auth.signOut();
      navigate('/login');
    } catch (error) {
      console.error("Error signing out: ", error);
    }
  };

  return (
    <div className="flex h-screen bg-gray-100">
      <motion.nav
        className="bg-blue-800 text-white shadow-lg overflow-hidden transition-all duration-200 ease-in-out flex flex-col"
        initial={false}
        animate={{ width: isExpanded ? '256px' : '64px' }}
        onMouseEnter={() => setIsExpanded(true)}
        onMouseLeave={() => setIsExpanded(false)}
      >
        <div className="p-4 flex-shrink-0">
          {tenant?.logo && (
            <img src={tenant.logo} alt={`${tenant.name} logo`} className="h-12 mb-4 mx-auto transition-all duration-200 ease-in-out" />
          )}
          <AnimatePresence>
            {isExpanded && (
              <motion.h1
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                transition={{ duration: 0.2 }}
                className="text-2xl font-bold text-center"
              >
                {tenant?.name || 'ERP System'}
              </motion.h1>
            )}
          </AnimatePresence>
        </div>
        <ul className="space-y-2 mt-6 flex-grow overflow-y-auto scrollbar-hide hover:scrollbar-default">
          {navItems.map((item) => (
            <NavItem key={item.to} {...item} isActive={location.pathname === item.to} isExpanded={isExpanded} />
          ))}
        </ul>
        <div className="p-4 mt-auto border-t border-blue-700">
          <button onClick={handleLogout} className="flex items-center p-2 text-white hover:bg-blue-700 rounded transition-all duration-200 ease-in-out w-full">
            <LogOut size={20} className="mr-2" />
            {isExpanded && <span className="transition-opacity duration-200 ease-in-out">Logout</span>}
          </button>
        </div>
      </motion.nav>
      <main className="flex-1 p-8 overflow-y-auto">
        <AnimatePresence mode="wait">
          <motion.div
            key={location.pathname}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={{ duration: 0.2 }}
          >
            {children}
          </motion.div>
        </AnimatePresence>
      </main>
    </div>
  );
};

const NavItem: React.FC<NavItem & { isActive: boolean; isExpanded: boolean }> = ({ to, icon, text, isActive, isExpanded }) => (
  <li>
    <Link 
      to={to} 
      className={`flex items-center p-2 rounded transition-all duration-200 ease-in-out
        ${isActive 
          ? 'bg-blue-700 text-white' 
          : 'text-blue-100 hover:bg-blue-700 hover:text-white'
        }`}
    >
      {React.cloneElement(icon as React.ReactElement, { size: 20, className: 'mr-2' })}
      <AnimatePresence>
        {isExpanded && (
          <motion.span
            initial={{ opacity: 0, width: 0 }}
            animate={{ opacity: 1, width: 'auto' }}
            exit={{ opacity: 0, width: 0 }}
            transition={{ duration: 0.2 }}
            className="ml-2 whitespace-nowrap overflow-hidden"
          >
            {text}
          </motion.span>
        )}
      </AnimatePresence>
    </Link>
  </li>
);

export default Layout;

================
File: src/components/ProtectedRoute.tsx
================
import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { useTenant } from '../contexts/TenantContext';

interface ProtectedRouteProps {
  children: React.ReactNode;
  requiredPlan?: 'basic' | 'professional' | 'enterprise';
  requiredRole?: 'admin' | 'user';
}

const planHierarchy = {
  basic: 0,
  professional: 1,
  enterprise: 2,
};

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children, requiredPlan, requiredRole }) => {
  const { user, loading } = useAuth();
  const { subscriptionPlan } = useTenant();

  if (loading) {
    return <div>Loading...</div>;
  }

  if (!user) {
    return <Navigate to="/login" />;
  }

  if (requiredRole && user.role !== requiredRole) {
    return <Navigate to="/dashboard" />;
  }

  if (requiredPlan && subscriptionPlan) {
    const userPlanLevel = planHierarchy[subscriptionPlan as keyof typeof planHierarchy];
    const requiredPlanLevel = planHierarchy[requiredPlan];

    if (userPlanLevel < requiredPlanLevel) {
      return <Navigate to="/settings" />;
    }
  }

  return <>{children}</>;
};

export default ProtectedRoute;

================
File: src/components/Reports.tsx
================
import React, { useState, useEffect } from 'react'
import { BarChart, Calendar, Download } from 'lucide-react'
import { useTenant } from '../contexts/TenantContext'
import { db } from '../firebase'
import { collection, query, getDocs, where, Timestamp } from 'firebase/firestore'

const Reports: React.FC = () => {
  const { tenant } = useTenant()
  const [reportType, setReportType] = useState<'sales' | 'inventory'>('sales')
  const [timeRange, setTimeRange] = useState<'week' | 'month' | 'year'>('week')
  const [reportData, setReportData] = useState<any[]>([])

  useEffect(() => {
    const fetchReportData = async () => {
      if (!tenant) return

      const now = new Date()
      let startDate = new Date()

      switch (timeRange) {
        case 'week':
          startDate.setDate(now.getDate() - 7)
          break
        case 'month':
          startDate.setMonth(now.getMonth() - 1)
          break
        case 'year':
          startDate.setFullYear(now.getFullYear() - 1)
          break
      }

      const collectionName = reportType === 'sales' ? 'sales' : 'inventory'
      const reportsQuery = query(
        collection(db, `tenants/${tenant.id}/${collectionName}`),
        where('date', '>=', Timestamp.fromDate(startDate)),
        where('date', '<=', Timestamp.fromDate(now))
      )

      const reportsSnapshot = await getDocs(reportsQuery)
      const reportsData = reportsSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }))

      setReportData(reportsData)
    }

    fetchReportData()
  }, [tenant, reportType, timeRange])

  const handleExport = () => {
    // Implement CSV export logic here without react-csv
    const csvContent = reportData.map(item => {
      if (reportType === 'sales') {
        return `${new Date(item.date.seconds * 1000).toLocaleDateString()},${item.total},${item.customer},${item.product}`
      } else {
        return `${item.name},${item.quantity},${new Date(item.date.seconds * 1000).toLocaleDateString()}`
      }
    }).join('\n')

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' })
    const link = document.createElement('a')
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob)
      link.setAttribute('href', url)
      link.setAttribute('download', `${reportType}_report.csv`)
      link.style.visibility = 'hidden'
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
    }
  }

  return (
    <div className="max-w-4xl mx-auto p-4">
      <h2 className="text-2xl font-semibold mb-4">Reports</h2>
      <div className="mb-4 flex space-x-4">
        <select
          value={reportType}
          onChange={(e) => setReportType(e.target.value as 'sales' | 'inventory')}
          className="p-2 border rounded"
        >
          <option value="sales">Sales Report</option>
          <option value="inventory">Inventory Report</option>
        </select>
        <select
          value={timeRange}
          onChange={(e) => setTimeRange(e.target.value as 'week' | 'month' | 'year')}
          className="p-2 border rounded"
        >
          <option value="week">Last Week</option>
          <option value="month">Last Month</option>
          <option value="year">Last Year</option>
        </select>
        <button
          onClick={handleExport}
          className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
        >
          <Download className="mr-2" size={18} />
          Export
        </button>
      </div>
      <div className="bg-white p-4 rounded-lg shadow">
        <table className="w-full">
          <thead>
            <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
              {reportType === 'sales' ? (
                <>
                  <th className="py-3 px-6 text-left">Date</th>
                  <th className="py-3 px-6 text-left">Total</th>
                  <th className="py-3 px-6 text-left">Customer</th>
                  <th className="py-3 px-6 text-left">Product</th>
                </>
              ) : (
                <>
                  <th className="py-3 px-6 text-left">Name</th>
                  <th className="py-3 px-6 text-left">Quantity</th>
                  <th className="py-3 px-6 text-left">Last Updated</th>
                </>
              )}
            </tr>
          </thead>
          <tbody className="text-gray-600 text-sm font-light">
            {reportData.map((item) => (
              <tr key={item.id} className="border-b border-gray-200 hover:bg-gray-100">
                {reportType === 'sales' ? (
                  <>
                    <td className="py-3 px-6 text-left whitespace-nowrap">
                      {new Date(item.date.seconds * 1000).toLocaleDateString()}
                    </td>
                    <td className="py-3 px-6 text-left">${item.total.toFixed(2)}</td>
                    <td className="py-3 px-6 text-left">{item.customer}</td>
                    <td className="py-3 px-6 text-left">{item.product}</td>
                  </>
                ) : (
                  <>
                    <td className="py-3 px-6 text-left whitespace-nowrap">{item.name}</td>
                    <td className="py-3 px-6 text-left">{item.quantity}</td>
                    <td className="py-3 px-6 text-left">
                      {new Date(item.date.seconds * 1000).toLocaleDateString()}
                    </td>
                  </>
                )}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  )
}

export default Reports

================
File: src/components/Sales.tsx
================
import React, { useState, useEffect } from 'react'
import { Plus, DollarSign, AlertCircle } from 'lucide-react'
import { collection, addDoc, onSnapshot, query } from 'firebase/firestore'
import { db } from '../firebase'

const Sales: React.FC = () => {
  const [sales, setSales] = useState([])
  const [newSale, setNewSale] = useState({ customer: '', product: '', quantity: '', total: '', date: '' })
  const [error, setError] = useState(null)

  useEffect(() => {
    const q = query(collection(db, 'sales'))
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const salesData = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }))
      setSales(salesData)
    }, (error) => {
      console.error("Error fetching sales: ", error)
      setError("Failed to fetch sales. Please try again.")
    })
    return () => unsubscribe()
  }, [])

  const validateSale = () => {
    if (!newSale.customer || !newSale.product || !newSale.quantity || !newSale.total || !newSale.date) {
      setError("All fields are required.")
      return false
    }
    if (isNaN(parseFloat(newSale.total)) || parseFloat(newSale.total) <= 0) {
      setError("Total must be a positive number.")
      return false
    }
    if (isNaN(parseInt(newSale.quantity)) || parseInt(newSale.quantity) <= 0) {
      setError("Quantity must be a positive integer.")
      return false
    }
    return true
  }

  const handleAddSale = async () => {
    if (validateSale()) {
      try {
        await addDoc(collection(db, 'sales'), {
          ...newSale,
          quantity: parseInt(newSale.quantity),
          total: parseFloat(newSale.total),
          date: new Date(newSale.date)
        })
        setNewSale({ customer: '', product: '', quantity: '', total: '', date: '' })
        setError(null)
      } catch (error) {
        console.error("Error adding sale: ", error)
        setError("Failed to add sale. Please try again.")
      }
    }
  }

  return (
    <div>
      <h2 className="text-2xl font-semibold mb-4">Sales</h2>
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
          <span className="block sm:inline">{error}</span>
          <AlertCircle className="inline-block ml-2" size={20} />
        </div>
      )}
      <form onSubmit={(e) => { e.preventDefault(); handleAddSale(); }} className="mb-4">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Customer"
            className="p-2 border rounded"
            value={newSale.customer}
            onChange={(e) => setNewSale({ ...newSale, customer: e.target.value })}
          />
          <input
            type="text"
            placeholder="Product"
            className="p-2 border rounded"
            value={newSale.product}
            onChange={(e) => setNewSale({ ...newSale, product: e.target.value })}
          />
          <input
            type="number"
            placeholder="Quantity"
            className="p-2 border rounded"
            value={newSale.quantity}
            onChange={(e) => setNewSale({ ...newSale, quantity: e.target.value })}
          />
          <input
            type="number"
            placeholder="Total"
            className="p-2 border rounded"
            value={newSale.total}
            onChange={(e) => setNewSale({ ...newSale, total: e.target.value })}
          />
          <input
            type="date"
            className="p-2 border rounded"
            value={newSale.date}
            onChange={(e) => setNewSale({ ...newSale, date: e.target.value })}
          />
          <button type="submit" className="bg-blue-500 text-white p-2 rounded hover:bg-blue-600 flex items-center justify-center">
            <Plus size={24} className="mr-2" /> Add Sale
          </button>
        </div>
      </form>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Customer</th>
            <th className="py-3 px-6 text-left">Product</th>
            <th className="py-3 px-6 text-left">Quantity</th>
            <th className="py-3 px-6 text-left">Total</th>
            <th className="py-3 px-6 text-left">Date</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {sales.map((sale) => (
            <tr key={sale.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">{sale.customer}</td>
              <td className="py-3 px-6 text-left">{sale.product}</td>
              <td className="py-3 px-6 text-left">{sale.quantity}</td>
              <td className="py-3 px-6 text-left"><DollarSign size={16} className="inline mr-1" />{parseFloat(sale.total).toFixed(2)}</td>
              <td className="py-3 px-6 text-left">{new Date(sale.date.seconds * 1000).toLocaleDateString()}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  )
}

export default Sales

================
File: src/components/services/hirePurchaseService.ts
================
import { collection, addDoc, updateDoc, doc, getDoc, getDocs, query, where } from 'firebase/firestore';
import { db } from '../../firebase';
import { HirePurchaseAgreement, HirePurchasePayment } from '../../types/hirePurchase';

export const createHirePurchaseAgreement = async (
  customerId: string,
  customerName: string,
  items: any[],
  totalAmount: number,
  downPayment: number,
  interestRate: number,
  term: number
): Promise<string> => {
  const amountFinanced = totalAmount - downPayment;
  const monthlyPayment = (amountFinanced * (1 + interestRate / 100)) / term;
  const startDate = new Date();
  const endDate = new Date();
  endDate.setMonth(endDate.getMonth() + term);

  // Generate payment schedule
  const payments: HirePurchasePayment[] = Array.from({ length: term }, (_, i) => {
    const dueDate = new Date(startDate);
    dueDate.setMonth(dueDate.getMonth() + i + 1);
    return {
      id: `payment-${i + 1}`,
      amount: monthlyPayment,
      dueDate,
      status: 'pending'
    };
  });

  const agreement: Omit<HirePurchaseAgreement, 'id'> = {
    customerId,
    customerName,
    items,
    totalAmount,
    downPayment,
    amountFinanced,
    interestRate,
    term,
    monthlyPayment,
    startDate,
    endDate,
    payments,
    status: 'active',
    createdAt: new Date(),
    updatedAt: new Date()
  };

  const docRef = await addDoc(collection(db, 'hirePurchaseAgreements'), agreement);
  return docRef.id;
};

export const recordPayment = async (agreementId: string, paymentId: string) => {
  const agreementRef = doc(db, 'hirePurchaseAgreements', agreementId);
  const agreementDoc = await getDoc(agreementRef);
  
  if (!agreementDoc.exists()) {
    throw new Error('Agreement not found');
  }

  const agreement = agreementDoc.data() as HirePurchaseAgreement;
  const updatedPayments = agreement.payments.map(payment => 
    payment.id === paymentId 
      ? { ...payment, status: 'paid', paidDate: new Date() }
      : payment
  );

  // Check if all payments are completed
  const allPaid = updatedPayments.every(payment => payment.status === 'paid');
  
  await updateDoc(agreementRef, {
    payments: updatedPayments,
    status: allPaid ? 'completed' : 'active',
    updatedAt: new Date()
  });
};

export const getCustomerAgreements = async (customerId: string): Promise<HirePurchaseAgreement[]> => {
  const q = query(
    collection(db, 'hirePurchaseAgreements'),
    where('customerId', '==', customerId)
  );
  
  const snapshot = await getDocs(q);
  return snapshot.docs.map(doc => ({
    id: doc.id,
    ...doc.data()
  } as HirePurchaseAgreement));
};

export const getAgreement = async (agreementId: string): Promise<HirePurchaseAgreement> => {
  const docRef = doc(db, 'hirePurchaseAgreements', agreementId);
  const docSnap = await getDoc(docRef);
  
  if (!docSnap.exists()) {
    throw new Error('Agreement not found');
  }
  
  return {
    id: docSnap.id,
    ...docSnap.data()
  } as HirePurchaseAgreement;
};

================
File: src/components/SubscriptionPlans.tsx
================
import React from 'react';
import { Check, X } from 'lucide-react';

interface Plan {
  id: string;
  name: string;
  basePrice: number;
  pricePerFeature: number;
  maxFeatures: number;
}

const plans: Plan[] = [
  {
    id: 'basic',
    name: 'Basic',
    basePrice: 9.99,
    pricePerFeature: 1.99,
    maxFeatures: 5,
  },
  {
    id: 'professional',
    name: 'Professional',
    basePrice: 29.99,
    pricePerFeature: 1.49,
    maxFeatures: 15,
  },
  {
    id: 'enterprise',
    name: 'Enterprise',
    basePrice: 99.99,
    pricePerFeature: 0.99,
    maxFeatures: Infinity,
  },
];

interface SubscriptionPlansProps {
  onSelectPlan: (planId: string) => void;
  selectedPlan: string;
  selectedFeatures: string[];
}

const SubscriptionPlans: React.FC<SubscriptionPlansProps> = ({ onSelectPlan, selectedPlan, selectedFeatures = [] }) => {
  const calculatePrice = (plan: Plan) => {
    const featuresCount = Math.min(selectedFeatures.length, plan.maxFeatures);
    return plan.basePrice + featuresCount * plan.pricePerFeature;
  };

  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
      {plans.map((plan) => (
        <div
          key={plan.id}
          className={`border rounded-lg p-6 ${
            selectedPlan === plan.id ? 'border-blue-500 shadow-lg' : 'border-gray-200'
          }`}
        >
          <h3 className="text-xl font-bold mb-2">{plan.name}</h3>
          <p className="text-3xl font-bold mb-4">
            ${calculatePrice(plan).toFixed(2)}
            <span className="text-sm font-normal">/month</span>
          </p>
          <ul className="mb-6">
            <li className="flex items-center mb-2">
              <Check className="text-green-500 mr-2" size={16} />
              Up to {plan.maxFeatures === Infinity ? 'Unlimited' : plan.maxFeatures} features
            </li>
            <li className="flex items-center mb-2">
              <Check className="text-green-500 mr-2" size={16} />
              ${plan.pricePerFeature.toFixed(2)} per additional feature
            </li>
          </ul>
          <button
            onClick={() => onSelectPlan(plan.id)}
            className={`w-full py-2 px-4 rounded ${
              selectedPlan === plan.id
                ? 'bg-blue-500 text-white'
                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
            }`}
          >
            {selectedPlan === plan.id ? 'Selected' : 'Select Plan'}
          </button>
        </div>
      ))}
    </div>
  );
};

export default SubscriptionPlans;

================
File: src/components/ui/badge.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "../../lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: src/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "../../lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: src/components/ui/card.tsx
================
import * as React from "react"

import { cn } from "../../lib/utils"
const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: src/components/ui/checkbox.tsx
================
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "../../lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

================
File: src/components/ui/input.tsx
================
import * as React from "react"

import { cn } from "../../lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: src/components/ui/select.tsx
================
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "../../lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: src/components/ui/table.tsx
================
import * as React from "react"

import { cn } from "../../lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn("bg-primary font-medium text-primary-foreground", className)}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

================
File: src/components/ui/tabs.tsx
================
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "../../lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: src/components/ui/tooltip.tsx
================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "../../lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: src/components/UserManagement.tsx
================
import React, { useState, useEffect } from 'react';
import { collection, addDoc, onSnapshot, query, orderBy, updateDoc, doc, deleteDoc } from 'firebase/firestore';
import { createUserWithEmailAndPassword, sendPasswordResetEmail } from 'firebase/auth';
import { auth, db } from '../firebase';
import { Plus, Download, Edit, Trash2, Mail } from 'lucide-react';

interface User {
  id: string;
  email: string;
  role: 'admin' | 'user';
  createdAt: Date;
}

const UserManagement: React.FC = () => {
  const [users, setUsers] = useState<User[]>([]);
  const [newUser, setNewUser] = useState({ email: '', role: 'user' as const });
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  useEffect(() => {
    const q = query(collection(db, 'users'), orderBy('createdAt', 'desc'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const usersData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        createdAt: doc.data().createdAt.toDate(),
      } as User));
      setUsers(usersData);
    });
    return unsubscribe;
  }, []);

  const handleAddUser = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setSuccess('');
    try {
      // Create user in Firebase Authentication
      const userCredential = await createUserWithEmailAndPassword(auth, newUser.email, generateTemporaryPassword());
      const user = userCredential.user;

      // Add user to Firestore with role
      await addDoc(collection(db, 'users'), {
        uid: user.uid,
        email: newUser.email,
        role: newUser.role,
        createdAt: new Date(),
      });

      // Send password reset email
      await sendPasswordResetEmail(auth, newUser.email);

      setNewUser({ email: '', role: 'user' });
      setSuccess('User added successfully. A password reset email has been sent.');
    } catch (error) {
      setError('Failed to add user. Please try again.');
      console.error("Error adding user: ", error);
    }
  };

  const handleUpdateUser = async (id: string, updatedUser: Partial<User>) => {
    try {
      await updateDoc(doc(db, 'users', id), updatedUser);
      setSuccess('User updated successfully.');
    } catch (error) {
      setError('Failed to update user.');
      console.error("Error updating user: ", error);
    }
  };

  const handleDeleteUser = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'users', id));
      setSuccess('User deleted successfully.');
    } catch (error) {
      setError('Failed to delete user.');
      console.error("Error deleting user: ", error);
    }
  };

  const generateTemporaryPassword = () => {
    return Math.random().toString(36).slice(-8);
  };

  const handleExport = () => {
    const csvContent = users.map(user => 
      `${user.email},${user.role},${user.createdAt.toISOString()}`
    ).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'users.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">User Management</h2>
      {error && <p className="text-red-500 mb-4">{error}</p>}
      {success && <p className="text-green-500 mb-4">{success}</p>}
      <form onSubmit={handleAddUser} className="mb-4">
        <div className="flex space-x-2">
          <input
            type="email"
            placeholder="Email"
            value={newUser.email}
            onChange={(e) => setNewUser({ ...newUser, email: e.target.value })}
            className="flex-grow p-2 border rounded"
          />
          <select
            value={newUser.role}
            onChange={(e) => setNewUser({ ...newUser, role: e.target.value as 'admin' | 'user' })}
            className="p-2 border rounded"
          >
            <option value="user">User</option>
            <option value="admin">Admin</option>
          </select>
          <button type="submit" className="bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
            <Plus size={24} /> Add User
          </button>
        </div>
      </form>
      <button
        onClick={handleExport}
        className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center"
      >
        <Download size={18} className="mr-2" />
        Export CSV
      </button>
      <table className="w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
            <th className="py-3 px-6 text-left">Email</th>
            <th className="py-3 px-6 text-left">Role</th>
            <th className="py-3 px-6 text-left">Created At</th>
            <th className="py-3 px-6 text-center">Actions</th>
          </tr>
        </thead>
        <tbody className="text-gray-600 text-sm font-light">
          {users.map((user) => (
            <tr key={user.id} className="border-b border-gray-200 hover:bg-gray-100">
              <td className="py-3 px-6 text-left whitespace-nowrap">
                <div className="flex items-center">
                  <Mail size={18} className="mr-2" />
                  {user.email}
                </div>
              </td>
              <td className="py-3 px-6 text-left">{user.role}</td>
              <td className="py-3 px-6 text-left">{user.createdAt.toLocaleString()}</td>
              <td className="py-3 px-6 text-center">
                <button
                  onClick={() => handleUpdateUser(user.id, { role: user.role === 'admin' ? 'user' : 'admin' })}
                  className="text-blue-500 hover:text-blue-700 mr-2"
                >
                  <Edit size={18} />
                </button>
                <button
                  onClick={() => handleDeleteUser(user.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default UserManagement;

================
File: src/components/UserProfile.tsx
================
import React, { useState, useEffect } from 'react';
import { doc, getDoc, updateDoc } from 'firebase/firestore';
import { updatePassword } from 'firebase/auth';
import { db, auth } from '../firebase';
import { useAuth } from '../contexts/AuthContext';
import SubscriptionPlans from './SubscriptionPlans';

const UserProfile: React.FC = () => {
  const { user } = useAuth();
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [currentPlan, setCurrentPlan] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  useEffect(() => {
    const fetchUserData = async () => {
      if (user) {
        try {
          const userDoc = await getDoc(doc(db, 'users', user.uid));
          if (userDoc.exists()) {
            const userData = userDoc.data();
            setName(userData.name || '');
            setEmail(userData.email || '');
            setCurrentPlan(userData.subscriptionPlan || '');
          }
        } catch (error) {
          setError('Failed to fetch user data');
        } finally {
          setLoading(false);
        }
      }
    };

    fetchUserData();
  }, [user]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (user) {
      try {
        await updateDoc(doc(db, 'users', user.uid), {
          name,
          email,
        });
        setSuccess('Profile updated successfully');
      } catch (error) {
        setError('Failed to update profile');
      }
    }
  };

  const handlePasswordChange = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setSuccess('');

    if (newPassword !== confirmPassword) {
      setError('Passwords do not match');
      return;
    }

    try {
      await updatePassword(user!, newPassword);
      setSuccess('Password updated successfully');
      setNewPassword('');
      setConfirmPassword('');
    } catch (error) {
      setError('Failed to update password');
    }
  };

  const handleUpdatePlan = async (newPlan: string) => {
    if (user) {
      try {
        await updateDoc(doc(db, 'users', user.uid), {
          subscriptionPlan: newPlan,
        });
        setCurrentPlan(newPlan);
        setSuccess('Subscription plan updated successfully');
      } catch (error) {
        setError('Failed to update subscription plan');
      }
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <div className="max-w-4xl mx-auto">
      <h2 className="text-2xl font-bold mb-4">User Profile</h2>
      {error && <p className="text-red-500 mb-4">{error}</p>}
      {success && <p className="text-green-500 mb-4">{success}</p>}
      <form onSubmit={handleSubmit} className="mb-8">
        <div className="mb-4">
          <label htmlFor="name" className="block text-sm font-medium text-gray-700">Name</label>
          <input
            type="text"
            id="name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
          />
        </div>
        <div className="mb-4">
          <label htmlFor="email" className="block text-sm font-medium text-gray-700">Email</label>
          <input
            type="email"
            id="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
          />
        </div>
        <button type="submit" className="w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50">
          Update Profile
        </button>
      </form>
      <form onSubmit={handlePasswordChange} className="mb-8">
        <h3 className="text-xl font-semibold mb-2">Change Password</h3>
        <div className="mb-4">
          <label htmlFor="newPassword" className="block text-sm font-medium text-gray-700">New Password</label>
          <input
            type="password"
            id="newPassword"
            value={newPassword}
            onChange={(e) => setNewPassword(e.target.value)}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
          />
        </div>
        <div className="mb-4">
          <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">Confirm New Password</label>
          <input
            type="password"
            id="confirmPassword"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
          />
        </div>
        <button type="submit" className="w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50">
          Change Password
        </button>
      </form>
      <div className="mb-8">
        <h3 className="text-xl font-semibold mb-2">Current Subscription Plan</h3>
        <p className="mb-4">Your current plan: <strong>{currentPlan}</strong></p>
        <h4 className="text-lg font-semibold mb-2">Change Plan</h4>
        <SubscriptionPlans 
          onSelectPlan={handleUpdatePlan} 
          selectedPlan={currentPlan}
        />
      </div>
    </div>
  );
};

export default UserProfile;

================
File: src/components/UserSettings.tsx
================
import React, { useState, useEffect } from 'react';
import { doc, getDoc, updateDoc } from 'firebase/firestore';
import { db, auth } from '../firebase';
import { useAuth } from '../contexts/AuthContext';
import SubscriptionPlans from './SubscriptionPlans';

const UserSettings: React.FC = () => {
  const { user } = useAuth();
  const [currentPlan, setCurrentPlan] = useState('');
  const [selectedFeatures, setSelectedFeatures] = useState<string[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchUserData = async () => {
      if (user) {
        try {
          const userDoc = await getDoc(doc(db, 'users', user.uid));
          if (userDoc.exists()) {
            const userData = userDoc.data();
            setCurrentPlan(userData.subscriptionPlan);
            setSelectedFeatures(userData.selectedFeatures || []);
          }
        } catch (error) {
          setError('Failed to fetch user data');
        } finally {
          setLoading(false);
        }
      }
    };

    fetchUserData();
  }, [user]);

  const handleUpdatePlan = async (newPlan: string) => {
    if (user) {
      try {
        await updateDoc(doc(db, 'users', user.uid), {
          subscriptionPlan: newPlan,
        });
        setCurrentPlan(newPlan);
      } catch (error) {
        setError('Failed to update subscription plan');
      }
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <div className="max-w-4xl mx-auto">
      <h2 className="text-2xl font-bold mb-4">User Settings</h2>
      <div className="mb-6">
        <h3 className="text-xl font-semibold mb-2">Current Subscription Plan</h3>
        <p className="mb-4">Your current plan: <strong>{currentPlan}</strong></p>
        <h4 className="text-lg font-semibold mb-2">Change Plan</h4>
        <SubscriptionPlans 
          onSelectPlan={handleUpdatePlan} 
          selectedPlan={currentPlan} 
          selectedFeatures={selectedFeatures}
        />
      </div>
      {error && <p className="text-red-500">{error}</p>}
    </div>
  );
};

export default UserSettings;

================
File: src/contexts/AuthContext.tsx
================
import React, { createContext, useContext, useState, useEffect } from 'react';
import { onAuthStateChanged, User as FirebaseUser } from 'firebase/auth';
import { doc, getDoc } from 'firebase/firestore';
import { auth, db } from '../firebase';

interface UserData extends FirebaseUser {
  role: 'admin' | 'user';
}

interface AuthContextType {
  user: UserData | null;
  loading: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider: React.FC = ({ children }) => {
  const [user, setUser] = useState<UserData | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {
      if (firebaseUser) {
        const userDoc = await getDoc(doc(db, 'users', firebaseUser.uid));
        const userData = userDoc.data();
        setUser({ ...firebaseUser, role: userData?.role || 'user' } as UserData);
      } else {
        setUser(null);
      }
      setLoading(false);
    });

    return () => unsubscribe();
  }, []);

  return (
    <AuthContext.Provider value={{ user, loading }}>
      {children}
    </AuthContext.Provider>
  );
};

export default AuthProvider;

================
File: src/contexts/CustomerContext.tsx
================
import React, { createContext, useState, useContext, useEffect } from 'react';
import { collection, onSnapshot, query, doc, updateDoc, addDoc, deleteDoc } from 'firebase/firestore';
import { db } from '../firebase';
import { useToast } from "../components/hooks/use-toast";

export interface Customer {
  id: string;
  name: string;
  email: string;
  phone: string;
  company: string;
  address: string;
  notes: string;
  loyaltyPoints: number;
  status: string;
  hirePurchaseCustomer: boolean;
  createdAt: Date;
}

interface CustomerContextType {
  customers: Customer[];
  addCustomer: (customer: Omit<Customer, 'id' | 'createdAt'>) => Promise<void>;
  updateCustomer: (id: string, customer: Partial<Customer>) => Promise<void>;
  deleteCustomer: (id: string) => Promise<void>;
}

const CustomerContext = createContext<CustomerContextType | undefined>(undefined);

export const useCustomer = () => {
  const context = useContext(CustomerContext);
  if (!context) {
    throw new Error('useCustomer must be used within a CustomerProvider');
  }
  return context;
};

export const CustomerProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [customers, setCustomers] = useState<Customer[]>([]);
  const { toast } = useToast();

  useEffect(() => {
    const q = query(collection(db, 'customers'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const customersData = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        createdAt: doc.data().createdAt?.toDate() || new Date(),
      } as Customer));
      setCustomers(customersData);
    }, (error) => {
      console.error("Error fetching customers: ", error);
      toast({
        title: "Error",
        description: "Failed to fetch customers. Please try again.",
        variant: "destructive",
      });
    });
    return () => unsubscribe();
  }, [toast]);

  const addCustomer = async (customer: Omit<Customer, 'id' | 'createdAt'>) => {
    try {
      await addDoc(collection(db, 'customers'), { 
        ...customer, 
        createdAt: new Date(),
      });
      toast({
        title: "Success",
        description: "Customer added successfully.",
      });
    } catch (error) {
      console.error("Error adding customer: ", error);
      toast({
        title: "Error",
        description: "Failed to add customer. Please try again.",
        variant: "destructive",
      });
    }
  };

  const updateCustomer = async (id: string, customer: Partial<Customer>) => {
    try {
      const customerRef = doc(db, 'customers', id);
      await updateDoc(customerRef, customer);
      toast({
        title: "Success",
        description: "Customer updated successfully.",
      });
    } catch (error) {
      console.error("Error updating customer: ", error);
      toast({
        title: "Error",
        description: "Failed to update customer. Please try again.",
        variant: "destructive",
      });
    }
  };

  const deleteCustomer = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'customers', id));
      toast({
        title: "Success",
        description: "Customer deleted successfully.",
      });
    } catch (error) {
      console.error("Error deleting customer: ", error);
      toast({
        title: "Error",
        description: "Failed to delete customer. Please try again.",
        variant: "destructive",
      });
    }
  };

  return (
    <CustomerContext.Provider value={{ customers, addCustomer, updateCustomer, deleteCustomer }}>
      {children}
    </CustomerContext.Provider>
  );
};

================
File: src/contexts/TenantContext.tsx
================
import React, { createContext, useContext, useState, useEffect } from 'react';
import { collection, doc, getDoc } from 'firebase/firestore';
import { db } from '../firebase';
import { useAuth } from './AuthContext';

interface Tenant {
  id: string;
  name: string;
  logo: string;
  primaryColor: string;
  secondaryColor: string;
}

interface TenantContextType {
  tenant: Tenant | null;
  setTenant: React.Dispatch<React.SetStateAction<Tenant | null>>;
  subscriptionPlan: string | null;
  setSubscriptionPlan: React.Dispatch<React.SetStateAction<string | null>>;
}

const TenantContext = createContext<TenantContextType | undefined>(undefined);

export const useTenant = () => {
  const context = useContext(TenantContext);
  if (context === undefined) {
    throw new Error('useTenant must be used within a TenantProvider');
  }
  return context;
};

export const TenantProvider: React.FC = ({ children }) => {
  const [tenant, setTenant] = useState<Tenant | null>(null);
  const [subscriptionPlan, setSubscriptionPlan] = useState<string | null>(null);
  const { user } = useAuth();

  useEffect(() => {
    const fetchTenantAndSubscription = async () => {
      if (user) {
        // Fetch user's subscription plan
        const userDoc = await getDoc(doc(db, 'users', user.uid));
        if (userDoc.exists()) {
          setSubscriptionPlan(userDoc.data().subscriptionPlan);
        }

        // Fetch tenant information
        // In a real multi-tenant system, you'd determine the tenant ID dynamically
        // For this example, we'll use a hardcoded tenant ID
        const tenantId = 'default-tenant';
        const tenantDoc = await getDoc(doc(collection(db, 'tenants'), tenantId));
        
        if (tenantDoc.exists()) {
          setTenant({ id: tenantDoc.id, ...tenantDoc.data() } as Tenant);
        }
      }
    };

    fetchTenantAndSubscription();
  }, [user]);

  return (
    <TenantContext.Provider value={{ tenant, setTenant, subscriptionPlan, setSubscriptionPlan }}>
      {children}
    </TenantContext.Provider>
  );
};

export default TenantProvider;

================
File: src/firebase.ts
================
import { initializeApp } from 'firebase/app';
import { getFirestore } from 'firebase/firestore';
import { getAuth } from 'firebase/auth';
import { getStorage, ref, listAll } from "firebase/storage";

const firebaseConfig = {
  apiKey: "AIzaSyAeyO1d8aw92E8NKoVp_Mv3VKCqLWEVtsw",
  authDomain: "erp-system-2109c.firebaseapp.com",
  projectId: "erp-system-2109c",
  storageBucket: "erp-system-2109c.appspot.com",
  messagingSenderId: "242437276043",
  appId: "1:242437276043:web:d66197c6f039d0d9d0ef8e",
  measurementId: "G-VT9YL1HS5V"
};

const app = initializeApp(firebaseConfig);
export const db = getFirestore(app);
export const auth = getAuth(app);
export const storage = getStorage(app);

================
File: src/index.css
================
@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';
@import './styles/custom-scrollbar.css';
@import './styles/customStyles.css';

================
File: src/lib/utils.ts
================
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: src/main.tsx
================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'
import './index.css'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

================
File: src/styles/animations.css
================
@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  
  @keyframes slideInFromLeft {
    from { transform: translateX(-100%); }
    to { transform: translateX(0); }
  }
  
  @keyframes slideInFromRight {
    from { transform: translateX(100%); }
    to { transform: translateX(0); }
  }
  
  .fade-in {
    @apply animate-[fadeIn_0.3s_ease-in-out];
  }
  
  .slide-in-left {
    @apply animate-[slideInFromLeft_0.3s_ease-in-out];
  }
  
  .slide-in-right {
    @apply animate-[slideInFromRight_0.3s_ease-in-out];
  }

================
File: src/styles/custom-scrollbar.css
================
.scrollbar-hide {
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* IE and Edge */
  }
  
  .scrollbar-hide::-webkit-scrollbar {
    display: none; /* Chrome, Safari and Opera */
  }
  
  /* Show scrollbar on hover */
  .scrollbar-default {
    scrollbar-width: thin; /* Firefox */
    -ms-overflow-style: auto; /* IE and Edge */
  }
  
  .scrollbar-default::-webkit-scrollbar {
    width: 6px; /* Adjust as needed */
  }
  
  .scrollbar-default::-webkit-scrollbar-track {
    background: rgba(0, 0, 0, 0.1);
  }
  
  .scrollbar-default::-webkit-scrollbar-thumb {
    background-color: rgba(255, 255, 255, 0.3);
    border-radius: 3px;
  }
  
  .scrollbar-default::-webkit-scrollbar-thumb:hover {
    background-color: rgba(255, 255, 255, 0.5);
  }

================
File: src/styles/customStyles.css
================
.custom-button {
    background-image: linear-gradient(to right, #3b82f6, #2563eb);
    color: white;
    font-weight: 600;
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    transition: all 0.3s ease-in-out;
  }
  
  .custom-button:hover {
    background-image: linear-gradient(to right, #2563eb, #1d4ed8);
    transform: scale(1.05);
  }
  
  /* Custom table styles */
  .custom-table {
    width: 100%;
    border-collapse: collapse;
  }
  
  .custom-table th {
    background-color: #f3f4f6;
    text-align: left;
    color: #374151;
    font-weight: 600;
    padding: 0.75rem;
    border-bottom: 1px solid #e5e7eb;
  }
  
  .custom-table td {
    padding: 0.75rem;
    border-bottom: 1px solid #e5e7eb;
  }
  
  .custom-table tr:hover {
    background-color: #f9fafb;
    transition: background-color 0.2s;
  }
  
  /* Custom card styles */
  .custom-card {
    background-color: white;
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    padding: 1.5rem;
  }
  
  .custom-card-title {
    font-size: 1.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
  }
  
  /* Status badge */
  .status-badge {
    padding: 0.25rem 0.5rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 600;
  }
  
  .status-badge-new {
    background-color: #d1fae5;
    color: #065f46;
  }
  
  .status-badge-returning {
    background-color: #dbeafe;
    color: #1e40af;
  }
  
  .status-badge-inactive {
    background-color: #e5e7eb;
    color: #374151;
  }

================
File: src/types/hirePurchase.ts
================
export interface HirePurchasePayment {
    id: string;
    amount: number;
    dueDate: Date;
    paidDate?: Date;
    status: 'pending' | 'paid' | 'overdue';
  }
  
  export interface HirePurchaseAgreement {
    id: string;
    customerId: string;
    customerName: string;
    items: {
      id: string;
      name: string;
      quantity: number;
      price: number;
      discount: number;
    }[];
    totalAmount: number;
    downPayment: number;
    amountFinanced: number;
    interestRate: number;
    term: number; // in months
    monthlyPayment: number;
    startDate: Date;
    endDate: Date;
    payments: HirePurchasePayment[];
    status: 'active' | 'completed' | 'defaulted';
    createdAt: Date;
    updatedAt: Date;
  }

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}

================
File: vite.config.ts
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
})
